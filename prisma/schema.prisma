generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Keep IDs as String to match current API shapes (dataManager uses string IDs)
// Use JSON for small arrays (speakers, tags, notes) to minimize refactors

model Event {
  id                 String   @id @default(cuid())
  title              String
  description        String
  date               DateTime
  time               String
  location           String
  onlineLink         String?  // Link tham gia online (Zoom, Meet, etc.)
  capacity           Int
  price              Int       @default(0)
  speakers           Json?
  requirements       String?
  agenda             String?
  image              String?
  category           String
  status             String    // 'upcoming' | 'past' | 'cancelled'
  registrationsCount Int       @default(0) // denormalized for fast UI (optional)
  actualParticipants Int?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt

  registrations      Registration[]
}

model News {
  id          String   @id @default(cuid())
  title       String
  content     String
  excerpt     String
  author      String
  source      String
  category    String
  importance  String   // 'high' | 'medium' | 'low'
  published   Boolean  @default(false)
  publishedAt DateTime?
  image       String?
  tags        Json?
  link        String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Contact {
  id        String   @id @default(cuid())
  name      String
  email     String
  phone     String
  company   String
  role      String
  message   String
  type      String   // 'partnership' | 'collaboration' | 'sponsorship' | 'general'
  status    String   // 'new' | 'contacted' | 'in_negotiation' | 'partnered' | 'rejected'
  priority  String   // 'high' | 'medium' | 'low'
  notes     Json?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model User {
  id         String   @id @default(cuid())
  name       String
  email      String   @unique
  phone      String
  company    String
  role       String
  status     String   // 'active' | 'inactive'
  joinDate   DateTime
  lastActive String   // keep as string to match current UI text (e.g., '2 giờ trước')
}

model Registration {
  id            String   @id @default(cuid())
  eventId       String
  fullName      String
  email         String
  phone         String?
  organization  String?
  experience    String?
  expectation   String?
  status        String   // 'pending' | 'confirmed' | 'cancelled'
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  event         Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)

  @@index([eventId])
}



model Setting {
  key       String   @id
  value     String?
  json      Json?
  updatedAt DateTime @updatedAt
}


