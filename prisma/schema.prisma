generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Event {
  id                 String         @id @default(cuid())
  title              String
  description        String
  date               DateTime
  time               String
  location           String
  capacity           Int
  price              Int            @default(0)
  speakers           Json?
  requirements       String?
  agenda             String?
  image              String?
  category           String
  status             String
  registrationsCount Int            @default(0)
  actualParticipants Int?
  createdAt          DateTime       @default(now())
  updatedAt          DateTime       @updatedAt
  onlineLink         String?
  registrations      Registration[]
}

model News {
  id          String    @id @default(cuid())
  title       String
  content     String
  excerpt     String
  author      String
  source      String
  category    String
  importance  String
  published   Boolean   @default(false)
  publishedAt DateTime?
  image       String?
  tags        Json?
  link        String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Contact {
  id        String   @id @default(cuid())
  name      String
  email     String
  phone     String
  company   String
  role      String
  message   String
  type      String
  status    String
  priority  String
  notes     Json?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model User {
  id         String   @id @default(cuid())
  name       String
  email      String   @unique
  company    String
  joinDate   DateTime
  lastActive String
  phone      String
  role       String
  status     String
}

model Registration {
  id            String   @id @default(cuid())
  eventId       String
  fullName      String
  email         String
  phone         String?
  organization  String?
  experience    String?
  expectation   String?
  status        String
  paymentStatus String?  @default("pending") // pending, pending_verification, paid, failed
  transactionId String?  // Mã giao dịch từ ngân hàng/VDT
  amount        Int?     // Số tiền thanh toán (VNĐ)
  paymentMethod String?  // bank_transfer, vnpay, momo, etc.
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  event         Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)

  @@index([eventId])
}

model Setting {
  key       String   @id
  value     String?
  json      Json?
  updatedAt DateTime @updatedAt
}

model Course {
  id              String             @id @default(cuid())
  title           String
  description     String
  image           String?
  level           String
  price           Int                @default(0)
  status          String
  category        String
  tags            Json?
  lessonsCount    Int                @default(0)
  durationMinutes Int                @default(0)
  enrolledCount   Int                @default(0)  // Số học viên thực tế
  publishedAt     DateTime?
  
  // Discount fields
  discountPercentage Int?            @default(0) // Phần trăm giảm giá (0-100)
  discountAmount     Int?            @default(0) // Số tiền giảm giá cố định (VNĐ)
  discountStartDate  DateTime?       // Ngày bắt đầu áp giảm giá
  discountEndDate    DateTime?       // Ngày kết thúc áp giảm giá
  isDiscountActive   Boolean         @default(false) // Trạng thái áp giảm giá
  
  // New fields for enhanced course information
  overview        String?            // Tổng quan khóa học
  curriculum      Json?              // Chương trình học (array of lessons)
  instructorName  String?            // Tên giảng viên
  instructorBio   String?            // Tiểu sử giảng viên
  instructorImage String?            // Ảnh giảng viên
  instructorEmail String?            // Email giảng viên
  requirements    String?            // Yêu cầu đầu vào
  whatYouWillLearn Json?             // Những gì bạn sẽ học (array)
  
  createdAt       DateTime           @default(now())
  updatedAt       DateTime           @updatedAt
  enrollments     CourseEnrollment[]
}

model CourseEnrollment {
  id            String   @id @default(cuid())
  courseId      String
  fullName      String
  email         String
  phone         String?
  status        String
  paymentStatus String?  @default("pending") // pending, pending_verification, paid, failed
  transactionId String?  // Mã giao dịch từ ngân hàng/VDT
  amount        Int?     // Số tiền thanh toán (VNĐ)
  paymentMethod String?  // bank_transfer, vnpay, momo, etc.
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  course        Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@index([courseId])
}

model NewsletterSubscription {
  id           String   @id @default(cuid())
  email        String   @unique
  status       String   @default("active") // active, inactive
  subscribedAt DateTime @default(now())
  source       String?  @default("website") // website, popup, admin, etc.
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@index([email])
  @@index([status])
}

model NotificationLog {
  id            String   @id @default(cuid())
  type          String   // course, event
  title         String
  description   String   @db.Text
  recipientCount Int     // Tổng số người nhận
  successCount  Int      // Số email gửi thành công
  failureCount  Int      // Số email gửi thất bại
  courseId      String?  // ID khóa học (nếu là thông báo khóa học)
  eventId       String?  // ID sự kiện (nếu là thông báo sự kiện)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@index([type])
  @@index([createdAt])
}
