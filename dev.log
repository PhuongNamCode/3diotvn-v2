nohup: ignoring input

> web@0.1.0 dev
> next dev --turbopack --port 3000

 ⚠ The config property `experimental.turbo` is deprecated. Move this setting to `config.turbopack` or run `npx @next/codemod@latest next-experimental-turbo-to-turbopack .`
 ⨯ Failed to start server
Error: listen EADDRINUSE: address already in use :::3000
    at <unknown> (Error: listen EADDRINUSE: address already in use :::3000)
    at new Promise (<anonymous>) {
  code: 'EADDRINUSE',
 ○ Compiling / ...
 ✓ Compiled / in 2.3s
 GET / 200 in 2704ms
 ✓ Compiled /api/events in 399ms
prisma:query SELECT "public"."Event"."id", "public"."Event"."title", "public"."Event"."description", "public"."Event"."date", "public"."Event"."time", "public"."Event"."location", "public"."Event"."capacity", "public"."Event"."price", "public"."Event"."speakers", "public"."Event"."requirements", "public"."Event"."agenda", "public"."Event"."image", "public"."Event"."category", "public"."Event"."status", "public"."Event"."registrationsCount", "public"."Event"."actualParticipants", "public"."Event"."createdAt", "public"."Event"."updatedAt" FROM "public"."Event" WHERE 1=1 ORDER BY "public"."Event"."createdAt" ASC OFFSET $1
prisma:query SELECT "public"."Registration"."id", "public"."Registration"."eventId" FROM "public"."Registration" WHERE ("public"."Registration"."status" <> $1 AND "public"."Registration"."eventId" IN ($2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12)) OFFSET $13
 GET /api/events 200 in 911ms
prisma:query SELECT "public"."News"."id", "public"."News"."title", "public"."News"."content", "public"."News"."excerpt", "public"."News"."author", "public"."News"."source", "public"."News"."category", "public"."News"."importance", "public"."News"."published", "public"."News"."publishedAt", "public"."News"."image", "public"."News"."tags", "public"."News"."link", "public"."News"."createdAt", "public"."News"."updatedAt" FROM "public"."News" WHERE 1=1 ORDER BY "public"."News"."createdAt" DESC OFFSET $1
prisma:query SELECT "public"."Contact"."id", "public"."Contact"."name", "public"."Contact"."email", "public"."Contact"."phone", "public"."Contact"."company", "public"."Contact"."role", "public"."Contact"."message", "public"."Contact"."type", "public"."Contact"."status", "public"."Contact"."priority", "public"."Contact"."notes", "public"."Contact"."createdAt", "public"."Contact"."updatedAt" FROM "public"."Contact" WHERE 1=1 ORDER BY "public"."Contact"."createdAt" DESC OFFSET $1
 GET /api/contacts 200 in 913ms
 GET /api/registrations 200 in 915ms
 GET /api/news 200 in 919ms
prisma:query SELECT "public"."Registration"."id", "public"."Registration"."eventId", "public"."Registration"."fullName", "public"."Registration"."email", "public"."Registration"."phone", "public"."Registration"."organization", "public"."Registration"."experience", "public"."Registration"."expectation", "public"."Registration"."status", "public"."Registration"."createdAt", "public"."Registration"."updatedAt" FROM "public"."Registration" WHERE 1=1 ORDER BY "public"."Registration"."createdAt" DESC OFFSET $1
 ✓ Compiled /admin in 294ms
 GET /admin 200 in 378ms
 ✓ Compiled /api/stats in 112ms
prisma:query SELECT "public"."Event"."id", "public"."Event"."title", "public"."Event"."description", "public"."Event"."date", "public"."Event"."time", "public"."Event"."location", "public"."Event"."capacity", "public"."Event"."price", "public"."Event"."speakers", "public"."Event"."requirements", "public"."Event"."agenda", "public"."Event"."image", "public"."Event"."category", "public"."Event"."status", "public"."Event"."registrationsCount", "public"."Event"."actualParticipants", "public"."Event"."createdAt", "public"."Event"."updatedAt" FROM "public"."Event" WHERE 1=1 ORDER BY "public"."Event"."createdAt" ASC OFFSET $1
prisma:query SELECT "public"."Registration"."id", "public"."Registration"."eventId" FROM "public"."Registration" WHERE ("public"."Registration"."status" <> $1 AND "public"."Registration"."eventId" IN ($2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12)) OFFSET $13
 GET /api/events 200 in 301ms
 GET /api/news 200 in 304ms
prisma:query SELECT "public"."News"."id", "public"."News"."title", "public"."News"."content", "public"."News"."excerpt", "public"."News"."author", "public"."News"."source", "public"."News"."category", "public"."News"."importance", "public"."News"."published", "public"."News"."publishedAt", "public"."News"."image", "public"."News"."tags", "public"."News"."link", "public"."News"."createdAt", "public"."News"."updatedAt" FROM "public"."News" WHERE 1=1 ORDER BY "public"."News"."createdAt" DESC OFFSET $1
prisma:query SELECT "public"."Contact"."id", "public"."Contact"."name", "public"."Contact"."email", "public"."Contact"."phone", "public"."Contact"."company", "public"."Contact"."role", "public"."Contact"."message", "public"."Contact"."type", "public"."Contact"."status", "public"."Contact"."priority", "public"."Contact"."notes", "public"."Contact"."createdAt", "public"."Contact"."updatedAt" FROM "public"."Contact" WHERE 1=1 ORDER BY "public"."Contact"."createdAt" DESC OFFSET $1
 GET /api/contacts 200 in 313ms
prisma:query SELECT COUNT(*) FROM (SELECT "public"."Event"."id" FROM "public"."Event" WHERE 1=1 OFFSET $1) AS "sub"
prisma:query SELECT COUNT(*) FROM (SELECT "public"."Registration"."id" FROM "public"."Registration" WHERE "public"."Registration"."status" <> $1 OFFSET $2) AS "sub"
prisma:query SELECT COUNT(*) FROM (SELECT "public"."News"."id" FROM "public"."News" WHERE 1=1 OFFSET $1) AS "sub"
prisma:query SELECT COUNT(*) FROM (SELECT "public"."Event"."id" FROM "public"."Event" WHERE "public"."Event"."status" = $1 OFFSET $2) AS "sub"
prisma:query SELECT COUNT(*) FROM (SELECT "public"."User"."id" FROM "public"."User" WHERE "public"."User"."status" = $1 OFFSET $2) AS "sub"
prisma:query SELECT COUNT(*) FROM (SELECT "public"."Contact"."id" FROM "public"."Contact" WHERE 1=1 OFFSET $1) AS "sub"
prisma:query SELECT COUNT(*) FROM (SELECT "public"."News"."id" FROM "public"."News" WHERE "public"."News"."published" = $1 OFFSET $2) AS "sub"
prisma:query SELECT COUNT(*) FROM (SELECT "public"."Contact"."id" FROM "public"."Contact" WHERE "public"."Contact"."status" = $1 OFFSET $2) AS "sub"
prisma:query SELECT COUNT(*) FROM (SELECT "public"."User"."id" FROM "public"."User" WHERE 1=1 OFFSET $1) AS "sub"
 GET /api/stats 200 in 367ms
prisma:query SELECT "public"."Event"."id", "public"."Event"."title", "public"."Event"."description", "public"."Event"."date", "public"."Event"."time", "public"."Event"."location", "public"."Event"."capacity", "public"."Event"."price", "public"."Event"."speakers", "public"."Event"."requirements", "public"."Event"."agenda", "public"."Event"."image", "public"."Event"."category", "public"."Event"."status", "public"."Event"."registrationsCount", "public"."Event"."actualParticipants", "public"."Event"."createdAt", "public"."Event"."updatedAt" FROM "public"."Event" WHERE 1=1 ORDER BY "public"."Event"."createdAt" ASC OFFSET $1
prisma:query SELECT "public"."Registration"."id", "public"."Registration"."eventId" FROM "public"."Registration" WHERE ("public"."Registration"."status" <> $1 AND "public"."Registration"."eventId" IN ($2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12)) OFFSET $13
prisma:query SELECT "public"."News"."id", "public"."News"."title", "public"."News"."content", "public"."News"."excerpt", "public"."News"."author", "public"."News"."source", "public"."News"."category", "public"."News"."importance", "public"."News"."published", "public"."News"."publishedAt", "public"."News"."image", "public"."News"."tags", "public"."News"."link", "public"."News"."createdAt", "public"."News"."updatedAt" FROM "public"."News" WHERE 1=1 ORDER BY "public"."News"."createdAt" DESC OFFSET $1
 GET /api/events 200 in 324ms
 GET /api/news 200 in 327ms
 GET /api/contacts 200 in 328ms
prisma:query SELECT "public"."Contact"."id", "public"."Contact"."name", "public"."Contact"."email", "public"."Contact"."phone", "public"."Contact"."company", "public"."Contact"."role", "public"."Contact"."message", "public"."Contact"."type", "public"."Contact"."status", "public"."Contact"."priority", "public"."Contact"."notes", "public"."Contact"."createdAt", "public"."Contact"."updatedAt" FROM "public"."Contact" WHERE 1=1 ORDER BY "public"."Contact"."createdAt" DESC OFFSET $1
prisma:query SELECT COUNT(*) FROM (SELECT "public"."News"."id" FROM "public"."News" WHERE 1=1 OFFSET $1) AS "sub"
prisma:query SELECT COUNT(*) FROM (SELECT "public"."Event"."id" FROM "public"."Event" WHERE 1=1 OFFSET $1) AS "sub"
prisma:query SELECT COUNT(*) FROM (SELECT "public"."Event"."id" FROM "public"."Event" WHERE "public"."Event"."status" = $1 OFFSET $2) AS "sub"
prisma:query SELECT COUNT(*) FROM (SELECT "public"."Contact"."id" FROM "public"."Contact" WHERE 1=1 OFFSET $1) AS "sub"
prisma:query SELECT COUNT(*) FROM (SELECT "public"."User"."id" FROM "public"."User" WHERE 1=1 OFFSET $1) AS "sub"
prisma:query SELECT COUNT(*) FROM (SELECT "public"."News"."id" FROM "public"."News" WHERE "public"."News"."published" = $1 OFFSET $2) AS "sub"
prisma:query SELECT COUNT(*) FROM (SELECT "public"."Contact"."id" FROM "public"."Contact" WHERE "public"."Contact"."status" = $1 OFFSET $2) AS "sub"
prisma:query SELECT COUNT(*) FROM (SELECT "public"."User"."id" FROM "public"."User" WHERE "public"."User"."status" = $1 OFFSET $2) AS "sub"
prisma:query SELECT COUNT(*) FROM (SELECT "public"."Registration"."id" FROM "public"."Registration" WHERE "public"."Registration"."status" <> $1 OFFSET $2) AS "sub"
 GET /api/stats 200 in 285ms
prisma:query SELECT "public"."Event"."id", "public"."Event"."title", "public"."Event"."description", "public"."Event"."date", "public"."Event"."time", "public"."Event"."location", "public"."Event"."capacity", "public"."Event"."price", "public"."Event"."speakers", "public"."Event"."requirements", "public"."Event"."agenda", "public"."Event"."image", "public"."Event"."category", "public"."Event"."status", "public"."Event"."registrationsCount", "public"."Event"."actualParticipants", "public"."Event"."createdAt", "public"."Event"."updatedAt" FROM "public"."Event" WHERE 1=1 ORDER BY "public"."Event"."createdAt" ASC OFFSET $1
prisma:query SELECT "public"."Registration"."id", "public"."Registration"."eventId" FROM "public"."Registration" WHERE ("public"."Registration"."status" <> $1 AND "public"."Registration"."eventId" IN ($2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12)) OFFSET $13
 GET /api/events 200 in 255ms
prisma:query SELECT "public"."Event"."id", "public"."Event"."title", "public"."Event"."description", "public"."Event"."date", "public"."Event"."time", "public"."Event"."location", "public"."Event"."capacity", "public"."Event"."price", "public"."Event"."speakers", "public"."Event"."requirements", "public"."Event"."agenda", "public"."Event"."image", "public"."Event"."category", "public"."Event"."status", "public"."Event"."registrationsCount", "public"."Event"."actualParticipants", "public"."Event"."createdAt", "public"."Event"."updatedAt" FROM "public"."Event" WHERE 1=1 ORDER BY "public"."Event"."createdAt" ASC OFFSET $1
prisma:query SELECT "public"."Registration"."id", "public"."Registration"."eventId" FROM "public"."Registration" WHERE ("public"."Registration"."status" <> $1 AND "public"."Registration"."eventId" IN ($2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12)) OFFSET $13
 GET /api/events 200 in 259ms
 ✓ Compiled /api/upload in 141ms
 POST /api/upload 200 in 428ms
prisma:query SELECT 1
prisma:query INSERT INTO "public"."Event" ("id","title","description","date","time","location","capacity","price","speakers","requirements","agenda","image","category","status","registrationsCount","actualParticipants","createdAt","updatedAt") VALUES ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18) RETURNING "public"."Event"."id", "public"."Event"."title", "public"."Event"."description", "public"."Event"."date", "public"."Event"."time", "public"."Event"."location", "public"."Event"."capacity", "public"."Event"."price", "public"."Event"."speakers", "public"."Event"."requirements", "public"."Event"."agenda", "public"."Event"."image", "public"."Event"."category", "public"."Event"."status", "public"."Event"."registrationsCount", "public"."Event"."actualParticipants", "public"."Event"."createdAt", "public"."Event"."updatedAt"
 POST /api/events 201 in 249ms
 GET / 200 in 102ms
 ✓ Compiled /favicon.ico in 148ms
prisma:query SELECT "public"."Event"."id", "public"."Event"."title", "public"."Event"."description", "public"."Event"."date", "public"."Event"."time", "public"."Event"."location", "public"."Event"."capacity", "public"."Event"."price", "public"."Event"."speakers", "public"."Event"."requirements", "public"."Event"."agenda", "public"."Event"."image", "public"."Event"."category", "public"."Event"."status", "public"."Event"."registrationsCount", "public"."Event"."actualParticipants", "public"."Event"."createdAt", "public"."Event"."updatedAt" FROM "public"."Event" WHERE 1=1 ORDER BY "public"."Event"."createdAt" ASC OFFSET $1
prisma:query SELECT "public"."Registration"."id", "public"."Registration"."eventId" FROM "public"."Registration" WHERE ("public"."Registration"."status" <> $1 AND "public"."Registration"."eventId" IN ($2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13)) OFFSET $14
prisma:query SELECT "public"."Registration"."id", "public"."Registration"."eventId", "public"."Registration"."fullName", "public"."Registration"."email", "public"."Registration"."phone", "public"."Registration"."organization", "public"."Registration"."experience", "public"."Registration"."expectation", "public"."Registration"."status", "public"."Registration"."createdAt", "public"."Registration"."updatedAt" FROM "public"."Registration" WHERE 1=1 ORDER BY "public"."Registration"."createdAt" DESC OFFSET $1
 GET /api/events 200 in 334ms
 GET /api/registrations 200 in 335ms
 GET /api/news 200 in 335ms
prisma:query SELECT "public"."News"."id", "public"."News"."title", "public"."News"."content", "public"."News"."excerpt", "public"."News"."author", "public"."News"."source", "public"."News"."category", "public"."News"."importance", "public"."News"."published", "public"."News"."publishedAt", "public"."News"."image", "public"."News"."tags", "public"."News"."link", "public"."News"."createdAt", "public"."News"."updatedAt" FROM "public"."News" WHERE 1=1 ORDER BY "public"."News"."createdAt" DESC OFFSET $1
prisma:query SELECT "public"."Contact"."id", "public"."Contact"."name", "public"."Contact"."email", "public"."Contact"."phone", "public"."Contact"."company", "public"."Contact"."role", "public"."Contact"."message", "public"."Contact"."type", "public"."Contact"."status", "public"."Contact"."priority", "public"."Contact"."notes", "public"."Contact"."createdAt", "public"."Contact"."updatedAt" FROM "public"."Contact" WHERE 1=1 ORDER BY "public"."Contact"."createdAt" DESC OFFSET $1
 GET /api/contacts 200 in 346ms
 GET /favicon.ico?favicon.0b3bf435.ico 200 in 446ms
prisma:query SELECT 1
prisma:query INSERT INTO "public"."Registration" ("id","eventId","fullName","email","phone","organization","experience","expectation","status","createdAt","updatedAt") VALUES ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11) RETURNING "public"."Registration"."id", "public"."Registration"."eventId", "public"."Registration"."fullName", "public"."Registration"."email", "public"."Registration"."phone", "public"."Registration"."organization", "public"."Registration"."experience", "public"."Registration"."expectation", "public"."Registration"."status", "public"."Registration"."createdAt", "public"."Registration"."updatedAt"
prisma:error 
Invalid `__TURBOPACK__imported__module__$5b$project$5d2f$lib$2f$prisma$2e$ts__$5b$app$2d$route$5d$__$28$ecmascript$29$__["prisma"].registration.create()` invocation in
/home/phuongnam/web/.next/server/chunks/[root-of-the-server]__aa09fb8c._.js:116:166

  113 async function POST(request) {
  114     try {
  115         const body = await request.json();
→ 116         const created = await __TURBOPACK__imported__module__$5b$project$5d2f$lib$2f$prisma$2e$ts__$5b$app$2d$route$5d$__$28$ecmascript$29$__["prisma"].registration.create(
Foreign key constraint violated: `Registration_eventId_fkey (index)`
Error creating registration: Error [PrismaClientKnownRequestError]: 
Invalid `__TURBOPACK__imported__module__$5b$project$5d2f$lib$2f$prisma$2e$ts__$5b$app$2d$route$5d$__$28$ecmascript$29$__["prisma"].registration.create()` invocation in
/home/phuongnam/web/.next/server/chunks/[root-of-the-server]__aa09fb8c._.js:116:166

  113 async function POST(request) {
  114     try {
  115         const body = await request.json();
→ 116         const created = await __TURBOPACK__imported__module__$5b$project$5d2f$lib$2f$prisma$2e$ts__$5b$app$2d$route$5d$__$28$ecmascript$29$__["prisma"].registration.create(
Foreign key constraint violated: `Registration_eventId_fkey (index)`
    at <unknown> (app/api/registrations/route.ts:20:47)
    at async POST (app/api/registrations/route.ts:20:21)
  18 |   try {
  19 |     const body = await request.json();
> 20 |     const created = await prisma.registration.create({
     |                                               ^
  21 |       data: {
  22 |         id: String(body.id || undefined),
  23 |         eventId: String(body.eventId), {
  code: 'P2003',
  clientVersion: '5.22.0',
  meta: [Object]
}
 POST /api/registrations 500 in 382ms
prisma:query INSERT INTO "public"."Registration" ("id","eventId","fullName","email","phone","organization","experience","expectation","status","createdAt","updatedAt") VALUES ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11) RETURNING "public"."Registration"."id", "public"."Registration"."eventId", "public"."Registration"."fullName", "public"."Registration"."email", "public"."Registration"."phone", "public"."Registration"."organization", "public"."Registration"."experience", "public"."Registration"."expectation", "public"."Registration"."status", "public"."Registration"."createdAt", "public"."Registration"."updatedAt"
prisma:error 
Invalid `__TURBOPACK__imported__module__$5b$project$5d2f$lib$2f$prisma$2e$ts__$5b$app$2d$route$5d$__$28$ecmascript$29$__["prisma"].registration.create()` invocation in
/home/phuongnam/web/.next/server/chunks/[root-of-the-server]__aa09fb8c._.js:116:166

  113 async function POST(request) {
  114     try {
  115         const body = await request.json();
→ 116         const created = await __TURBOPACK__imported__module__$5b$project$5d2f$lib$2f$prisma$2e$ts__$5b$app$2d$route$5d$__$28$ecmascript$29$__["prisma"].registration.create(
Foreign key constraint violated: `Registration_eventId_fkey (index)`
Error creating registration: Error [PrismaClientKnownRequestError]: 
Invalid `__TURBOPACK__imported__module__$5b$project$5d2f$lib$2f$prisma$2e$ts__$5b$app$2d$route$5d$__$28$ecmascript$29$__["prisma"].registration.create()` invocation in
/home/phuongnam/web/.next/server/chunks/[root-of-the-server]__aa09fb8c._.js:116:166

  113 async function POST(request) {
  114     try {
  115         const body = await request.json();
→ 116         const created = await __TURBOPACK__imported__module__$5b$project$5d2f$lib$2f$prisma$2e$ts__$5b$app$2d$route$5d$__$28$ecmascript$29$__["prisma"].registration.create(
Foreign key constraint violated: `Registration_eventId_fkey (index)`
    at <unknown> (app/api/registrations/route.ts:20:47)
    at async POST (app/api/registrations/route.ts:20:21)
  18 |   try {
  19 |     const body = await request.json();
> 20 |     const created = await prisma.registration.create({
     |                                               ^
  21 |       data: {
  22 |         id: String(body.id || undefined),
  23 |         eventId: String(body.eventId), {
  code: 'P2003',
  clientVersion: '5.22.0',
  meta: [Object]
}
 POST /api/registrations 500 in 308ms
 GET / 200 in 97ms
prisma:query SELECT "public"."Event"."id", "public"."Event"."title", "public"."Event"."description", "public"."Event"."date", "public"."Event"."time", "public"."Event"."location", "public"."Event"."capacity", "public"."Event"."price", "public"."Event"."speakers", "public"."Event"."requirements", "public"."Event"."agenda", "public"."Event"."image", "public"."Event"."category", "public"."Event"."status", "public"."Event"."registrationsCount", "public"."Event"."actualParticipants", "public"."Event"."createdAt", "public"."Event"."updatedAt" FROM "public"."Event" WHERE 1=1 ORDER BY "public"."Event"."createdAt" ASC OFFSET $1
prisma:query SELECT "public"."Registration"."id", "public"."Registration"."eventId" FROM "public"."Registration" WHERE ("public"."Registration"."status" <> $1 AND "public"."Registration"."eventId" IN ($2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13)) OFFSET $14
prisma:query SELECT "public"."Registration"."id", "public"."Registration"."eventId", "public"."Registration"."fullName", "public"."Registration"."email", "public"."Registration"."phone", "public"."Registration"."organization", "public"."Registration"."experience", "public"."Registration"."expectation", "public"."Registration"."status", "public"."Registration"."createdAt", "public"."Registration"."updatedAt" FROM "public"."Registration" WHERE 1=1 ORDER BY "public"."Registration"."createdAt" DESC OFFSET $1
 GET /api/events 200 in 342ms
 GET /api/registrations 200 in 345ms
 GET /api/contacts 200 in 346ms
prisma:query SELECT "public"."Contact"."id", "public"."Contact"."name", "public"."Contact"."email", "public"."Contact"."phone", "public"."Contact"."company", "public"."Contact"."role", "public"."Contact"."message", "public"."Contact"."type", "public"."Contact"."status", "public"."Contact"."priority", "public"."Contact"."notes", "public"."Contact"."createdAt", "public"."Contact"."updatedAt" FROM "public"."Contact" WHERE 1=1 ORDER BY "public"."Contact"."createdAt" DESC OFFSET $1
 GET /api/news 200 in 353ms
prisma:query SELECT "public"."News"."id", "public"."News"."title", "public"."News"."content", "public"."News"."excerpt", "public"."News"."author", "public"."News"."source", "public"."News"."category", "public"."News"."importance", "public"."News"."published", "public"."News"."publishedAt", "public"."News"."image", "public"."News"."tags", "public"."News"."link", "public"."News"."createdAt", "public"."News"."updatedAt" FROM "public"."News" WHERE 1=1 ORDER BY "public"."News"."createdAt" DESC OFFSET $1
 GET /favicon.ico?favicon.0b3bf435.ico 200 in 251ms
prisma:query SELECT 1
prisma:query INSERT INTO "public"."Registration" ("id","eventId","fullName","email","phone","organization","experience","expectation","status","createdAt","updatedAt") VALUES ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11) RETURNING "public"."Registration"."id", "public"."Registration"."eventId", "public"."Registration"."fullName", "public"."Registration"."email", "public"."Registration"."phone", "public"."Registration"."organization", "public"."Registration"."experience", "public"."Registration"."expectation", "public"."Registration"."status", "public"."Registration"."createdAt", "public"."Registration"."updatedAt"
prisma:query SELECT COUNT(*) FROM (SELECT "public"."Registration"."id" FROM "public"."Registration" WHERE ("public"."Registration"."eventId" = $1 AND (NOT "public"."Registration"."status" = $2)) OFFSET $3) AS "sub"
prisma:query UPDATE "public"."Event" SET "registrationsCount" = $1, "updatedAt" = $2 WHERE ("public"."Event"."id" = $3 AND 1=1) RETURNING "public"."Event"."id", "public"."Event"."title", "public"."Event"."description", "public"."Event"."date", "public"."Event"."time", "public"."Event"."location", "public"."Event"."capacity", "public"."Event"."price", "public"."Event"."speakers", "public"."Event"."requirements", "public"."Event"."agenda", "public"."Event"."image", "public"."Event"."category", "public"."Event"."status", "public"."Event"."registrationsCount", "public"."Event"."actualParticipants", "public"."Event"."createdAt", "public"."Event"."updatedAt"
 POST /api/registrations 201 in 258ms
prisma:query SELECT "public"."Event"."id", "public"."Event"."title", "public"."Event"."description", "public"."Event"."date", "public"."Event"."time", "public"."Event"."location", "public"."Event"."capacity", "public"."Event"."price", "public"."Event"."speakers", "public"."Event"."requirements", "public"."Event"."agenda", "public"."Event"."image", "public"."Event"."category", "public"."Event"."status", "public"."Event"."registrationsCount", "public"."Event"."actualParticipants", "public"."Event"."createdAt", "public"."Event"."updatedAt" FROM "public"."Event" WHERE 1=1 ORDER BY "public"."Event"."createdAt" ASC OFFSET $1
prisma:query SELECT "public"."Registration"."id", "public"."Registration"."eventId" FROM "public"."Registration" WHERE ("public"."Registration"."status" <> $1 AND "public"."Registration"."eventId" IN ($2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13)) OFFSET $14
 GET /api/events 200 in 249ms
prisma:query INSERT INTO "public"."Registration" ("id","eventId","fullName","email","phone","organization","experience","expectation","status","createdAt","updatedAt") VALUES ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11) RETURNING "public"."Registration"."id", "public"."Registration"."eventId", "public"."Registration"."fullName", "public"."Registration"."email", "public"."Registration"."phone", "public"."Registration"."organization", "public"."Registration"."experience", "public"."Registration"."expectation", "public"."Registration"."status", "public"."Registration"."createdAt", "public"."Registration"."updatedAt"
prisma:error 
Invalid `__TURBOPACK__imported__module__$5b$project$5d2f$lib$2f$prisma$2e$ts__$5b$app$2d$route$5d$__$28$ecmascript$29$__["prisma"].registration.create()` invocation in
/home/phuongnam/web/.next/server/chunks/[root-of-the-server]__aa09fb8c._.js:116:166

  113 async function POST(request) {
  114     try {
  115         const body = await request.json();
→ 116         const created = await __TURBOPACK__imported__module__$5b$project$5d2f$lib$2f$prisma$2e$ts__$5b$app$2d$route$5d$__$28$ecmascript$29$__["prisma"].registration.create(
Unique constraint failed on the fields: (`id`)
Error creating registration: Error [PrismaClientKnownRequestError]: 
Invalid `__TURBOPACK__imported__module__$5b$project$5d2f$lib$2f$prisma$2e$ts__$5b$app$2d$route$5d$__$28$ecmascript$29$__["prisma"].registration.create()` invocation in
/home/phuongnam/web/.next/server/chunks/[root-of-the-server]__aa09fb8c._.js:116:166

  113 async function POST(request) {
  114     try {
  115         const body = await request.json();
→ 116         const created = await __TURBOPACK__imported__module__$5b$project$5d2f$lib$2f$prisma$2e$ts__$5b$app$2d$route$5d$__$28$ecmascript$29$__["prisma"].registration.create(
Unique constraint failed on the fields: (`id`)
    at <unknown> (app/api/registrations/route.ts:20:47)
    at async POST (app/api/registrations/route.ts:20:21)
  18 |   try {
  19 |     const body = await request.json();
> 20 |     const created = await prisma.registration.create({
     |                                               ^
  21 |       data: {
  22 |         id: String(body.id || undefined),
  23 |         eventId: String(body.eventId), {
  code: 'P2002',
  clientVersion: '5.22.0',
  meta: [Object]
}
 POST /api/registrations 500 in 326ms
prisma:query SELECT 1
prisma:query INSERT INTO "public"."Registration" ("id","eventId","fullName","email","phone","organization","experience","expectation","status","createdAt","updatedAt") VALUES ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11) RETURNING "public"."Registration"."id", "public"."Registration"."eventId", "public"."Registration"."fullName", "public"."Registration"."email", "public"."Registration"."phone", "public"."Registration"."organization", "public"."Registration"."experience", "public"."Registration"."expectation", "public"."Registration"."status", "public"."Registration"."createdAt", "public"."Registration"."updatedAt"
prisma:error 
Invalid `__TURBOPACK__imported__module__$5b$project$5d2f$lib$2f$prisma$2e$ts__$5b$app$2d$route$5d$__$28$ecmascript$29$__["prisma"].registration.create()` invocation in
/home/phuongnam/web/.next/server/chunks/[root-of-the-server]__aa09fb8c._.js:116:166

  113 async function POST(request) {
  114     try {
  115         const body = await request.json();
→ 116         const created = await __TURBOPACK__imported__module__$5b$project$5d2f$lib$2f$prisma$2e$ts__$5b$app$2d$route$5d$__$28$ecmascript$29$__["prisma"].registration.create(
Unique constraint failed on the fields: (`id`)
Error creating registration: Error [PrismaClientKnownRequestError]: 
Invalid `__TURBOPACK__imported__module__$5b$project$5d2f$lib$2f$prisma$2e$ts__$5b$app$2d$route$5d$__$28$ecmascript$29$__["prisma"].registration.create()` invocation in
/home/phuongnam/web/.next/server/chunks/[root-of-the-server]__aa09fb8c._.js:116:166

  113 async function POST(request) {
  114     try {
  115         const body = await request.json();
→ 116         const created = await __TURBOPACK__imported__module__$5b$project$5d2f$lib$2f$prisma$2e$ts__$5b$app$2d$route$5d$__$28$ecmascript$29$__["prisma"].registration.create(
Unique constraint failed on the fields: (`id`)
    at <unknown> (app/api/registrations/route.ts:20:47)
    at async POST (app/api/registrations/route.ts:20:21)
  18 |   try {
  19 |     const body = await request.json();
> 20 |     const created = await prisma.registration.create({
     |                                               ^
  21 |       data: {
  22 |         id: String(body.id || undefined),
  23 |         eventId: String(body.eventId), {
  code: 'P2002',
  clientVersion: '5.22.0',
  meta: [Object]
}
 POST /api/registrations 500 in 350ms
 POST /api/upload 200 in 298ms
prisma:query SELECT 1
prisma:query INSERT INTO "public"."Event" ("id","title","description","date","time","location","capacity","price","speakers","requirements","agenda","image","category","status","registrationsCount","actualParticipants","createdAt","updatedAt") VALUES ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18) RETURNING "public"."Event"."id", "public"."Event"."title", "public"."Event"."description", "public"."Event"."date", "public"."Event"."time", "public"."Event"."location", "public"."Event"."capacity", "public"."Event"."price", "public"."Event"."speakers", "public"."Event"."requirements", "public"."Event"."agenda", "public"."Event"."image", "public"."Event"."category", "public"."Event"."status", "public"."Event"."registrationsCount", "public"."Event"."actualParticipants", "public"."Event"."createdAt", "public"."Event"."updatedAt"
prisma:error 
Invalid `__TURBOPACK__imported__module__$5b$project$5d2f$lib$2f$prisma$2e$ts__$5b$app$2d$route$5d$__$28$ecmascript$29$__["prisma"].event.create()` invocation in
/home/phuongnam/web/.next/server/chunks/[root-of-the-server]__e2e46c1a._.js:148:159

  145 async function POST(request) {
  146     try {
  147         const body = await request.json();
→ 148         const created = await __TURBOPACK__imported__module__$5b$project$5d2f$lib$2f$prisma$2e$ts__$5b$app$2d$route$5d$__$28$ecmascript$29$__["prisma"].event.create(
Unique constraint failed on the fields: (`id`)
Error creating event: Error [PrismaClientKnownRequestError]: 
Invalid `__TURBOPACK__imported__module__$5b$project$5d2f$lib$2f$prisma$2e$ts__$5b$app$2d$route$5d$__$28$ecmascript$29$__["prisma"].event.create()` invocation in
/home/phuongnam/web/.next/server/chunks/[root-of-the-server]__e2e46c1a._.js:148:159

  145 async function POST(request) {
  146     try {
  147         const body = await request.json();
→ 148         const created = await __TURBOPACK__imported__module__$5b$project$5d2f$lib$2f$prisma$2e$ts__$5b$app$2d$route$5d$__$28$ecmascript$29$__["prisma"].event.create(
Unique constraint failed on the fields: (`id`)
    at <unknown> (app/api/events/route.ts:50:40)
    at async POST (app/api/events/route.ts:50:21)
  48 |   try {
  49 |     const body = await request.json();
> 50 |     const created = await prisma.event.create({
     |                                        ^
  51 |       data: {
  52 |         id: String(body.id || undefined),
  53 |         title: body.title || '', {
  code: 'P2002',
  clientVersion: '5.22.0',
  meta: [Object]
}
 POST /api/events 500 in 397ms
prisma:query INSERT INTO "public"."Event" ("id","title","description","date","time","location","capacity","price","speakers","requirements","agenda","image","category","status","registrationsCount","actualParticipants","createdAt","updatedAt") VALUES ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18) RETURNING "public"."Event"."id", "public"."Event"."title", "public"."Event"."description", "public"."Event"."date", "public"."Event"."time", "public"."Event"."location", "public"."Event"."capacity", "public"."Event"."price", "public"."Event"."speakers", "public"."Event"."requirements", "public"."Event"."agenda", "public"."Event"."image", "public"."Event"."category", "public"."Event"."status", "public"."Event"."registrationsCount", "public"."Event"."actualParticipants", "public"."Event"."createdAt", "public"."Event"."updatedAt"
prisma:error 
Invalid `__TURBOPACK__imported__module__$5b$project$5d2f$lib$2f$prisma$2e$ts__$5b$app$2d$route$5d$__$28$ecmascript$29$__["prisma"].event.create()` invocation in
/home/phuongnam/web/.next/server/chunks/[root-of-the-server]__e2e46c1a._.js:148:159

  145 async function POST(request) {
  146     try {
  147         const body = await request.json();
→ 148         const created = await __TURBOPACK__imported__module__$5b$project$5d2f$lib$2f$prisma$2e$ts__$5b$app$2d$route$5d$__$28$ecmascript$29$__["prisma"].event.create(
Unique constraint failed on the fields: (`id`)
Error creating event: Error [PrismaClientKnownRequestError]: 
Invalid `__TURBOPACK__imported__module__$5b$project$5d2f$lib$2f$prisma$2e$ts__$5b$app$2d$route$5d$__$28$ecmascript$29$__["prisma"].event.create()` invocation in
/home/phuongnam/web/.next/server/chunks/[root-of-the-server]__e2e46c1a._.js:148:159

  145 async function POST(request) {
  146     try {
  147         const body = await request.json();
→ 148         const created = await __TURBOPACK__imported__module__$5b$project$5d2f$lib$2f$prisma$2e$ts__$5b$app$2d$route$5d$__$28$ecmascript$29$__["prisma"].event.create(
Unique constraint failed on the fields: (`id`)
    at <unknown> (app/api/events/route.ts:50:40)
    at async POST (app/api/events/route.ts:50:21)
  48 |   try {
  49 |     const body = await request.json();
> 50 |     const created = await prisma.event.create({
     |                                        ^
  51 |       data: {
  52 |         id: String(body.id || undefined),
  53 |         title: body.title || '', {
  code: 'P2002',
  clientVersion: '5.22.0',
  meta: [Object]
}
 POST /api/events 500 in 298ms
 GET /admin 200 in 121ms
prisma:query SELECT 1
prisma:query SELECT 1
prisma:query SELECT 1
prisma:query SELECT 1
prisma:query SELECT 1
prisma:query SELECT 1
prisma:query SELECT 1
prisma:query SELECT 1
prisma:query SELECT COUNT(*) FROM (SELECT "public"."Event"."id" FROM "public"."Event" WHERE 1=1 OFFSET $1) AS "sub"
prisma:query SELECT COUNT(*) FROM (SELECT "public"."News"."id" FROM "public"."News" WHERE "public"."News"."published" = $1 OFFSET $2) AS "sub"
prisma:query SELECT COUNT(*) FROM (SELECT "public"."Registration"."id" FROM "public"."Registration" WHERE "public"."Registration"."status" <> $1 OFFSET $2) AS "sub"
prisma:query SELECT COUNT(*) FROM (SELECT "public"."Contact"."id" FROM "public"."Contact" WHERE "public"."Contact"."status" = $1 OFFSET $2) AS "sub"
prisma:query SELECT COUNT(*) FROM (SELECT "public"."News"."id" FROM "public"."News" WHERE 1=1 OFFSET $1) AS "sub"
prisma:query SELECT COUNT(*) FROM (SELECT "public"."Event"."id" FROM "public"."Event" WHERE "public"."Event"."status" = $1 OFFSET $2) AS "sub"
prisma:query SELECT COUNT(*) FROM (SELECT "public"."Contact"."id" FROM "public"."Contact" WHERE 1=1 OFFSET $1) AS "sub"
 GET /api/stats 200 in 294ms
 GET /api/events 200 in 295ms
prisma:query SELECT COUNT(*) FROM (SELECT "public"."User"."id" FROM "public"."User" WHERE 1=1 OFFSET $1) AS "sub"
prisma:query SELECT COUNT(*) FROM (SELECT "public"."User"."id" FROM "public"."User" WHERE "public"."User"."status" = $1 OFFSET $2) AS "sub"
prisma:query SELECT "public"."Event"."id", "public"."Event"."title", "public"."Event"."description", "public"."Event"."date", "public"."Event"."time", "public"."Event"."location", "public"."Event"."capacity", "public"."Event"."price", "public"."Event"."speakers", "public"."Event"."requirements", "public"."Event"."agenda", "public"."Event"."image", "public"."Event"."category", "public"."Event"."status", "public"."Event"."registrationsCount", "public"."Event"."actualParticipants", "public"."Event"."createdAt", "public"."Event"."updatedAt" FROM "public"."Event" WHERE 1=1 ORDER BY "public"."Event"."createdAt" ASC OFFSET $1
prisma:query SELECT "public"."Registration"."id", "public"."Registration"."eventId" FROM "public"."Registration" WHERE ("public"."Registration"."status" <> $1 AND "public"."Registration"."eventId" IN ($2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13)) OFFSET $14
prisma:query SELECT "public"."Contact"."id", "public"."Contact"."name", "public"."Contact"."email", "public"."Contact"."phone", "public"."Contact"."company", "public"."Contact"."role", "public"."Contact"."message", "public"."Contact"."type", "public"."Contact"."status", "public"."Contact"."priority", "public"."Contact"."notes", "public"."Contact"."createdAt", "public"."Contact"."updatedAt" FROM "public"."Contact" WHERE 1=1 ORDER BY "public"."Contact"."createdAt" DESC OFFSET $1
 GET /api/contacts 200 in 301ms
 GET /api/news 200 in 302ms
prisma:query SELECT "public"."News"."id", "public"."News"."title", "public"."News"."content", "public"."News"."excerpt", "public"."News"."author", "public"."News"."source", "public"."News"."category", "public"."News"."importance", "public"."News"."published", "public"."News"."publishedAt", "public"."News"."image", "public"."News"."tags", "public"."News"."link", "public"."News"."createdAt", "public"."News"."updatedAt" FROM "public"."News" WHERE 1=1 ORDER BY "public"."News"."createdAt" DESC OFFSET $1
prisma:query SELECT COUNT(*) FROM (SELECT "public"."Contact"."id" FROM "public"."Contact" WHERE "public"."Contact"."status" = $1 OFFSET $2) AS "sub"
prisma:query SELECT COUNT(*) FROM (SELECT "public"."Event"."id" FROM "public"."Event" WHERE "public"."Event"."status" = $1 OFFSET $2) AS "sub"
prisma:query SELECT COUNT(*) FROM (SELECT "public"."News"."id" FROM "public"."News" WHERE 1=1 OFFSET $1) AS "sub"
prisma:query SELECT COUNT(*) FROM (SELECT "public"."Event"."id" FROM "public"."Event" WHERE 1=1 OFFSET $1) AS "sub"
prisma:query SELECT COUNT(*) FROM (SELECT "public"."News"."id" FROM "public"."News" WHERE "public"."News"."published" = $1 OFFSET $2) AS "sub"
prisma:query SELECT COUNT(*) FROM (SELECT "public"."User"."id" FROM "public"."User" WHERE 1=1 OFFSET $1) AS "sub"
prisma:query SELECT COUNT(*) FROM (SELECT "public"."Contact"."id" FROM "public"."Contact" WHERE 1=1 OFFSET $1) AS "sub"
prisma:query SELECT COUNT(*) FROM (SELECT "public"."User"."id" FROM "public"."User" WHERE "public"."User"."status" = $1 OFFSET $2) AS "sub"
prisma:query SELECT COUNT(*) FROM (SELECT "public"."Registration"."id" FROM "public"."Registration" WHERE "public"."Registration"."status" <> $1 OFFSET $2) AS "sub"
 GET /api/stats 200 in 282ms
 GET /api/events 200 in 282ms
prisma:query SELECT "public"."Event"."id", "public"."Event"."title", "public"."Event"."description", "public"."Event"."date", "public"."Event"."time", "public"."Event"."location", "public"."Event"."capacity", "public"."Event"."price", "public"."Event"."speakers", "public"."Event"."requirements", "public"."Event"."agenda", "public"."Event"."image", "public"."Event"."category", "public"."Event"."status", "public"."Event"."registrationsCount", "public"."Event"."actualParticipants", "public"."Event"."createdAt", "public"."Event"."updatedAt" FROM "public"."Event" WHERE 1=1 ORDER BY "public"."Event"."createdAt" ASC OFFSET $1
prisma:query SELECT "public"."Registration"."id", "public"."Registration"."eventId" FROM "public"."Registration" WHERE ("public"."Registration"."status" <> $1 AND "public"."Registration"."eventId" IN ($2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13)) OFFSET $14
prisma:query SELECT "public"."News"."id", "public"."News"."title", "public"."News"."content", "public"."News"."excerpt", "public"."News"."author", "public"."News"."source", "public"."News"."category", "public"."News"."importance", "public"."News"."published", "public"."News"."publishedAt", "public"."News"."image", "public"."News"."tags", "public"."News"."link", "public"."News"."createdAt", "public"."News"."updatedAt" FROM "public"."News" WHERE 1=1 ORDER BY "public"."News"."createdAt" DESC OFFSET $1
 GET /api/news 200 in 290ms
 GET /api/contacts 200 in 293ms
prisma:query SELECT "public"."Contact"."id", "public"."Contact"."name", "public"."Contact"."email", "public"."Contact"."phone", "public"."Contact"."company", "public"."Contact"."role", "public"."Contact"."message", "public"."Contact"."type", "public"."Contact"."status", "public"."Contact"."priority", "public"."Contact"."notes", "public"."Contact"."createdAt", "public"."Contact"."updatedAt" FROM "public"."Contact" WHERE 1=1 ORDER BY "public"."Contact"."createdAt" DESC OFFSET $1
 GET /favicon.ico?favicon.0b3bf435.ico 200 in 254ms
prisma:query SELECT "public"."Event"."id", "public"."Event"."title", "public"."Event"."description", "public"."Event"."date", "public"."Event"."time", "public"."Event"."location", "public"."Event"."capacity", "public"."Event"."price", "public"."Event"."speakers", "public"."Event"."requirements", "public"."Event"."agenda", "public"."Event"."image", "public"."Event"."category", "public"."Event"."status", "public"."Event"."registrationsCount", "public"."Event"."actualParticipants", "public"."Event"."createdAt", "public"."Event"."updatedAt" FROM "public"."Event" WHERE 1=1 ORDER BY "public"."Event"."createdAt" ASC OFFSET $1
prisma:query SELECT "public"."Registration"."id", "public"."Registration"."eventId" FROM "public"."Registration" WHERE ("public"."Registration"."status" <> $1 AND "public"."Registration"."eventId" IN ($2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13)) OFFSET $14
 GET /api/events 200 in 259ms
prisma:query SELECT "public"."Event"."id", "public"."Event"."title", "public"."Event"."description", "public"."Event"."date", "public"."Event"."time", "public"."Event"."location", "public"."Event"."capacity", "public"."Event"."price", "public"."Event"."speakers", "public"."Event"."requirements", "public"."Event"."agenda", "public"."Event"."image", "public"."Event"."category", "public"."Event"."status", "public"."Event"."registrationsCount", "public"."Event"."actualParticipants", "public"."Event"."createdAt", "public"."Event"."updatedAt" FROM "public"."Event" WHERE 1=1 ORDER BY "public"."Event"."createdAt" ASC OFFSET $1
prisma:query SELECT "public"."Registration"."id", "public"."Registration"."eventId" FROM "public"."Registration" WHERE ("public"."Registration"."status" <> $1 AND "public"."Registration"."eventId" IN ($2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13)) OFFSET $14
 GET /api/events 200 in 254ms
 ✓ Compiled /api/events/[id] in 109ms
prisma:query DELETE FROM "public"."Event" WHERE ("public"."Event"."id" = $1 AND 1=1) RETURNING "public"."Event"."id", "public"."Event"."title", "public"."Event"."description", "public"."Event"."date", "public"."Event"."time", "public"."Event"."location", "public"."Event"."capacity", "public"."Event"."price", "public"."Event"."speakers", "public"."Event"."requirements", "public"."Event"."agenda", "public"."Event"."image", "public"."Event"."category", "public"."Event"."status", "public"."Event"."registrationsCount", "public"."Event"."actualParticipants", "public"."Event"."createdAt", "public"."Event"."updatedAt"
 DELETE /api/events/undefined 200 in 860ms
 GET /admin 200 in 87ms
prisma:query SELECT COUNT(*) FROM (SELECT "public"."User"."id" FROM "public"."User" WHERE 1=1 OFFSET $1) AS "sub"
prisma:query SELECT COUNT(*) FROM (SELECT "public"."News"."id" FROM "public"."News" WHERE "public"."News"."published" = $1 OFFSET $2) AS "sub"
prisma:query SELECT 1
prisma:query SELECT COUNT(*) FROM (SELECT "public"."News"."id" FROM "public"."News" WHERE 1=1 OFFSET $1) AS "sub"
prisma:query SELECT COUNT(*) FROM (SELECT "public"."User"."id" FROM "public"."User" WHERE "public"."User"."status" = $1 OFFSET $2) AS "sub"
prisma:query SELECT COUNT(*) FROM (SELECT "public"."Registration"."id" FROM "public"."Registration" WHERE "public"."Registration"."status" <> $1 OFFSET $2) AS "sub"
prisma:query SELECT COUNT(*) FROM (SELECT "public"."Contact"."id" FROM "public"."Contact" WHERE "public"."Contact"."status" = $1 OFFSET $2) AS "sub"
prisma:query SELECT COUNT(*) FROM (SELECT "public"."Event"."id" FROM "public"."Event" WHERE 1=1 OFFSET $1) AS "sub"
prisma:query SELECT COUNT(*) FROM (SELECT "public"."Contact"."id" FROM "public"."Contact" WHERE 1=1 OFFSET $1) AS "sub"
prisma:query SELECT COUNT(*) FROM (SELECT "public"."Event"."id" FROM "public"."Event" WHERE "public"."Event"."status" = $1 OFFSET $2) AS "sub"
prisma:query SELECT "public"."Event"."id", "public"."Event"."title", "public"."Event"."description", "public"."Event"."date", "public"."Event"."time", "public"."Event"."location", "public"."Event"."capacity", "public"."Event"."price", "public"."Event"."speakers", "public"."Event"."requirements", "public"."Event"."agenda", "public"."Event"."image", "public"."Event"."category", "public"."Event"."status", "public"."Event"."registrationsCount", "public"."Event"."actualParticipants", "public"."Event"."createdAt", "public"."Event"."updatedAt" FROM "public"."Event" WHERE 1=1 ORDER BY "public"."Event"."createdAt" ASC OFFSET $1
prisma:query SELECT "public"."Registration"."id", "public"."Registration"."eventId" FROM "public"."Registration" WHERE ("public"."Registration"."status" <> $1 AND "public"."Registration"."eventId" IN ($2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12)) OFFSET $13
 GET /api/stats 200 in 310ms
 GET /api/events 200 in 313ms
 GET /api/news 200 in 315ms
prisma:query SELECT "public"."News"."id", "public"."News"."title", "public"."News"."content", "public"."News"."excerpt", "public"."News"."author", "public"."News"."source", "public"."News"."category", "public"."News"."importance", "public"."News"."published", "public"."News"."publishedAt", "public"."News"."image", "public"."News"."tags", "public"."News"."link", "public"."News"."createdAt", "public"."News"."updatedAt" FROM "public"."News" WHERE 1=1 ORDER BY "public"."News"."createdAt" DESC OFFSET $1
 GET /api/contacts 200 in 324ms
prisma:query SELECT "public"."Contact"."id", "public"."Contact"."name", "public"."Contact"."email", "public"."Contact"."phone", "public"."Contact"."company", "public"."Contact"."role", "public"."Contact"."message", "public"."Contact"."type", "public"."Contact"."status", "public"."Contact"."priority", "public"."Contact"."notes", "public"."Contact"."createdAt", "public"."Contact"."updatedAt" FROM "public"."Contact" WHERE 1=1 ORDER BY "public"."Contact"."createdAt" DESC OFFSET $1
prisma:query SELECT COUNT(*) FROM (SELECT "public"."News"."id" FROM "public"."News" WHERE "public"."News"."published" = $1 OFFSET $2) AS "sub"
prisma:query SELECT COUNT(*) FROM (SELECT "public"."User"."id" FROM "public"."User" WHERE 1=1 OFFSET $1) AS "sub"
prisma:query SELECT COUNT(*) FROM (SELECT "public"."Event"."id" FROM "public"."Event" WHERE 1=1 OFFSET $1) AS "sub"
prisma:query SELECT COUNT(*) FROM (SELECT "public"."News"."id" FROM "public"."News" WHERE 1=1 OFFSET $1) AS "sub"
prisma:query SELECT COUNT(*) FROM (SELECT "public"."User"."id" FROM "public"."User" WHERE "public"."User"."status" = $1 OFFSET $2) AS "sub"
prisma:query SELECT COUNT(*) FROM (SELECT "public"."Event"."id" FROM "public"."Event" WHERE "public"."Event"."status" = $1 OFFSET $2) AS "sub"
prisma:query SELECT COUNT(*) FROM (SELECT "public"."Contact"."id" FROM "public"."Contact" WHERE 1=1 OFFSET $1) AS "sub"
prisma:query SELECT COUNT(*) FROM (SELECT "public"."Contact"."id" FROM "public"."Contact" WHERE "public"."Contact"."status" = $1 OFFSET $2) AS "sub"
prisma:query SELECT COUNT(*) FROM (SELECT "public"."Registration"."id" FROM "public"."Registration" WHERE "public"."Registration"."status" <> $1 OFFSET $2) AS "sub"
prisma:query SELECT "public"."Event"."id", "public"."Event"."title", "public"."Event"."description", "public"."Event"."date", "public"."Event"."time", "public"."Event"."location", "public"."Event"."capacity", "public"."Event"."price", "public"."Event"."speakers", "public"."Event"."requirements", "public"."Event"."agenda", "public"."Event"."image", "public"."Event"."category", "public"."Event"."status", "public"."Event"."registrationsCount", "public"."Event"."actualParticipants", "public"."Event"."createdAt", "public"."Event"."updatedAt" FROM "public"."Event" WHERE 1=1 ORDER BY "public"."Event"."createdAt" ASC OFFSET $1
prisma:query SELECT "public"."Registration"."id", "public"."Registration"."eventId" FROM "public"."Registration" WHERE ("public"."Registration"."status" <> $1 AND "public"."Registration"."eventId" IN ($2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12)) OFFSET $13
prisma:query SELECT "public"."News"."id", "public"."News"."title", "public"."News"."content", "public"."News"."excerpt", "public"."News"."author", "public"."News"."source", "public"."News"."category", "public"."News"."importance", "public"."News"."published", "public"."News"."publishedAt", "public"."News"."image", "public"."News"."tags", "public"."News"."link", "public"."News"."createdAt", "public"."News"."updatedAt" FROM "public"."News" WHERE 1=1 ORDER BY "public"."News"."createdAt" DESC OFFSET $1
 GET /api/stats 200 in 300ms
 GET /api/events 200 in 302ms
 GET /api/news 200 in 304ms
 GET /api/contacts 200 in 306ms
prisma:query SELECT "public"."Contact"."id", "public"."Contact"."name", "public"."Contact"."email", "public"."Contact"."phone", "public"."Contact"."company", "public"."Contact"."role", "public"."Contact"."message", "public"."Contact"."type", "public"."Contact"."status", "public"."Contact"."priority", "public"."Contact"."notes", "public"."Contact"."createdAt", "public"."Contact"."updatedAt" FROM "public"."Contact" WHERE 1=1 ORDER BY "public"."Contact"."createdAt" DESC OFFSET $1
 GET /favicon.ico?favicon.0b3bf435.ico 200 in 248ms
prisma:query SELECT 1
prisma:query SELECT "public"."Event"."id", "public"."Event"."title", "public"."Event"."description", "public"."Event"."date", "public"."Event"."time", "public"."Event"."location", "public"."Event"."capacity", "public"."Event"."price", "public"."Event"."speakers", "public"."Event"."requirements", "public"."Event"."agenda", "public"."Event"."image", "public"."Event"."category", "public"."Event"."status", "public"."Event"."registrationsCount", "public"."Event"."actualParticipants", "public"."Event"."createdAt", "public"."Event"."updatedAt" FROM "public"."Event" WHERE 1=1 ORDER BY "public"."Event"."createdAt" ASC OFFSET $1
prisma:query SELECT "public"."Registration"."id", "public"."Registration"."eventId" FROM "public"."Registration" WHERE ("public"."Registration"."status" <> $1 AND "public"."Registration"."eventId" IN ($2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12)) OFFSET $13
 GET /api/events 200 in 258ms
prisma:query SELECT "public"."Event"."id", "public"."Event"."title", "public"."Event"."description", "public"."Event"."date", "public"."Event"."time", "public"."Event"."location", "public"."Event"."capacity", "public"."Event"."price", "public"."Event"."speakers", "public"."Event"."requirements", "public"."Event"."agenda", "public"."Event"."image", "public"."Event"."category", "public"."Event"."status", "public"."Event"."registrationsCount", "public"."Event"."actualParticipants", "public"."Event"."createdAt", "public"."Event"."updatedAt" FROM "public"."Event" WHERE 1=1 ORDER BY "public"."Event"."createdAt" ASC OFFSET $1
prisma:query SELECT "public"."Registration"."id", "public"."Registration"."eventId" FROM "public"."Registration" WHERE ("public"."Registration"."status" <> $1 AND "public"."Registration"."eventId" IN ($2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12)) OFFSET $13
 GET /api/events 200 in 245ms
 POST /api/upload 200 in 270ms
prisma:query SELECT 1
prisma:query INSERT INTO "public"."Event" ("id","title","description","date","time","location","capacity","price","speakers","requirements","agenda","image","category","status","registrationsCount","actualParticipants","createdAt","updatedAt") VALUES ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18) RETURNING "public"."Event"."id", "public"."Event"."title", "public"."Event"."description", "public"."Event"."date", "public"."Event"."time", "public"."Event"."location", "public"."Event"."capacity", "public"."Event"."price", "public"."Event"."speakers", "public"."Event"."requirements", "public"."Event"."agenda", "public"."Event"."image", "public"."Event"."category", "public"."Event"."status", "public"."Event"."registrationsCount", "public"."Event"."actualParticipants", "public"."Event"."createdAt", "public"."Event"."updatedAt"
 POST /api/events 201 in 254ms
 GET / 200 in 99ms
prisma:query SELECT "public"."Event"."id", "public"."Event"."title", "public"."Event"."description", "public"."Event"."date", "public"."Event"."time", "public"."Event"."location", "public"."Event"."capacity", "public"."Event"."price", "public"."Event"."speakers", "public"."Event"."requirements", "public"."Event"."agenda", "public"."Event"."image", "public"."Event"."category", "public"."Event"."status", "public"."Event"."registrationsCount", "public"."Event"."actualParticipants", "public"."Event"."createdAt", "public"."Event"."updatedAt" FROM "public"."Event" WHERE 1=1 ORDER BY "public"."Event"."createdAt" ASC OFFSET $1
prisma:query SELECT "public"."Registration"."id", "public"."Registration"."eventId" FROM "public"."Registration" WHERE ("public"."Registration"."status" <> $1 AND "public"."Registration"."eventId" IN ($2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13)) OFFSET $14
prisma:query SELECT 1
prisma:query SELECT "public"."Registration"."id", "public"."Registration"."eventId", "public"."Registration"."fullName", "public"."Registration"."email", "public"."Registration"."phone", "public"."Registration"."organization", "public"."Registration"."experience", "public"."Registration"."expectation", "public"."Registration"."status", "public"."Registration"."createdAt", "public"."Registration"."updatedAt" FROM "public"."Registration" WHERE 1=1 ORDER BY "public"."Registration"."createdAt" DESC OFFSET $1
prisma:query SELECT "public"."Contact"."id", "public"."Contact"."name", "public"."Contact"."email", "public"."Contact"."phone", "public"."Contact"."company", "public"."Contact"."role", "public"."Contact"."message", "public"."Contact"."type", "public"."Contact"."status", "public"."Contact"."priority", "public"."Contact"."notes", "public"."Contact"."createdAt", "public"."Contact"."updatedAt" FROM "public"."Contact" WHERE 1=1 ORDER BY "public"."Contact"."createdAt" DESC OFFSET $1
 GET /api/events 200 in 324ms
 GET /api/registrations 200 in 325ms
 GET /api/contacts 200 in 322ms
 GET /api/news 200 in 322ms
prisma:query SELECT "public"."News"."id", "public"."News"."title", "public"."News"."content", "public"."News"."excerpt", "public"."News"."author", "public"."News"."source", "public"."News"."category", "public"."News"."importance", "public"."News"."published", "public"."News"."publishedAt", "public"."News"."image", "public"."News"."tags", "public"."News"."link", "public"."News"."createdAt", "public"."News"."updatedAt" FROM "public"."News" WHERE 1=1 ORDER BY "public"."News"."createdAt" DESC OFFSET $1
 GET /favicon.ico?favicon.0b3bf435.ico 200 in 251ms
prisma:query INSERT INTO "public"."Registration" ("id","eventId","fullName","email","phone","organization","experience","expectation","status","createdAt","updatedAt") VALUES ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11) RETURNING "public"."Registration"."id", "public"."Registration"."eventId", "public"."Registration"."fullName", "public"."Registration"."email", "public"."Registration"."phone", "public"."Registration"."organization", "public"."Registration"."experience", "public"."Registration"."expectation", "public"."Registration"."status", "public"."Registration"."createdAt", "public"."Registration"."updatedAt"
prisma:error 
Invalid `__TURBOPACK__imported__module__$5b$project$5d2f$lib$2f$prisma$2e$ts__$5b$app$2d$route$5d$__$28$ecmascript$29$__["prisma"].registration.create()` invocation in
/home/phuongnam/web/.next/server/chunks/[root-of-the-server]__aa09fb8c._.js:116:166

  113 async function POST(request) {
  114     try {
  115         const body = await request.json();
→ 116         const created = await __TURBOPACK__imported__module__$5b$project$5d2f$lib$2f$prisma$2e$ts__$5b$app$2d$route$5d$__$28$ecmascript$29$__["prisma"].registration.create(
Unique constraint failed on the fields: (`id`)
Error creating registration: Error [PrismaClientKnownRequestError]: 
Invalid `__TURBOPACK__imported__module__$5b$project$5d2f$lib$2f$prisma$2e$ts__$5b$app$2d$route$5d$__$28$ecmascript$29$__["prisma"].registration.create()` invocation in
/home/phuongnam/web/.next/server/chunks/[root-of-the-server]__aa09fb8c._.js:116:166

  113 async function POST(request) {
  114     try {
  115         const body = await request.json();
→ 116         const created = await __TURBOPACK__imported__module__$5b$project$5d2f$lib$2f$prisma$2e$ts__$5b$app$2d$route$5d$__$28$ecmascript$29$__["prisma"].registration.create(
Unique constraint failed on the fields: (`id`)
    at <unknown> (app/api/registrations/route.ts:20:47)
    at async POST (app/api/registrations/route.ts:20:21)
  18 |   try {
  19 |     const body = await request.json();
> 20 |     const created = await prisma.registration.create({
     |                                               ^
  21 |       data: {
  22 |         id: String(body.id || undefined),
  23 |         eventId: String(body.eventId), {
  code: 'P2002',
  clientVersion: '5.22.0',
  meta: [Object]
}
 POST /api/registrations 500 in 372ms
prisma:query SELECT 1
prisma:query INSERT INTO "public"."Registration" ("id","eventId","fullName","email","phone","organization","experience","expectation","status","createdAt","updatedAt") VALUES ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11) RETURNING "public"."Registration"."id", "public"."Registration"."eventId", "public"."Registration"."fullName", "public"."Registration"."email", "public"."Registration"."phone", "public"."Registration"."organization", "public"."Registration"."experience", "public"."Registration"."expectation", "public"."Registration"."status", "public"."Registration"."createdAt", "public"."Registration"."updatedAt"
prisma:error 
Invalid `__TURBOPACK__imported__module__$5b$project$5d2f$lib$2f$prisma$2e$ts__$5b$app$2d$route$5d$__$28$ecmascript$29$__["prisma"].registration.create()` invocation in
/home/phuongnam/web/.next/server/chunks/[root-of-the-server]__aa09fb8c._.js:116:166

  113 async function POST(request) {
  114     try {
  115         const body = await request.json();
→ 116         const created = await __TURBOPACK__imported__module__$5b$project$5d2f$lib$2f$prisma$2e$ts__$5b$app$2d$route$5d$__$28$ecmascript$29$__["prisma"].registration.create(
Unique constraint failed on the fields: (`id`)
Error creating registration: Error [PrismaClientKnownRequestError]: 
Invalid `__TURBOPACK__imported__module__$5b$project$5d2f$lib$2f$prisma$2e$ts__$5b$app$2d$route$5d$__$28$ecmascript$29$__["prisma"].registration.create()` invocation in
/home/phuongnam/web/.next/server/chunks/[root-of-the-server]__aa09fb8c._.js:116:166

  113 async function POST(request) {
  114     try {
  115         const body = await request.json();
→ 116         const created = await __TURBOPACK__imported__module__$5b$project$5d2f$lib$2f$prisma$2e$ts__$5b$app$2d$route$5d$__$28$ecmascript$29$__["prisma"].registration.create(
Unique constraint failed on the fields: (`id`)
    at <unknown> (app/api/registrations/route.ts:20:47)
    at async POST (app/api/registrations/route.ts:20:21)
  18 |   try {
  19 |     const body = await request.json();
> 20 |     const created = await prisma.registration.create({
     |                                               ^
  21 |       data: {
  22 |         id: String(body.id || undefined),
  23 |         eventId: String(body.eventId), {
  code: 'P2002',
  clientVersion: '5.22.0',
  meta: [Object]
}
 POST /api/registrations 500 in 320ms
 ✓ Compiled in 121ms
 POST /api/upload 200 in 291ms
prisma:query SELECT 1
prisma:query INSERT INTO "public"."Event" ("id","title","description","date","time","location","capacity","price","speakers","requirements","agenda","image","category","status","registrationsCount","actualParticipants","createdAt","updatedAt") VALUES ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18) RETURNING "public"."Event"."id", "public"."Event"."title", "public"."Event"."description", "public"."Event"."date", "public"."Event"."time", "public"."Event"."location", "public"."Event"."capacity", "public"."Event"."price", "public"."Event"."speakers", "public"."Event"."requirements", "public"."Event"."agenda", "public"."Event"."image", "public"."Event"."category", "public"."Event"."status", "public"."Event"."registrationsCount", "public"."Event"."actualParticipants", "public"."Event"."createdAt", "public"."Event"."updatedAt"
 POST /api/events 201 in 310ms
 GET / 200 in 303ms
prisma:query SELECT "public"."Event"."id", "public"."Event"."title", "public"."Event"."description", "public"."Event"."date", "public"."Event"."time", "public"."Event"."location", "public"."Event"."capacity", "public"."Event"."price", "public"."Event"."speakers", "public"."Event"."requirements", "public"."Event"."agenda", "public"."Event"."image", "public"."Event"."category", "public"."Event"."status", "public"."Event"."registrationsCount", "public"."Event"."actualParticipants", "public"."Event"."createdAt", "public"."Event"."updatedAt" FROM "public"."Event" WHERE 1=1 ORDER BY "public"."Event"."createdAt" ASC OFFSET $1
prisma:query SELECT "public"."Registration"."id", "public"."Registration"."eventId" FROM "public"."Registration" WHERE ("public"."Registration"."status" <> $1 AND "public"."Registration"."eventId" IN ($2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14)) OFFSET $15
prisma:query SELECT 1
prisma:query SELECT "public"."Registration"."id", "public"."Registration"."eventId", "public"."Registration"."fullName", "public"."Registration"."email", "public"."Registration"."phone", "public"."Registration"."organization", "public"."Registration"."experience", "public"."Registration"."expectation", "public"."Registration"."status", "public"."Registration"."createdAt", "public"."Registration"."updatedAt" FROM "public"."Registration" WHERE 1=1 ORDER BY "public"."Registration"."createdAt" DESC OFFSET $1
prisma:query SELECT "public"."Contact"."id", "public"."Contact"."name", "public"."Contact"."email", "public"."Contact"."phone", "public"."Contact"."company", "public"."Contact"."role", "public"."Contact"."message", "public"."Contact"."type", "public"."Contact"."status", "public"."Contact"."priority", "public"."Contact"."notes", "public"."Contact"."createdAt", "public"."Contact"."updatedAt" FROM "public"."Contact" WHERE 1=1 ORDER BY "public"."Contact"."createdAt" DESC OFFSET $1
 GET /api/events 200 in 337ms
 GET /api/registrations 200 in 339ms
 GET /api/contacts 200 in 341ms
 GET /api/news 200 in 343ms
prisma:query SELECT "public"."News"."id", "public"."News"."title", "public"."News"."content", "public"."News"."excerpt", "public"."News"."author", "public"."News"."source", "public"."News"."category", "public"."News"."importance", "public"."News"."published", "public"."News"."publishedAt", "public"."News"."image", "public"."News"."tags", "public"."News"."link", "public"."News"."createdAt", "public"."News"."updatedAt" FROM "public"."News" WHERE 1=1 ORDER BY "public"."News"."createdAt" DESC OFFSET $1
 GET /favicon.ico?favicon.0b3bf435.ico 200 in 261ms
 ✓ Compiled in 162ms
prisma:query INSERT INTO "public"."Registration" ("id","eventId","fullName","email","phone","organization","experience","expectation","status","createdAt","updatedAt") VALUES ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11) RETURNING "public"."Registration"."id", "public"."Registration"."eventId", "public"."Registration"."fullName", "public"."Registration"."email", "public"."Registration"."phone", "public"."Registration"."organization", "public"."Registration"."experience", "public"."Registration"."expectation", "public"."Registration"."status", "public"."Registration"."createdAt", "public"."Registration"."updatedAt"
prisma:error 
Invalid `__TURBOPACK__imported__module__$5b$project$5d2f$lib$2f$prisma$2e$ts__$5b$app$2d$route$5d$__$28$ecmascript$29$__["prisma"].registration.create()` invocation in
/home/phuongnam/web/.next/server/chunks/[root-of-the-server]__aa09fb8c._.js:116:166

  113 async function POST(request) {
  114     try {
  115         const body = await request.json();
→ 116         const created = await __TURBOPACK__imported__module__$5b$project$5d2f$lib$2f$prisma$2e$ts__$5b$app$2d$route$5d$__$28$ecmascript$29$__["prisma"].registration.create(
Unique constraint failed on the fields: (`id`)
Error creating registration: Error [PrismaClientKnownRequestError]: 
Invalid `__TURBOPACK__imported__module__$5b$project$5d2f$lib$2f$prisma$2e$ts__$5b$app$2d$route$5d$__$28$ecmascript$29$__["prisma"].registration.create()` invocation in
/home/phuongnam/web/.next/server/chunks/[root-of-the-server]__aa09fb8c._.js:116:166

  113 async function POST(request) {
  114     try {
  115         const body = await request.json();
→ 116         const created = await __TURBOPACK__imported__module__$5b$project$5d2f$lib$2f$prisma$2e$ts__$5b$app$2d$route$5d$__$28$ecmascript$29$__["prisma"].registration.create(
Unique constraint failed on the fields: (`id`)
    at <unknown> (app/api/registrations/route.ts:20:47)
    at async POST (app/api/registrations/route.ts:20:21)
  18 |   try {
  19 |     const body = await request.json();
> 20 |     const created = await prisma.registration.create({
     |                                               ^
  21 |       data: {
  22 |         id: String(body.id || undefined),
  23 |         eventId: String(body.eventId), {
  code: 'P2002',
  clientVersion: '5.22.0',
  meta: [Object]
}
 POST /api/registrations 500 in 335ms
prisma:query INSERT INTO "public"."Registration" ("id","eventId","fullName","email","phone","organization","experience","expectation","status","createdAt","updatedAt") VALUES ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11) RETURNING "public"."Registration"."id", "public"."Registration"."eventId", "public"."Registration"."fullName", "public"."Registration"."email", "public"."Registration"."phone", "public"."Registration"."organization", "public"."Registration"."experience", "public"."Registration"."expectation", "public"."Registration"."status", "public"."Registration"."createdAt", "public"."Registration"."updatedAt"
prisma:error 
Invalid `__TURBOPACK__imported__module__$5b$project$5d2f$lib$2f$prisma$2e$ts__$5b$app$2d$route$5d$__$28$ecmascript$29$__["prisma"].registration.create()` invocation in
/home/phuongnam/web/.next/server/chunks/[root-of-the-server]__aa09fb8c._.js:116:166

  113 async function POST(request) {
  114     try {
  115         const body = await request.json();
→ 116         const created = await __TURBOPACK__imported__module__$5b$project$5d2f$lib$2f$prisma$2e$ts__$5b$app$2d$route$5d$__$28$ecmascript$29$__["prisma"].registration.create(
Unique constraint failed on the fields: (`id`)
Error creating registration: Error [PrismaClientKnownRequestError]: 
Invalid `__TURBOPACK__imported__module__$5b$project$5d2f$lib$2f$prisma$2e$ts__$5b$app$2d$route$5d$__$28$ecmascript$29$__["prisma"].registration.create()` invocation in
/home/phuongnam/web/.next/server/chunks/[root-of-the-server]__aa09fb8c._.js:116:166

  113 async function POST(request) {
  114     try {
  115         const body = await request.json();
→ 116         const created = await __TURBOPACK__imported__module__$5b$project$5d2f$lib$2f$prisma$2e$ts__$5b$app$2d$route$5d$__$28$ecmascript$29$__["prisma"].registration.create(
Unique constraint failed on the fields: (`id`)
    at <unknown> (app/api/registrations/route.ts:20:47)
    at async POST (app/api/registrations/route.ts:20:21)
  18 |   try {
  19 |     const body = await request.json();
> 20 |     const created = await prisma.registration.create({
     |                                               ^
  21 |       data: {
  22 |         id: String(body.id || undefined),
  23 |         eventId: String(body.eventId), {
  code: 'P2002',
  clientVersion: '5.22.0',
  meta: [Object]
}
 POST /api/registrations 500 in 340ms
 GET /admin 200 in 103ms
prisma:query SELECT COUNT(*) FROM (SELECT "public"."Contact"."id" FROM "public"."Contact" WHERE 1=1 OFFSET $1) AS "sub"
 GET /favicon.ico?favicon.0b3bf435.ico 200 in 286ms
prisma:query SELECT COUNT(*) FROM (SELECT "public"."Registration"."id" FROM "public"."Registration" WHERE "public"."Registration"."status" <> $1 OFFSET $2) AS "sub"
prisma:query SELECT COUNT(*) FROM (SELECT "public"."News"."id" FROM "public"."News" WHERE "public"."News"."published" = $1 OFFSET $2) AS "sub"
prisma:query SELECT COUNT(*) FROM (SELECT "public"."Event"."id" FROM "public"."Event" WHERE 1=1 OFFSET $1) AS "sub"
prisma:query SELECT "public"."Event"."id", "public"."Event"."title", "public"."Event"."description", "public"."Event"."date", "public"."Event"."time", "public"."Event"."location", "public"."Event"."capacity", "public"."Event"."price", "public"."Event"."speakers", "public"."Event"."requirements", "public"."Event"."agenda", "public"."Event"."image", "public"."Event"."category", "public"."Event"."status", "public"."Event"."registrationsCount", "public"."Event"."actualParticipants", "public"."Event"."createdAt", "public"."Event"."updatedAt" FROM "public"."Event" WHERE 1=1 ORDER BY "public"."Event"."createdAt" ASC OFFSET $1
prisma:query SELECT COUNT(*) FROM (SELECT "public"."Contact"."id" FROM "public"."Contact" WHERE "public"."Contact"."status" = $1 OFFSET $2) AS "sub"
prisma:query SELECT COUNT(*) FROM (SELECT "public"."User"."id" FROM "public"."User" WHERE 1=1 OFFSET $1) AS "sub"
prisma:query SELECT "public"."News"."id", "public"."News"."title", "public"."News"."content", "public"."News"."excerpt", "public"."News"."author", "public"."News"."source", "public"."News"."category", "public"."News"."importance", "public"."News"."published", "public"."News"."publishedAt", "public"."News"."image", "public"."News"."tags", "public"."News"."link", "public"."News"."createdAt", "public"."News"."updatedAt" FROM "public"."News" WHERE 1=1 ORDER BY "public"."News"."createdAt" DESC OFFSET $1
 GET /api/news 200 in 395ms
 GET /api/events 200 in 401ms
 GET /api/contacts 200 in 398ms
prisma:query SELECT "public"."Contact"."id", "public"."Contact"."name", "public"."Contact"."email", "public"."Contact"."phone", "public"."Contact"."company", "public"."Contact"."role", "public"."Contact"."message", "public"."Contact"."type", "public"."Contact"."status", "public"."Contact"."priority", "public"."Contact"."notes", "public"."Contact"."createdAt", "public"."Contact"."updatedAt" FROM "public"."Contact" WHERE 1=1 ORDER BY "public"."Contact"."createdAt" DESC OFFSET $1
prisma:query SELECT "public"."Registration"."id", "public"."Registration"."eventId" FROM "public"."Registration" WHERE ("public"."Registration"."status" <> $1 AND "public"."Registration"."eventId" IN ($2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14)) OFFSET $15
prisma:query SELECT COUNT(*) FROM (SELECT "public"."News"."id" FROM "public"."News" WHERE 1=1 OFFSET $1) AS "sub"
prisma:query SELECT COUNT(*) FROM (SELECT "public"."Event"."id" FROM "public"."Event" WHERE "public"."Event"."status" = $1 OFFSET $2) AS "sub"
prisma:query SELECT COUNT(*) FROM (SELECT "public"."User"."id" FROM "public"."User" WHERE "public"."User"."status" = $1 OFFSET $2) AS "sub"
 GET /api/stats 200 in 406ms
prisma:query SELECT "public"."News"."id", "public"."News"."title", "public"."News"."content", "public"."News"."excerpt", "public"."News"."author", "public"."News"."source", "public"."News"."category", "public"."News"."importance", "public"."News"."published", "public"."News"."publishedAt", "public"."News"."image", "public"."News"."tags", "public"."News"."link", "public"."News"."createdAt", "public"."News"."updatedAt" FROM "public"."News" WHERE 1=1 ORDER BY "public"."News"."createdAt" DESC OFFSET $1
prisma:query SELECT "public"."Event"."id", "public"."Event"."title", "public"."Event"."description", "public"."Event"."date", "public"."Event"."time", "public"."Event"."location", "public"."Event"."capacity", "public"."Event"."price", "public"."Event"."speakers", "public"."Event"."requirements", "public"."Event"."agenda", "public"."Event"."image", "public"."Event"."category", "public"."Event"."status", "public"."Event"."registrationsCount", "public"."Event"."actualParticipants", "public"."Event"."createdAt", "public"."Event"."updatedAt" FROM "public"."Event" WHERE 1=1 ORDER BY "public"."Event"."createdAt" ASC OFFSET $1
prisma:query SELECT "public"."Registration"."id", "public"."Registration"."eventId" FROM "public"."Registration" WHERE ("public"."Registration"."status" <> $1 AND "public"."Registration"."eventId" IN ($2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14)) OFFSET $15
prisma:query SELECT "public"."Contact"."id", "public"."Contact"."name", "public"."Contact"."email", "public"."Contact"."phone", "public"."Contact"."company", "public"."Contact"."role", "public"."Contact"."message", "public"."Contact"."type", "public"."Contact"."status", "public"."Contact"."priority", "public"."Contact"."notes", "public"."Contact"."createdAt", "public"."Contact"."updatedAt" FROM "public"."Contact" WHERE 1=1 ORDER BY "public"."Contact"."createdAt" DESC OFFSET $1
 GET /api/news 200 in 308ms
 GET /api/events 200 in 309ms
 GET /api/contacts 200 in 310ms
 GET /api/stats 200 in 312ms
prisma:query SELECT COUNT(*) FROM (SELECT "public"."Event"."id" FROM "public"."Event" WHERE "public"."Event"."status" = $1 OFFSET $2) AS "sub"
prisma:query SELECT COUNT(*) FROM (SELECT "public"."Event"."id" FROM "public"."Event" WHERE 1=1 OFFSET $1) AS "sub"
prisma:query SELECT COUNT(*) FROM (SELECT "public"."News"."id" FROM "public"."News" WHERE 1=1 OFFSET $1) AS "sub"
prisma:query SELECT COUNT(*) FROM (SELECT "public"."Registration"."id" FROM "public"."Registration" WHERE "public"."Registration"."status" <> $1 OFFSET $2) AS "sub"
prisma:query SELECT COUNT(*) FROM (SELECT "public"."Contact"."id" FROM "public"."Contact" WHERE 1=1 OFFSET $1) AS "sub"
prisma:query SELECT COUNT(*) FROM (SELECT "public"."User"."id" FROM "public"."User" WHERE 1=1 OFFSET $1) AS "sub"
prisma:query SELECT COUNT(*) FROM (SELECT "public"."Contact"."id" FROM "public"."Contact" WHERE "public"."Contact"."status" = $1 OFFSET $2) AS "sub"
prisma:query SELECT COUNT(*) FROM (SELECT "public"."News"."id" FROM "public"."News" WHERE "public"."News"."published" = $1 OFFSET $2) AS "sub"
prisma:query SELECT COUNT(*) FROM (SELECT "public"."User"."id" FROM "public"."User" WHERE "public"."User"."status" = $1 OFFSET $2) AS "sub"
 GET / 200 in 246ms
prisma:query SELECT "public"."Event"."id", "public"."Event"."title", "public"."Event"."description", "public"."Event"."date", "public"."Event"."time", "public"."Event"."location", "public"."Event"."capacity", "public"."Event"."price", "public"."Event"."speakers", "public"."Event"."requirements", "public"."Event"."agenda", "public"."Event"."image", "public"."Event"."category", "public"."Event"."status", "public"."Event"."registrationsCount", "public"."Event"."actualParticipants", "public"."Event"."createdAt", "public"."Event"."updatedAt" FROM "public"."Event" WHERE 1=1 ORDER BY "public"."Event"."createdAt" ASC OFFSET $1
prisma:query SELECT "public"."Registration"."id", "public"."Registration"."eventId" FROM "public"."Registration" WHERE ("public"."Registration"."status" <> $1 AND "public"."Registration"."eventId" IN ($2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14)) OFFSET $15
prisma:query SELECT "public"."Registration"."id", "public"."Registration"."eventId", "public"."Registration"."fullName", "public"."Registration"."email", "public"."Registration"."phone", "public"."Registration"."organization", "public"."Registration"."experience", "public"."Registration"."expectation", "public"."Registration"."status", "public"."Registration"."createdAt", "public"."Registration"."updatedAt" FROM "public"."Registration" WHERE 1=1 ORDER BY "public"."Registration"."createdAt" DESC OFFSET $1
prisma:query SELECT "public"."Contact"."id", "public"."Contact"."name", "public"."Contact"."email", "public"."Contact"."phone", "public"."Contact"."company", "public"."Contact"."role", "public"."Contact"."message", "public"."Contact"."type", "public"."Contact"."status", "public"."Contact"."priority", "public"."Contact"."notes", "public"."Contact"."createdAt", "public"."Contact"."updatedAt" FROM "public"."Contact" WHERE 1=1 ORDER BY "public"."Contact"."createdAt" DESC OFFSET $1
 GET /api/events 200 in 326ms
 GET /api/registrations 200 in 328ms
 GET /api/contacts 200 in 328ms
 GET /api/news 200 in 329ms
prisma:query SELECT "public"."News"."id", "public"."News"."title", "public"."News"."content", "public"."News"."excerpt", "public"."News"."author", "public"."News"."source", "public"."News"."category", "public"."News"."importance", "public"."News"."published", "public"."News"."publishedAt", "public"."News"."image", "public"."News"."tags", "public"."News"."link", "public"."News"."createdAt", "public"."News"."updatedAt" FROM "public"."News" WHERE 1=1 ORDER BY "public"."News"."createdAt" DESC OFFSET $1
 GET /favicon.ico?favicon.0b3bf435.ico 200 in 258ms
prisma:query SELECT "public"."Event"."id", "public"."Event"."title", "public"."Event"."description", "public"."Event"."date", "public"."Event"."time", "public"."Event"."location", "public"."Event"."capacity", "public"."Event"."price", "public"."Event"."speakers", "public"."Event"."requirements", "public"."Event"."agenda", "public"."Event"."image", "public"."Event"."category", "public"."Event"."status", "public"."Event"."registrationsCount", "public"."Event"."actualParticipants", "public"."Event"."createdAt", "public"."Event"."updatedAt" FROM "public"."Event" WHERE 1=1 ORDER BY "public"."Event"."createdAt" ASC OFFSET $1
prisma:query SELECT "public"."Registration"."id", "public"."Registration"."eventId" FROM "public"."Registration" WHERE ("public"."Registration"."status" <> $1 AND "public"."Registration"."eventId" IN ($2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14)) OFFSET $15
 GET /api/events 200 in 264ms
prisma:query SELECT "public"."Event"."id", "public"."Event"."title", "public"."Event"."description", "public"."Event"."date", "public"."Event"."time", "public"."Event"."location", "public"."Event"."capacity", "public"."Event"."price", "public"."Event"."speakers", "public"."Event"."requirements", "public"."Event"."agenda", "public"."Event"."image", "public"."Event"."category", "public"."Event"."status", "public"."Event"."registrationsCount", "public"."Event"."actualParticipants", "public"."Event"."createdAt", "public"."Event"."updatedAt" FROM "public"."Event" WHERE 1=1 ORDER BY "public"."Event"."createdAt" ASC OFFSET $1
prisma:query SELECT "public"."Registration"."id", "public"."Registration"."eventId" FROM "public"."Registration" WHERE ("public"."Registration"."status" <> $1 AND "public"."Registration"."eventId" IN ($2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14)) OFFSET $15
 GET /api/events 200 in 239ms
prisma:query DELETE FROM "public"."Event" WHERE ("public"."Event"."id" = $1 AND 1=1) RETURNING "public"."Event"."id", "public"."Event"."title", "public"."Event"."description", "public"."Event"."date", "public"."Event"."time", "public"."Event"."location", "public"."Event"."capacity", "public"."Event"."price", "public"."Event"."speakers", "public"."Event"."requirements", "public"."Event"."agenda", "public"."Event"."image", "public"."Event"."category", "public"."Event"."status", "public"."Event"."registrationsCount", "public"."Event"."actualParticipants", "public"."Event"."createdAt", "public"."Event"."updatedAt"
 DELETE /api/events/1758698255626 200 in 262ms
prisma:query DELETE FROM "public"."Event" WHERE ("public"."Event"."id" = $1 AND 1=1) RETURNING "public"."Event"."id", "public"."Event"."title", "public"."Event"."description", "public"."Event"."date", "public"."Event"."time", "public"."Event"."location", "public"."Event"."capacity", "public"."Event"."price", "public"."Event"."speakers", "public"."Event"."requirements", "public"."Event"."agenda", "public"."Event"."image", "public"."Event"."category", "public"."Event"."status", "public"."Event"."registrationsCount", "public"."Event"."actualParticipants", "public"."Event"."createdAt", "public"."Event"."updatedAt"
 DELETE /api/events/undefined 200 in 244ms
 POST /api/upload 200 in 274ms
prisma:query SELECT 1
prisma:query INSERT INTO "public"."Event" ("id","title","description","date","time","location","capacity","price","speakers","requirements","agenda","image","category","status","registrationsCount","actualParticipants","createdAt","updatedAt") VALUES ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18) RETURNING "public"."Event"."id", "public"."Event"."title", "public"."Event"."description", "public"."Event"."date", "public"."Event"."time", "public"."Event"."location", "public"."Event"."capacity", "public"."Event"."price", "public"."Event"."speakers", "public"."Event"."requirements", "public"."Event"."agenda", "public"."Event"."image", "public"."Event"."category", "public"."Event"."status", "public"."Event"."registrationsCount", "public"."Event"."actualParticipants", "public"."Event"."createdAt", "public"."Event"."updatedAt"
 POST /api/events 201 in 257ms
prisma:query INSERT INTO "public"."Registration" ("id","eventId","fullName","email","phone","organization","experience","expectation","status","createdAt","updatedAt") VALUES ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11) RETURNING "public"."Registration"."id", "public"."Registration"."eventId", "public"."Registration"."fullName", "public"."Registration"."email", "public"."Registration"."phone", "public"."Registration"."organization", "public"."Registration"."experience", "public"."Registration"."expectation", "public"."Registration"."status", "public"."Registration"."createdAt", "public"."Registration"."updatedAt"
prisma:error 
Invalid `__TURBOPACK__imported__module__$5b$project$5d2f$lib$2f$prisma$2e$ts__$5b$app$2d$route$5d$__$28$ecmascript$29$__["prisma"].registration.create()` invocation in
/home/phuongnam/web/.next/server/chunks/[root-of-the-server]__aa09fb8c._.js:116:166

  113 async function POST(request) {
  114     try {
  115         const body = await request.json();
→ 116         const created = await __TURBOPACK__imported__module__$5b$project$5d2f$lib$2f$prisma$2e$ts__$5b$app$2d$route$5d$__$28$ecmascript$29$__["prisma"].registration.create(
Unique constraint failed on the fields: (`id`)
Error creating registration: Error [PrismaClientKnownRequestError]: 
Invalid `__TURBOPACK__imported__module__$5b$project$5d2f$lib$2f$prisma$2e$ts__$5b$app$2d$route$5d$__$28$ecmascript$29$__["prisma"].registration.create()` invocation in
/home/phuongnam/web/.next/server/chunks/[root-of-the-server]__aa09fb8c._.js:116:166

  113 async function POST(request) {
  114     try {
  115         const body = await request.json();
→ 116         const created = await __TURBOPACK__imported__module__$5b$project$5d2f$lib$2f$prisma$2e$ts__$5b$app$2d$route$5d$__$28$ecmascript$29$__["prisma"].registration.create(
Unique constraint failed on the fields: (`id`)
    at <unknown> (app/api/registrations/route.ts:20:47)
    at async POST (app/api/registrations/route.ts:20:21)
  18 |   try {
  19 |     const body = await request.json();
> 20 |     const created = await prisma.registration.create({
     |                                               ^
  21 |       data: {
  22 |         id: String(body.id || undefined),
  23 |         eventId: String(body.eventId), {
  code: 'P2002',
  clientVersion: '5.22.0',
  meta: [Object]
}
 POST /api/registrations 500 in 359ms
prisma:query SELECT 1
prisma:query INSERT INTO "public"."Registration" ("id","eventId","fullName","email","phone","organization","experience","expectation","status","createdAt","updatedAt") VALUES ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11) RETURNING "public"."Registration"."id", "public"."Registration"."eventId", "public"."Registration"."fullName", "public"."Registration"."email", "public"."Registration"."phone", "public"."Registration"."organization", "public"."Registration"."experience", "public"."Registration"."expectation", "public"."Registration"."status", "public"."Registration"."createdAt", "public"."Registration"."updatedAt"
prisma:error 
Invalid `__TURBOPACK__imported__module__$5b$project$5d2f$lib$2f$prisma$2e$ts__$5b$app$2d$route$5d$__$28$ecmascript$29$__["prisma"].registration.create()` invocation in
/home/phuongnam/web/.next/server/chunks/[root-of-the-server]__aa09fb8c._.js:116:166

  113 async function POST(request) {
  114     try {
  115         const body = await request.json();
→ 116         const created = await __TURBOPACK__imported__module__$5b$project$5d2f$lib$2f$prisma$2e$ts__$5b$app$2d$route$5d$__$28$ecmascript$29$__["prisma"].registration.create(
Unique constraint failed on the fields: (`id`)
Error creating registration: Error [PrismaClientKnownRequestError]: 
Invalid `__TURBOPACK__imported__module__$5b$project$5d2f$lib$2f$prisma$2e$ts__$5b$app$2d$route$5d$__$28$ecmascript$29$__["prisma"].registration.create()` invocation in
/home/phuongnam/web/.next/server/chunks/[root-of-the-server]__aa09fb8c._.js:116:166

  113 async function POST(request) {
  114     try {
  115         const body = await request.json();
→ 116         const created = await __TURBOPACK__imported__module__$5b$project$5d2f$lib$2f$prisma$2e$ts__$5b$app$2d$route$5d$__$28$ecmascript$29$__["prisma"].registration.create(
Unique constraint failed on the fields: (`id`)
    at <unknown> (app/api/registrations/route.ts:20:47)
    at async POST (app/api/registrations/route.ts:20:21)
  18 |   try {
  19 |     const body = await request.json();
> 20 |     const created = await prisma.registration.create({
     |                                               ^
  21 |       data: {
  22 |         id: String(body.id || undefined),
  23 |         eventId: String(body.eventId), {
  code: 'P2002',
  clientVersion: '5.22.0',
  meta: [Object]
}
 POST /api/registrations 500 in 312ms
prisma:query SELECT 1
prisma:query SELECT "public"."Event"."id", "public"."Event"."title", "public"."Event"."description", "public"."Event"."date", "public"."Event"."time", "public"."Event"."location", "public"."Event"."capacity", "public"."Event"."price", "public"."Event"."speakers", "public"."Event"."requirements", "public"."Event"."agenda", "public"."Event"."image", "public"."Event"."category", "public"."Event"."status", "public"."Event"."registrationsCount", "public"."Event"."actualParticipants", "public"."Event"."createdAt", "public"."Event"."updatedAt" FROM "public"."Event" WHERE ("public"."Event"."id" = $1 AND 1=1) LIMIT $2 OFFSET $3
 POST /api/registrations 400 in 290ms
prisma:query SELECT "public"."Event"."id", "public"."Event"."title", "public"."Event"."description", "public"."Event"."date", "public"."Event"."time", "public"."Event"."location", "public"."Event"."capacity", "public"."Event"."price", "public"."Event"."speakers", "public"."Event"."requirements", "public"."Event"."agenda", "public"."Event"."image", "public"."Event"."category", "public"."Event"."status", "public"."Event"."registrationsCount", "public"."Event"."actualParticipants", "public"."Event"."createdAt", "public"."Event"."updatedAt" FROM "public"."Event" WHERE ("public"."Event"."id" = $1 AND 1=1) LIMIT $2 OFFSET $3
 POST /api/registrations 400 in 255ms
prisma:query DELETE FROM "public"."Event" WHERE ("public"."Event"."id" = $1 AND 1=1) RETURNING "public"."Event"."id", "public"."Event"."title", "public"."Event"."description", "public"."Event"."date", "public"."Event"."time", "public"."Event"."location", "public"."Event"."capacity", "public"."Event"."price", "public"."Event"."speakers", "public"."Event"."requirements", "public"."Event"."agenda", "public"."Event"."image", "public"."Event"."category", "public"."Event"."status", "public"."Event"."registrationsCount", "public"."Event"."actualParticipants", "public"."Event"."createdAt", "public"."Event"."updatedAt"
 DELETE /api/events/1758698339014 200 in 254ms
 POST /api/upload 200 in 266ms
prisma:query SELECT 1
prisma:query INSERT INTO "public"."Event" ("id","title","description","date","time","location","capacity","price","speakers","requirements","agenda","image","category","status","registrationsCount","actualParticipants","createdAt","updatedAt") VALUES ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18) RETURNING "public"."Event"."id", "public"."Event"."title", "public"."Event"."description", "public"."Event"."date", "public"."Event"."time", "public"."Event"."location", "public"."Event"."capacity", "public"."Event"."price", "public"."Event"."speakers", "public"."Event"."requirements", "public"."Event"."agenda", "public"."Event"."image", "public"."Event"."category", "public"."Event"."status", "public"."Event"."registrationsCount", "public"."Event"."actualParticipants", "public"."Event"."createdAt", "public"."Event"."updatedAt"
 POST /api/events 201 in 250ms
 GET / 200 in 103ms
prisma:query SELECT "public"."Event"."id", "public"."Event"."title", "public"."Event"."description", "public"."Event"."date", "public"."Event"."time", "public"."Event"."location", "public"."Event"."capacity", "public"."Event"."price", "public"."Event"."speakers", "public"."Event"."requirements", "public"."Event"."agenda", "public"."Event"."image", "public"."Event"."category", "public"."Event"."status", "public"."Event"."registrationsCount", "public"."Event"."actualParticipants", "public"."Event"."createdAt", "public"."Event"."updatedAt" FROM "public"."Event" WHERE 1=1 ORDER BY "public"."Event"."createdAt" ASC OFFSET $1
prisma:query SELECT "public"."Registration"."id", "public"."Registration"."eventId" FROM "public"."Registration" WHERE ("public"."Registration"."status" <> $1 AND "public"."Registration"."eventId" IN ($2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13)) OFFSET $14
prisma:query SELECT 1
prisma:query SELECT "public"."Registration"."id", "public"."Registration"."eventId", "public"."Registration"."fullName", "public"."Registration"."email", "public"."Registration"."phone", "public"."Registration"."organization", "public"."Registration"."experience", "public"."Registration"."expectation", "public"."Registration"."status", "public"."Registration"."createdAt", "public"."Registration"."updatedAt" FROM "public"."Registration" WHERE 1=1 ORDER BY "public"."Registration"."createdAt" DESC OFFSET $1
prisma:query SELECT "public"."News"."id", "public"."News"."title", "public"."News"."content", "public"."News"."excerpt", "public"."News"."author", "public"."News"."source", "public"."News"."category", "public"."News"."importance", "public"."News"."published", "public"."News"."publishedAt", "public"."News"."image", "public"."News"."tags", "public"."News"."link", "public"."News"."createdAt", "public"."News"."updatedAt" FROM "public"."News" WHERE 1=1 ORDER BY "public"."News"."createdAt" DESC OFFSET $1
 GET /api/events 200 in 387ms
 GET /api/registrations 200 in 387ms
 GET /api/news 200 in 389ms
 GET /api/contacts 200 in 397ms
prisma:query SELECT "public"."Contact"."id", "public"."Contact"."name", "public"."Contact"."email", "public"."Contact"."phone", "public"."Contact"."company", "public"."Contact"."role", "public"."Contact"."message", "public"."Contact"."type", "public"."Contact"."status", "public"."Contact"."priority", "public"."Contact"."notes", "public"."Contact"."createdAt", "public"."Contact"."updatedAt" FROM "public"."Contact" WHERE 1=1 ORDER BY "public"."Contact"."createdAt" DESC OFFSET $1
 GET /favicon.ico?favicon.0b3bf435.ico 200 in 251ms
prisma:query SELECT "public"."Event"."id", "public"."Event"."title", "public"."Event"."description", "public"."Event"."date", "public"."Event"."time", "public"."Event"."location", "public"."Event"."capacity", "public"."Event"."price", "public"."Event"."speakers", "public"."Event"."requirements", "public"."Event"."agenda", "public"."Event"."image", "public"."Event"."category", "public"."Event"."status", "public"."Event"."registrationsCount", "public"."Event"."actualParticipants", "public"."Event"."createdAt", "public"."Event"."updatedAt" FROM "public"."Event" WHERE ("public"."Event"."id" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query INSERT INTO "public"."Registration" ("id","eventId","fullName","email","phone","organization","experience","expectation","status","createdAt","updatedAt") VALUES ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11) RETURNING "public"."Registration"."id", "public"."Registration"."eventId", "public"."Registration"."fullName", "public"."Registration"."email", "public"."Registration"."phone", "public"."Registration"."organization", "public"."Registration"."experience", "public"."Registration"."expectation", "public"."Registration"."status", "public"."Registration"."createdAt", "public"."Registration"."updatedAt"
prisma:query SELECT COUNT(*) FROM (SELECT "public"."Registration"."id" FROM "public"."Registration" WHERE ("public"."Registration"."eventId" = $1 AND (NOT "public"."Registration"."status" = $2)) OFFSET $3) AS "sub"
prisma:query UPDATE "public"."Event" SET "registrationsCount" = $1, "updatedAt" = $2 WHERE ("public"."Event"."id" = $3 AND 1=1) RETURNING "public"."Event"."id", "public"."Event"."title", "public"."Event"."description", "public"."Event"."date", "public"."Event"."time", "public"."Event"."location", "public"."Event"."capacity", "public"."Event"."price", "public"."Event"."speakers", "public"."Event"."requirements", "public"."Event"."agenda", "public"."Event"."image", "public"."Event"."category", "public"."Event"."status", "public"."Event"."registrationsCount", "public"."Event"."actualParticipants", "public"."Event"."createdAt", "public"."Event"."updatedAt"
 POST /api/registrations 201 in 272ms
prisma:query SELECT "public"."Event"."id", "public"."Event"."title", "public"."Event"."description", "public"."Event"."date", "public"."Event"."time", "public"."Event"."location", "public"."Event"."capacity", "public"."Event"."price", "public"."Event"."speakers", "public"."Event"."requirements", "public"."Event"."agenda", "public"."Event"."image", "public"."Event"."category", "public"."Event"."status", "public"."Event"."registrationsCount", "public"."Event"."actualParticipants", "public"."Event"."createdAt", "public"."Event"."updatedAt" FROM "public"."Event" WHERE 1=1 ORDER BY "public"."Event"."createdAt" ASC OFFSET $1
prisma:query SELECT "public"."Registration"."id", "public"."Registration"."eventId" FROM "public"."Registration" WHERE ("public"."Registration"."status" <> $1 AND "public"."Registration"."eventId" IN ($2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13)) OFFSET $14
 GET /api/events 200 in 252ms
prisma:query SELECT 1
prisma:query SELECT "public"."Event"."id", "public"."Event"."title", "public"."Event"."description", "public"."Event"."date", "public"."Event"."time", "public"."Event"."location", "public"."Event"."capacity", "public"."Event"."price", "public"."Event"."speakers", "public"."Event"."requirements", "public"."Event"."agenda", "public"."Event"."image", "public"."Event"."category", "public"."Event"."status", "public"."Event"."registrationsCount", "public"."Event"."actualParticipants", "public"."Event"."createdAt", "public"."Event"."updatedAt" FROM "public"."Event" WHERE ("public"."Event"."id" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query INSERT INTO "public"."Registration" ("id","eventId","fullName","email","phone","organization","experience","expectation","status","createdAt","updatedAt") VALUES ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11) RETURNING "public"."Registration"."id", "public"."Registration"."eventId", "public"."Registration"."fullName", "public"."Registration"."email", "public"."Registration"."phone", "public"."Registration"."organization", "public"."Registration"."experience", "public"."Registration"."expectation", "public"."Registration"."status", "public"."Registration"."createdAt", "public"."Registration"."updatedAt"
prisma:query SELECT COUNT(*) FROM (SELECT "public"."Registration"."id" FROM "public"."Registration" WHERE ("public"."Registration"."eventId" = $1 AND (NOT "public"."Registration"."status" = $2)) OFFSET $3) AS "sub"
prisma:query UPDATE "public"."Event" SET "registrationsCount" = $1, "updatedAt" = $2 WHERE ("public"."Event"."id" = $3 AND 1=1) RETURNING "public"."Event"."id", "public"."Event"."title", "public"."Event"."description", "public"."Event"."date", "public"."Event"."time", "public"."Event"."location", "public"."Event"."capacity", "public"."Event"."price", "public"."Event"."speakers", "public"."Event"."requirements", "public"."Event"."agenda", "public"."Event"."image", "public"."Event"."category", "public"."Event"."status", "public"."Event"."registrationsCount", "public"."Event"."actualParticipants", "public"."Event"."createdAt", "public"."Event"."updatedAt"
 POST /api/registrations 201 in 255ms
prisma:query SELECT "public"."Event"."id", "public"."Event"."title", "public"."Event"."description", "public"."Event"."date", "public"."Event"."time", "public"."Event"."location", "public"."Event"."capacity", "public"."Event"."price", "public"."Event"."speakers", "public"."Event"."requirements", "public"."Event"."agenda", "public"."Event"."image", "public"."Event"."category", "public"."Event"."status", "public"."Event"."registrationsCount", "public"."Event"."actualParticipants", "public"."Event"."createdAt", "public"."Event"."updatedAt" FROM "public"."Event" WHERE 1=1 ORDER BY "public"."Event"."createdAt" ASC OFFSET $1
prisma:query SELECT "public"."Registration"."id", "public"."Registration"."eventId" FROM "public"."Registration" WHERE ("public"."Registration"."status" <> $1 AND "public"."Registration"."eventId" IN ($2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13)) OFFSET $14
 GET /api/events 200 in 244ms
 GET /admin 200 in 97ms
prisma:query SELECT 1
prisma:query SELECT 1
prisma:query SELECT 1
prisma:query SELECT 1
prisma:query SELECT 1
prisma:query SELECT 1
prisma:query SELECT 1
prisma:query SELECT 1
prisma:query SELECT COUNT(*) FROM (SELECT "public"."Event"."id" FROM "public"."Event" WHERE 1=1 OFFSET $1) AS "sub"
prisma:query SELECT COUNT(*) FROM (SELECT "public"."Contact"."id" FROM "public"."Contact" WHERE 1=1 OFFSET $1) AS "sub"
prisma:query SELECT COUNT(*) FROM (SELECT "public"."User"."id" FROM "public"."User" WHERE "public"."User"."status" = $1 OFFSET $2) AS "sub"
prisma:query SELECT COUNT(*) FROM (SELECT "public"."Registration"."id" FROM "public"."Registration" WHERE "public"."Registration"."status" <> $1 OFFSET $2) AS "sub"
prisma:query SELECT COUNT(*) FROM (SELECT "public"."Contact"."id" FROM "public"."Contact" WHERE "public"."Contact"."status" = $1 OFFSET $2) AS "sub"
prisma:query SELECT COUNT(*) FROM (SELECT "public"."User"."id" FROM "public"."User" WHERE 1=1 OFFSET $1) AS "sub"
prisma:query SELECT COUNT(*) FROM (SELECT "public"."News"."id" FROM "public"."News" WHERE "public"."News"."published" = $1 OFFSET $2) AS "sub"
prisma:query SELECT COUNT(*) FROM (SELECT "public"."News"."id" FROM "public"."News" WHERE 1=1 OFFSET $1) AS "sub"
prisma:query SELECT COUNT(*) FROM (SELECT "public"."Event"."id" FROM "public"."Event" WHERE "public"."Event"."status" = $1 OFFSET $2) AS "sub"
prisma:query SELECT "public"."Event"."id", "public"."Event"."title", "public"."Event"."description", "public"."Event"."date", "public"."Event"."time", "public"."Event"."location", "public"."Event"."capacity", "public"."Event"."price", "public"."Event"."speakers", "public"."Event"."requirements", "public"."Event"."agenda", "public"."Event"."image", "public"."Event"."category", "public"."Event"."status", "public"."Event"."registrationsCount", "public"."Event"."actualParticipants", "public"."Event"."createdAt", "public"."Event"."updatedAt" FROM "public"."Event" WHERE 1=1 ORDER BY "public"."Event"."createdAt" ASC OFFSET $1
prisma:query SELECT "public"."Registration"."id", "public"."Registration"."eventId" FROM "public"."Registration" WHERE ("public"."Registration"."status" <> $1 AND "public"."Registration"."eventId" IN ($2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13)) OFFSET $14
prisma:query SELECT "public"."News"."id", "public"."News"."title", "public"."News"."content", "public"."News"."excerpt", "public"."News"."author", "public"."News"."source", "public"."News"."category", "public"."News"."importance", "public"."News"."published", "public"."News"."publishedAt", "public"."News"."image", "public"."News"."tags", "public"."News"."link", "public"."News"."createdAt", "public"."News"."updatedAt" FROM "public"."News" WHERE 1=1 ORDER BY "public"."News"."createdAt" DESC OFFSET $1
 GET /api/stats 200 in 377ms
 GET /api/events 200 in 379ms
 GET /api/news 200 in 381ms
 GET /api/contacts 200 in 386ms
 GET /favicon.ico?favicon.0b3bf435.ico 200 in 311ms
prisma:query SELECT "public"."Contact"."id", "public"."Contact"."name", "public"."Contact"."email", "public"."Contact"."phone", "public"."Contact"."company", "public"."Contact"."role", "public"."Contact"."message", "public"."Contact"."type", "public"."Contact"."status", "public"."Contact"."priority", "public"."Contact"."notes", "public"."Contact"."createdAt", "public"."Contact"."updatedAt" FROM "public"."Contact" WHERE 1=1 ORDER BY "public"."Contact"."createdAt" DESC OFFSET $1
prisma:query SELECT COUNT(*) FROM (SELECT "public"."News"."id" FROM "public"."News" WHERE "public"."News"."published" = $1 OFFSET $2) AS "sub"
prisma:query SELECT COUNT(*) FROM (SELECT "public"."User"."id" FROM "public"."User" WHERE 1=1 OFFSET $1) AS "sub"
prisma:query SELECT COUNT(*) FROM (SELECT "public"."Event"."id" FROM "public"."Event" WHERE 1=1 OFFSET $1) AS "sub"
prisma:query SELECT COUNT(*) FROM (SELECT "public"."Event"."id" FROM "public"."Event" WHERE "public"."Event"."status" = $1 OFFSET $2) AS "sub"
prisma:query SELECT COUNT(*) FROM (SELECT "public"."Contact"."id" FROM "public"."Contact" WHERE "public"."Contact"."status" = $1 OFFSET $2) AS "sub"
prisma:query SELECT COUNT(*) FROM (SELECT "public"."Registration"."id" FROM "public"."Registration" WHERE "public"."Registration"."status" <> $1 OFFSET $2) AS "sub"
prisma:query SELECT COUNT(*) FROM (SELECT "public"."News"."id" FROM "public"."News" WHERE 1=1 OFFSET $1) AS "sub"
prisma:query SELECT COUNT(*) FROM (SELECT "public"."Contact"."id" FROM "public"."Contact" WHERE 1=1 OFFSET $1) AS "sub"
prisma:query SELECT COUNT(*) FROM (SELECT "public"."User"."id" FROM "public"."User" WHERE "public"."User"."status" = $1 OFFSET $2) AS "sub"
prisma:query SELECT "public"."Event"."id", "public"."Event"."title", "public"."Event"."description", "public"."Event"."date", "public"."Event"."time", "public"."Event"."location", "public"."Event"."capacity", "public"."Event"."price", "public"."Event"."speakers", "public"."Event"."requirements", "public"."Event"."agenda", "public"."Event"."image", "public"."Event"."category", "public"."Event"."status", "public"."Event"."registrationsCount", "public"."Event"."actualParticipants", "public"."Event"."createdAt", "public"."Event"."updatedAt" FROM "public"."Event" WHERE 1=1 ORDER BY "public"."Event"."createdAt" ASC OFFSET $1
prisma:query SELECT "public"."Registration"."id", "public"."Registration"."eventId" FROM "public"."Registration" WHERE ("public"."Registration"."status" <> $1 AND "public"."Registration"."eventId" IN ($2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13)) OFFSET $14
prisma:query SELECT "public"."News"."id", "public"."News"."title", "public"."News"."content", "public"."News"."excerpt", "public"."News"."author", "public"."News"."source", "public"."News"."category", "public"."News"."importance", "public"."News"."published", "public"."News"."publishedAt", "public"."News"."image", "public"."News"."tags", "public"."News"."link", "public"."News"."createdAt", "public"."News"."updatedAt" FROM "public"."News" WHERE 1=1 ORDER BY "public"."News"."createdAt" DESC OFFSET $1
 GET /api/stats 200 in 305ms
 GET /api/events 200 in 308ms
 GET /api/news 200 in 311ms
 GET /api/contacts 200 in 314ms
prisma:query SELECT "public"."Contact"."id", "public"."Contact"."name", "public"."Contact"."email", "public"."Contact"."phone", "public"."Contact"."company", "public"."Contact"."role", "public"."Contact"."message", "public"."Contact"."type", "public"."Contact"."status", "public"."Contact"."priority", "public"."Contact"."notes", "public"."Contact"."createdAt", "public"."Contact"."updatedAt" FROM "public"."Contact" WHERE 1=1 ORDER BY "public"."Contact"."createdAt" DESC OFFSET $1
prisma:query SELECT "public"."Event"."id", "public"."Event"."title", "public"."Event"."description", "public"."Event"."date", "public"."Event"."time", "public"."Event"."location", "public"."Event"."capacity", "public"."Event"."price", "public"."Event"."speakers", "public"."Event"."requirements", "public"."Event"."agenda", "public"."Event"."image", "public"."Event"."category", "public"."Event"."status", "public"."Event"."registrationsCount", "public"."Event"."actualParticipants", "public"."Event"."createdAt", "public"."Event"."updatedAt" FROM "public"."Event" WHERE 1=1 ORDER BY "public"."Event"."createdAt" ASC OFFSET $1
prisma:query SELECT "public"."Registration"."id", "public"."Registration"."eventId" FROM "public"."Registration" WHERE ("public"."Registration"."status" <> $1 AND "public"."Registration"."eventId" IN ($2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13)) OFFSET $14
 GET /api/events 200 in 249ms
prisma:query SELECT "public"."Event"."id", "public"."Event"."title", "public"."Event"."description", "public"."Event"."date", "public"."Event"."time", "public"."Event"."location", "public"."Event"."capacity", "public"."Event"."price", "public"."Event"."speakers", "public"."Event"."requirements", "public"."Event"."agenda", "public"."Event"."image", "public"."Event"."category", "public"."Event"."status", "public"."Event"."registrationsCount", "public"."Event"."actualParticipants", "public"."Event"."createdAt", "public"."Event"."updatedAt" FROM "public"."Event" WHERE 1=1 ORDER BY "public"."Event"."createdAt" ASC OFFSET $1
prisma:query SELECT "public"."Registration"."id", "public"."Registration"."eventId" FROM "public"."Registration" WHERE ("public"."Registration"."status" <> $1 AND "public"."Registration"."eventId" IN ($2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13)) OFFSET $14
 GET /api/events 200 in 238ms
prisma:query SELECT 1
prisma:query SELECT "public"."Registration"."id", "public"."Registration"."eventId", "public"."Registration"."fullName", "public"."Registration"."email", "public"."Registration"."phone", "public"."Registration"."organization", "public"."Registration"."experience", "public"."Registration"."expectation", "public"."Registration"."status", "public"."Registration"."createdAt", "public"."Registration"."updatedAt" FROM "public"."Registration" WHERE 1=1 ORDER BY "public"."Registration"."createdAt" DESC OFFSET $1
 GET /api/registrations 200 in 251ms
 GET /api/events 200 in 253ms
prisma:query SELECT "public"."Event"."id", "public"."Event"."title", "public"."Event"."description", "public"."Event"."date", "public"."Event"."time", "public"."Event"."location", "public"."Event"."capacity", "public"."Event"."price", "public"."Event"."speakers", "public"."Event"."requirements", "public"."Event"."agenda", "public"."Event"."image", "public"."Event"."category", "public"."Event"."status", "public"."Event"."registrationsCount", "public"."Event"."actualParticipants", "public"."Event"."createdAt", "public"."Event"."updatedAt" FROM "public"."Event" WHERE 1=1 ORDER BY "public"."Event"."createdAt" ASC OFFSET $1
prisma:query SELECT "public"."Registration"."id", "public"."Registration"."eventId" FROM "public"."Registration" WHERE ("public"."Registration"."status" <> $1 AND "public"."Registration"."eventId" IN ($2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13)) OFFSET $14
prisma:query SELECT "public"."Registration"."id", "public"."Registration"."eventId", "public"."Registration"."fullName", "public"."Registration"."email", "public"."Registration"."phone", "public"."Registration"."organization", "public"."Registration"."experience", "public"."Registration"."expectation", "public"."Registration"."status", "public"."Registration"."createdAt", "public"."Registration"."updatedAt" FROM "public"."Registration" WHERE 1=1 ORDER BY "public"."Registration"."createdAt" DESC OFFSET $1
 GET /api/registrations 200 in 245ms
 GET /api/events 200 in 248ms
prisma:query SELECT "public"."Event"."id", "public"."Event"."title", "public"."Event"."description", "public"."Event"."date", "public"."Event"."time", "public"."Event"."location", "public"."Event"."capacity", "public"."Event"."price", "public"."Event"."speakers", "public"."Event"."requirements", "public"."Event"."agenda", "public"."Event"."image", "public"."Event"."category", "public"."Event"."status", "public"."Event"."registrationsCount", "public"."Event"."actualParticipants", "public"."Event"."createdAt", "public"."Event"."updatedAt" FROM "public"."Event" WHERE 1=1 ORDER BY "public"."Event"."createdAt" ASC OFFSET $1
prisma:query SELECT "public"."Registration"."id", "public"."Registration"."eventId" FROM "public"."Registration" WHERE ("public"."Registration"."status" <> $1 AND "public"."Registration"."eventId" IN ($2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13)) OFFSET $14
 ✓ Compiled /api/registrations/[id] in 113ms
prisma:query SELECT 1
prisma:query UPDATE "public"."Registration" SET "status" = $1, "updatedAt" = $2 WHERE ("public"."Registration"."id" = $3 AND 1=1) RETURNING "public"."Registration"."id", "public"."Registration"."eventId", "public"."Registration"."fullName", "public"."Registration"."email", "public"."Registration"."phone", "public"."Registration"."organization", "public"."Registration"."experience", "public"."Registration"."expectation", "public"."Registration"."status", "public"."Registration"."createdAt", "public"."Registration"."updatedAt"
prisma:query SELECT COUNT(*) FROM (SELECT "public"."Registration"."id" FROM "public"."Registration" WHERE ("public"."Registration"."eventId" = $1 AND (NOT "public"."Registration"."status" = $2)) OFFSET $3) AS "sub"
prisma:query UPDATE "public"."Event" SET "registrationsCount" = $1, "updatedAt" = $2 WHERE ("public"."Event"."id" = $3 AND 1=1) RETURNING "public"."Event"."id", "public"."Event"."title", "public"."Event"."description", "public"."Event"."date", "public"."Event"."time", "public"."Event"."location", "public"."Event"."capacity", "public"."Event"."price", "public"."Event"."speakers", "public"."Event"."requirements", "public"."Event"."agenda", "public"."Event"."image", "public"."Event"."category", "public"."Event"."status", "public"."Event"."registrationsCount", "public"."Event"."actualParticipants", "public"."Event"."createdAt", "public"."Event"."updatedAt"
 PUT /api/registrations/cmfxnp3bs0001562ooq2asxr0 200 in 854ms
prisma:query UPDATE "public"."Registration" SET "status" = $1, "updatedAt" = $2 WHERE ("public"."Registration"."id" = $3 AND 1=1) RETURNING "public"."Registration"."id", "public"."Registration"."eventId", "public"."Registration"."fullName", "public"."Registration"."email", "public"."Registration"."phone", "public"."Registration"."organization", "public"."Registration"."experience", "public"."Registration"."expectation", "public"."Registration"."status", "public"."Registration"."createdAt", "public"."Registration"."updatedAt"
prisma:query SELECT COUNT(*) FROM (SELECT "public"."Registration"."id" FROM "public"."Registration" WHERE ("public"."Registration"."eventId" = $1 AND (NOT "public"."Registration"."status" = $2)) OFFSET $3) AS "sub"
prisma:query UPDATE "public"."Event" SET "registrationsCount" = $1, "updatedAt" = $2 WHERE ("public"."Event"."id" = $3 AND 1=1) RETURNING "public"."Event"."id", "public"."Event"."title", "public"."Event"."description", "public"."Event"."date", "public"."Event"."time", "public"."Event"."location", "public"."Event"."capacity", "public"."Event"."price", "public"."Event"."speakers", "public"."Event"."requirements", "public"."Event"."agenda", "public"."Event"."image", "public"."Event"."category", "public"."Event"."status", "public"."Event"."registrationsCount", "public"."Event"."actualParticipants", "public"."Event"."createdAt", "public"."Event"."updatedAt"
 PUT /api/registrations/cmfxnpapk0003562oxc6lxgqv 200 in 276ms
prisma:query SELECT "public"."Contact"."id", "public"."Contact"."name", "public"."Contact"."email", "public"."Contact"."phone", "public"."Contact"."company", "public"."Contact"."role", "public"."Contact"."message", "public"."Contact"."type", "public"."Contact"."status", "public"."Contact"."priority", "public"."Contact"."notes", "public"."Contact"."createdAt", "public"."Contact"."updatedAt" FROM "public"."Contact" WHERE 1=1 ORDER BY "public"."Contact"."createdAt" DESC OFFSET $1
 GET /api/contacts 200 in 250ms
prisma:query SELECT "public"."Contact"."id", "public"."Contact"."name", "public"."Contact"."email", "public"."Contact"."phone", "public"."Contact"."company", "public"."Contact"."role", "public"."Contact"."message", "public"."Contact"."type", "public"."Contact"."status", "public"."Contact"."priority", "public"."Contact"."notes", "public"."Contact"."createdAt", "public"."Contact"."updatedAt" FROM "public"."Contact" WHERE 1=1 ORDER BY "public"."Contact"."createdAt" DESC OFFSET $1
 GET /api/contacts 200 in 234ms
prisma:query SELECT 1
prisma:query INSERT INTO "public"."Contact" ("id","name","email","phone","company","role","message","type","status","priority","notes","createdAt","updatedAt") VALUES ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13) RETURNING "public"."Contact"."id", "public"."Contact"."name", "public"."Contact"."email", "public"."Contact"."phone", "public"."Contact"."company", "public"."Contact"."role", "public"."Contact"."message", "public"."Contact"."type", "public"."Contact"."status", "public"."Contact"."priority", "public"."Contact"."notes", "public"."Contact"."createdAt", "public"."Contact"."updatedAt"
 POST /api/contacts 201 in 285ms
prisma:query SELECT "public"."Contact"."id", "public"."Contact"."name", "public"."Contact"."email", "public"."Contact"."phone", "public"."Contact"."company", "public"."Contact"."role", "public"."Contact"."message", "public"."Contact"."type", "public"."Contact"."status", "public"."Contact"."priority", "public"."Contact"."notes", "public"."Contact"."createdAt", "public"."Contact"."updatedAt" FROM "public"."Contact" WHERE 1=1 ORDER BY "public"."Contact"."createdAt" DESC OFFSET $1
 GET /api/contacts 200 in 243ms
prisma:query SELECT "public"."Registration"."id", "public"."Registration"."eventId", "public"."Registration"."fullName", "public"."Registration"."email", "public"."Registration"."phone", "public"."Registration"."organization", "public"."Registration"."experience", "public"."Registration"."expectation", "public"."Registration"."status", "public"."Registration"."createdAt", "public"."Registration"."updatedAt" FROM "public"."Registration" WHERE 1=1 ORDER BY "public"."Registration"."createdAt" DESC OFFSET $1
 GET /api/registrations 200 in 256ms
prisma:query SELECT "public"."Event"."id", "public"."Event"."title", "public"."Event"."description", "public"."Event"."date", "public"."Event"."time", "public"."Event"."location", "public"."Event"."capacity", "public"."Event"."price", "public"."Event"."speakers", "public"."Event"."requirements", "public"."Event"."agenda", "public"."Event"."image", "public"."Event"."category", "public"."Event"."status", "public"."Event"."registrationsCount", "public"."Event"."actualParticipants", "public"."Event"."createdAt", "public"."Event"."updatedAt" FROM "public"."Event" WHERE 1=1 ORDER BY "public"."Event"."createdAt" ASC OFFSET $1
prisma:query SELECT "public"."Registration"."id", "public"."Registration"."eventId" FROM "public"."Registration" WHERE ("public"."Registration"."status" <> $1 AND "public"."Registration"."eventId" IN ($2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13)) OFFSET $14
 GET /api/events 200 in 260ms
prisma:query SELECT "public"."Registration"."id", "public"."Registration"."eventId", "public"."Registration"."fullName", "public"."Registration"."email", "public"."Registration"."phone", "public"."Registration"."organization", "public"."Registration"."experience", "public"."Registration"."expectation", "public"."Registration"."status", "public"."Registration"."createdAt", "public"."Registration"."updatedAt" FROM "public"."Registration" WHERE 1=1 ORDER BY "public"."Registration"."createdAt" DESC OFFSET $1
 GET /api/registrations 200 in 265ms
 GET /api/events 200 in 267ms
prisma:query SELECT "public"."Event"."id", "public"."Event"."title", "public"."Event"."description", "public"."Event"."date", "public"."Event"."time", "public"."Event"."location", "public"."Event"."capacity", "public"."Event"."price", "public"."Event"."speakers", "public"."Event"."requirements", "public"."Event"."agenda", "public"."Event"."image", "public"."Event"."category", "public"."Event"."status", "public"."Event"."registrationsCount", "public"."Event"."actualParticipants", "public"."Event"."createdAt", "public"."Event"."updatedAt" FROM "public"."Event" WHERE 1=1 ORDER BY "public"."Event"."createdAt" ASC OFFSET $1
prisma:query SELECT "public"."Registration"."id", "public"."Registration"."eventId" FROM "public"."Registration" WHERE ("public"."Registration"."status" <> $1 AND "public"."Registration"."eventId" IN ($2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13)) OFFSET $14
prisma:query SELECT "public"."Contact"."id", "public"."Contact"."name", "public"."Contact"."email", "public"."Contact"."phone", "public"."Contact"."company", "public"."Contact"."role", "public"."Contact"."message", "public"."Contact"."type", "public"."Contact"."status", "public"."Contact"."priority", "public"."Contact"."notes", "public"."Contact"."createdAt", "public"."Contact"."updatedAt" FROM "public"."Contact" WHERE 1=1 ORDER BY "public"."Contact"."createdAt" DESC OFFSET $1
 GET /api/contacts 200 in 269ms
prisma:query SELECT "public"."Contact"."id", "public"."Contact"."name", "public"."Contact"."email", "public"."Contact"."phone", "public"."Contact"."company", "public"."Contact"."role", "public"."Contact"."message", "public"."Contact"."type", "public"."Contact"."status", "public"."Contact"."priority", "public"."Contact"."notes", "public"."Contact"."createdAt", "public"."Contact"."updatedAt" FROM "public"."Contact" WHERE 1=1 ORDER BY "public"."Contact"."createdAt" DESC OFFSET $1
 GET /api/contacts 200 in 248ms
 ✓ Compiled /api/contacts/[id] in 114ms
prisma:query SELECT 1
prisma:query DELETE FROM "public"."Contact" WHERE ("public"."Contact"."id" = $1 AND 1=1) RETURNING "public"."Contact"."id", "public"."Contact"."name", "public"."Contact"."email", "public"."Contact"."phone", "public"."Contact"."company", "public"."Contact"."role", "public"."Contact"."message", "public"."Contact"."type", "public"."Contact"."status", "public"."Contact"."priority", "public"."Contact"."notes", "public"."Contact"."createdAt", "public"."Contact"."updatedAt"
 DELETE /api/contacts/cmfxnqgd20004562oq17qaw7x 200 in 845ms
prisma:query DELETE FROM "public"."Contact" WHERE ("public"."Contact"."id" = $1 AND 1=1) RETURNING "public"."Contact"."id", "public"."Contact"."name", "public"."Contact"."email", "public"."Contact"."phone", "public"."Contact"."company", "public"."Contact"."role", "public"."Contact"."message", "public"."Contact"."type", "public"."Contact"."status", "public"."Contact"."priority", "public"."Contact"."notes", "public"."Contact"."createdAt", "public"."Contact"."updatedAt"
 DELETE /api/contacts/1758690011863 200 in 253ms
prisma:query DELETE FROM "public"."Contact" WHERE ("public"."Contact"."id" = $1 AND 1=1) RETURNING "public"."Contact"."id", "public"."Contact"."name", "public"."Contact"."email", "public"."Contact"."phone", "public"."Contact"."company", "public"."Contact"."role", "public"."Contact"."message", "public"."Contact"."type", "public"."Contact"."status", "public"."Contact"."priority", "public"."Contact"."notes", "public"."Contact"."createdAt", "public"."Contact"."updatedAt"
 DELETE /api/contacts/1758688552854 200 in 257ms
prisma:query SELECT "public"."Event"."id", "public"."Event"."title", "public"."Event"."description", "public"."Event"."date", "public"."Event"."time", "public"."Event"."location", "public"."Event"."capacity", "public"."Event"."price", "public"."Event"."speakers", "public"."Event"."requirements", "public"."Event"."agenda", "public"."Event"."image", "public"."Event"."category", "public"."Event"."status", "public"."Event"."registrationsCount", "public"."Event"."actualParticipants", "public"."Event"."createdAt", "public"."Event"."updatedAt" FROM "public"."Event" WHERE 1=1 ORDER BY "public"."Event"."createdAt" ASC OFFSET $1
prisma:query SELECT "public"."Registration"."id", "public"."Registration"."eventId" FROM "public"."Registration" WHERE ("public"."Registration"."status" <> $1 AND "public"."Registration"."eventId" IN ($2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13)) OFFSET $14
 GET /api/events 200 in 243ms
prisma:query SELECT "public"."Event"."id", "public"."Event"."title", "public"."Event"."description", "public"."Event"."date", "public"."Event"."time", "public"."Event"."location", "public"."Event"."capacity", "public"."Event"."price", "public"."Event"."speakers", "public"."Event"."requirements", "public"."Event"."agenda", "public"."Event"."image", "public"."Event"."category", "public"."Event"."status", "public"."Event"."registrationsCount", "public"."Event"."actualParticipants", "public"."Event"."createdAt", "public"."Event"."updatedAt" FROM "public"."Event" WHERE 1=1 ORDER BY "public"."Event"."createdAt" ASC OFFSET $1
prisma:query SELECT "public"."Registration"."id", "public"."Registration"."eventId" FROM "public"."Registration" WHERE ("public"."Registration"."status" <> $1 AND "public"."Registration"."eventId" IN ($2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13)) OFFSET $14
 GET /api/events 200 in 254ms
prisma:query SELECT "public"."Registration"."id", "public"."Registration"."eventId", "public"."Registration"."fullName", "public"."Registration"."email", "public"."Registration"."phone", "public"."Registration"."organization", "public"."Registration"."experience", "public"."Registration"."expectation", "public"."Registration"."status", "public"."Registration"."createdAt", "public"."Registration"."updatedAt" FROM "public"."Registration" WHERE 1=1 ORDER BY "public"."Registration"."createdAt" DESC OFFSET $1
 GET /api/registrations 200 in 248ms
 GET /api/events 200 in 249ms
prisma:query SELECT "public"."Event"."id", "public"."Event"."title", "public"."Event"."description", "public"."Event"."date", "public"."Event"."time", "public"."Event"."location", "public"."Event"."capacity", "public"."Event"."price", "public"."Event"."speakers", "public"."Event"."requirements", "public"."Event"."agenda", "public"."Event"."image", "public"."Event"."category", "public"."Event"."status", "public"."Event"."registrationsCount", "public"."Event"."actualParticipants", "public"."Event"."createdAt", "public"."Event"."updatedAt" FROM "public"."Event" WHERE 1=1 ORDER BY "public"."Event"."createdAt" ASC OFFSET $1
prisma:query SELECT "public"."Registration"."id", "public"."Registration"."eventId" FROM "public"."Registration" WHERE ("public"."Registration"."status" <> $1 AND "public"."Registration"."eventId" IN ($2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13)) OFFSET $14
prisma:query SELECT "public"."Event"."id", "public"."Event"."title", "public"."Event"."description", "public"."Event"."date", "public"."Event"."time", "public"."Event"."location", "public"."Event"."capacity", "public"."Event"."price", "public"."Event"."speakers", "public"."Event"."requirements", "public"."Event"."agenda", "public"."Event"."image", "public"."Event"."category", "public"."Event"."status", "public"."Event"."registrationsCount", "public"."Event"."actualParticipants", "public"."Event"."createdAt", "public"."Event"."updatedAt" FROM "public"."Event" WHERE 1=1 ORDER BY "public"."Event"."createdAt" ASC OFFSET $1
prisma:query SELECT "public"."Registration"."id", "public"."Registration"."eventId" FROM "public"."Registration" WHERE ("public"."Registration"."status" <> $1 AND "public"."Registration"."eventId" IN ($2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13)) OFFSET $14
 GET /api/events 200 in 257ms
 GET /api/registrations 200 in 256ms
prisma:query SELECT "public"."Registration"."id", "public"."Registration"."eventId", "public"."Registration"."fullName", "public"."Registration"."email", "public"."Registration"."phone", "public"."Registration"."organization", "public"."Registration"."experience", "public"."Registration"."expectation", "public"."Registration"."status", "public"."Registration"."createdAt", "public"."Registration"."updatedAt" FROM "public"."Registration" WHERE 1=1 ORDER BY "public"."Registration"."createdAt" DESC OFFSET $1
prisma:query SELECT "public"."Event"."id", "public"."Event"."title", "public"."Event"."description", "public"."Event"."date", "public"."Event"."time", "public"."Event"."location", "public"."Event"."capacity", "public"."Event"."price", "public"."Event"."speakers", "public"."Event"."requirements", "public"."Event"."agenda", "public"."Event"."image", "public"."Event"."category", "public"."Event"."status", "public"."Event"."registrationsCount", "public"."Event"."actualParticipants", "public"."Event"."createdAt", "public"."Event"."updatedAt" FROM "public"."Event" WHERE 1=1 ORDER BY "public"."Event"."createdAt" ASC OFFSET $1
prisma:query SELECT "public"."Registration"."id", "public"."Registration"."eventId" FROM "public"."Registration" WHERE ("public"."Registration"."status" <> $1 AND "public"."Registration"."eventId" IN ($2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13)) OFFSET $14
 GET /api/events 200 in 246ms
prisma:query SELECT "public"."Event"."id", "public"."Event"."title", "public"."Event"."description", "public"."Event"."date", "public"."Event"."time", "public"."Event"."location", "public"."Event"."capacity", "public"."Event"."price", "public"."Event"."speakers", "public"."Event"."requirements", "public"."Event"."agenda", "public"."Event"."image", "public"."Event"."category", "public"."Event"."status", "public"."Event"."registrationsCount", "public"."Event"."actualParticipants", "public"."Event"."createdAt", "public"."Event"."updatedAt" FROM "public"."Event" WHERE 1=1 ORDER BY "public"."Event"."createdAt" ASC OFFSET $1
prisma:query SELECT "public"."Registration"."id", "public"."Registration"."eventId" FROM "public"."Registration" WHERE ("public"."Registration"."status" <> $1 AND "public"."Registration"."eventId" IN ($2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13)) OFFSET $14
 GET /api/events 200 in 272ms
prisma:query SELECT "public"."Registration"."id", "public"."Registration"."eventId", "public"."Registration"."fullName", "public"."Registration"."email", "public"."Registration"."phone", "public"."Registration"."organization", "public"."Registration"."experience", "public"."Registration"."expectation", "public"."Registration"."status", "public"."Registration"."createdAt", "public"."Registration"."updatedAt" FROM "public"."Registration" WHERE 1=1 ORDER BY "public"."Registration"."createdAt" DESC OFFSET $1
 GET /api/registrations 200 in 251ms
 GET /api/events 200 in 252ms
prisma:query SELECT "public"."Event"."id", "public"."Event"."title", "public"."Event"."description", "public"."Event"."date", "public"."Event"."time", "public"."Event"."location", "public"."Event"."capacity", "public"."Event"."price", "public"."Event"."speakers", "public"."Event"."requirements", "public"."Event"."agenda", "public"."Event"."image", "public"."Event"."category", "public"."Event"."status", "public"."Event"."registrationsCount", "public"."Event"."actualParticipants", "public"."Event"."createdAt", "public"."Event"."updatedAt" FROM "public"."Event" WHERE 1=1 ORDER BY "public"."Event"."createdAt" ASC OFFSET $1
prisma:query SELECT "public"."Registration"."id", "public"."Registration"."eventId" FROM "public"."Registration" WHERE ("public"."Registration"."status" <> $1 AND "public"."Registration"."eventId" IN ($2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13)) OFFSET $14
prisma:query SELECT "public"."Registration"."id", "public"."Registration"."eventId", "public"."Registration"."fullName", "public"."Registration"."email", "public"."Registration"."phone", "public"."Registration"."organization", "public"."Registration"."experience", "public"."Registration"."expectation", "public"."Registration"."status", "public"."Registration"."createdAt", "public"."Registration"."updatedAt" FROM "public"."Registration" WHERE 1=1 ORDER BY "public"."Registration"."createdAt" DESC OFFSET $1
 GET /api/registrations 200 in 257ms
prisma:query SELECT "public"."Event"."id", "public"."Event"."title", "public"."Event"."description", "public"."Event"."date", "public"."Event"."time", "public"."Event"."location", "public"."Event"."capacity", "public"."Event"."price", "public"."Event"."speakers", "public"."Event"."requirements", "public"."Event"."agenda", "public"."Event"."image", "public"."Event"."category", "public"."Event"."status", "public"."Event"."registrationsCount", "public"."Event"."actualParticipants", "public"."Event"."createdAt", "public"."Event"."updatedAt" FROM "public"."Event" WHERE 1=1 ORDER BY "public"."Event"."createdAt" ASC OFFSET $1
prisma:query SELECT "public"."Registration"."id", "public"."Registration"."eventId" FROM "public"."Registration" WHERE ("public"."Registration"."status" <> $1 AND "public"."Registration"."eventId" IN ($2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13)) OFFSET $14
 GET /api/events 200 in 258ms
prisma:query SELECT "public"."Event"."id", "public"."Event"."title", "public"."Event"."description", "public"."Event"."date", "public"."Event"."time", "public"."Event"."location", "public"."Event"."capacity", "public"."Event"."price", "public"."Event"."speakers", "public"."Event"."requirements", "public"."Event"."agenda", "public"."Event"."image", "public"."Event"."category", "public"."Event"."status", "public"."Event"."registrationsCount", "public"."Event"."actualParticipants", "public"."Event"."createdAt", "public"."Event"."updatedAt" FROM "public"."Event" WHERE 1=1 ORDER BY "public"."Event"."createdAt" ASC OFFSET $1
prisma:query SELECT "public"."Registration"."id", "public"."Registration"."eventId" FROM "public"."Registration" WHERE ("public"."Registration"."status" <> $1 AND "public"."Registration"."eventId" IN ($2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13)) OFFSET $14
 GET /api/events 200 in 241ms
prisma:query SELECT "public"."Event"."id", "public"."Event"."title", "public"."Event"."description", "public"."Event"."date", "public"."Event"."time", "public"."Event"."location", "public"."Event"."capacity", "public"."Event"."price", "public"."Event"."speakers", "public"."Event"."requirements", "public"."Event"."agenda", "public"."Event"."image", "public"."Event"."category", "public"."Event"."status", "public"."Event"."registrationsCount", "public"."Event"."actualParticipants", "public"."Event"."createdAt", "public"."Event"."updatedAt" FROM "public"."Event" WHERE 1=1 ORDER BY "public"."Event"."createdAt" ASC OFFSET $1
prisma:query SELECT "public"."Registration"."id", "public"."Registration"."eventId" FROM "public"."Registration" WHERE ("public"."Registration"."status" <> $1 AND "public"."Registration"."eventId" IN ($2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13)) OFFSET $14
 GET /api/events 200 in 242ms
prisma:query SELECT 1
prisma:query SELECT "public"."Registration"."id", "public"."Registration"."eventId", "public"."Registration"."fullName", "public"."Registration"."email", "public"."Registration"."phone", "public"."Registration"."organization", "public"."Registration"."experience", "public"."Registration"."expectation", "public"."Registration"."status", "public"."Registration"."createdAt", "public"."Registration"."updatedAt" FROM "public"."Registration" WHERE 1=1 ORDER BY "public"."Registration"."createdAt" DESC OFFSET $1
 GET /api/registrations 200 in 248ms
prisma:query SELECT 1
prisma:query SELECT "public"."Event"."id", "public"."Event"."title", "public"."Event"."description", "public"."Event"."date", "public"."Event"."time", "public"."Event"."location", "public"."Event"."capacity", "public"."Event"."price", "public"."Event"."speakers", "public"."Event"."requirements", "public"."Event"."agenda", "public"."Event"."image", "public"."Event"."category", "public"."Event"."status", "public"."Event"."registrationsCount", "public"."Event"."actualParticipants", "public"."Event"."createdAt", "public"."Event"."updatedAt" FROM "public"."Event" WHERE 1=1 ORDER BY "public"."Event"."createdAt" ASC OFFSET $1
prisma:query SELECT "public"."Registration"."id", "public"."Registration"."eventId" FROM "public"."Registration" WHERE ("public"."Registration"."status" <> $1 AND "public"."Registration"."eventId" IN ($2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13)) OFFSET $14
 GET /api/events 200 in 251ms
prisma:query SELECT "public"."Registration"."id", "public"."Registration"."eventId", "public"."Registration"."fullName", "public"."Registration"."email", "public"."Registration"."phone", "public"."Registration"."organization", "public"."Registration"."experience", "public"."Registration"."expectation", "public"."Registration"."status", "public"."Registration"."createdAt", "public"."Registration"."updatedAt" FROM "public"."Registration" WHERE 1=1 ORDER BY "public"."Registration"."createdAt" DESC OFFSET $1
 GET /api/registrations 200 in 269ms
 GET /api/events 200 in 269ms
prisma:query SELECT "public"."Event"."id", "public"."Event"."title", "public"."Event"."description", "public"."Event"."date", "public"."Event"."time", "public"."Event"."location", "public"."Event"."capacity", "public"."Event"."price", "public"."Event"."speakers", "public"."Event"."requirements", "public"."Event"."agenda", "public"."Event"."image", "public"."Event"."category", "public"."Event"."status", "public"."Event"."registrationsCount", "public"."Event"."actualParticipants", "public"."Event"."createdAt", "public"."Event"."updatedAt" FROM "public"."Event" WHERE 1=1 ORDER BY "public"."Event"."createdAt" ASC OFFSET $1
prisma:query SELECT "public"."Registration"."id", "public"."Registration"."eventId" FROM "public"."Registration" WHERE ("public"."Registration"."status" <> $1 AND "public"."Registration"."eventId" IN ($2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13)) OFFSET $14
prisma:query SELECT "public"."Contact"."id", "public"."Contact"."name", "public"."Contact"."email", "public"."Contact"."phone", "public"."Contact"."company", "public"."Contact"."role", "public"."Contact"."message", "public"."Contact"."type", "public"."Contact"."status", "public"."Contact"."priority", "public"."Contact"."notes", "public"."Contact"."createdAt", "public"."Contact"."updatedAt" FROM "public"."Contact" WHERE 1=1 ORDER BY "public"."Contact"."createdAt" DESC OFFSET $1
 GET /api/contacts 200 in 248ms
prisma:query SELECT "public"."Contact"."id", "public"."Contact"."name", "public"."Contact"."email", "public"."Contact"."phone", "public"."Contact"."company", "public"."Contact"."role", "public"."Contact"."message", "public"."Contact"."type", "public"."Contact"."status", "public"."Contact"."priority", "public"."Contact"."notes", "public"."Contact"."createdAt", "public"."Contact"."updatedAt" FROM "public"."Contact" WHERE 1=1 ORDER BY "public"."Contact"."createdAt" DESC OFFSET $1
 GET /api/contacts 200 in 235ms
prisma:query SELECT "public"."Registration"."id", "public"."Registration"."eventId", "public"."Registration"."fullName", "public"."Registration"."email", "public"."Registration"."phone", "public"."Registration"."organization", "public"."Registration"."experience", "public"."Registration"."expectation", "public"."Registration"."status", "public"."Registration"."createdAt", "public"."Registration"."updatedAt" FROM "public"."Registration" WHERE 1=1 ORDER BY "public"."Registration"."createdAt" DESC OFFSET $1
 GET /api/registrations 200 in 259ms
 GET /api/events 200 in 261ms
prisma:query SELECT "public"."Event"."id", "public"."Event"."title", "public"."Event"."description", "public"."Event"."date", "public"."Event"."time", "public"."Event"."location", "public"."Event"."capacity", "public"."Event"."price", "public"."Event"."speakers", "public"."Event"."requirements", "public"."Event"."agenda", "public"."Event"."image", "public"."Event"."category", "public"."Event"."status", "public"."Event"."registrationsCount", "public"."Event"."actualParticipants", "public"."Event"."createdAt", "public"."Event"."updatedAt" FROM "public"."Event" WHERE 1=1 ORDER BY "public"."Event"."createdAt" ASC OFFSET $1
prisma:query SELECT "public"."Registration"."id", "public"."Registration"."eventId" FROM "public"."Registration" WHERE ("public"."Registration"."status" <> $1 AND "public"."Registration"."eventId" IN ($2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13)) OFFSET $14
prisma:query SELECT "public"."Registration"."id", "public"."Registration"."eventId", "public"."Registration"."fullName", "public"."Registration"."email", "public"."Registration"."phone", "public"."Registration"."organization", "public"."Registration"."experience", "public"."Registration"."expectation", "public"."Registration"."status", "public"."Registration"."createdAt", "public"."Registration"."updatedAt" FROM "public"."Registration" WHERE 1=1 ORDER BY "public"."Registration"."createdAt" DESC OFFSET $1
 GET /api/registrations 200 in 256ms
prisma:query SELECT "public"."Event"."id", "public"."Event"."title", "public"."Event"."description", "public"."Event"."date", "public"."Event"."time", "public"."Event"."location", "public"."Event"."capacity", "public"."Event"."price", "public"."Event"."speakers", "public"."Event"."requirements", "public"."Event"."agenda", "public"."Event"."image", "public"."Event"."category", "public"."Event"."status", "public"."Event"."registrationsCount", "public"."Event"."actualParticipants", "public"."Event"."createdAt", "public"."Event"."updatedAt" FROM "public"."Event" WHERE 1=1 ORDER BY "public"."Event"."createdAt" ASC OFFSET $1
prisma:query SELECT "public"."Registration"."id", "public"."Registration"."eventId" FROM "public"."Registration" WHERE ("public"."Registration"."status" <> $1 AND "public"."Registration"."eventId" IN ($2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13)) OFFSET $14
 GET /api/events 200 in 257ms
prisma:query SELECT "public"."Event"."id", "public"."Event"."title", "public"."Event"."description", "public"."Event"."date", "public"."Event"."time", "public"."Event"."location", "public"."Event"."capacity", "public"."Event"."price", "public"."Event"."speakers", "public"."Event"."requirements", "public"."Event"."agenda", "public"."Event"."image", "public"."Event"."category", "public"."Event"."status", "public"."Event"."registrationsCount", "public"."Event"."actualParticipants", "public"."Event"."createdAt", "public"."Event"."updatedAt" FROM "public"."Event" WHERE 1=1 ORDER BY "public"."Event"."createdAt" ASC OFFSET $1
prisma:query SELECT "public"."Registration"."id", "public"."Registration"."eventId" FROM "public"."Registration" WHERE ("public"."Registration"."status" <> $1 AND "public"."Registration"."eventId" IN ($2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13)) OFFSET $14
 GET /api/events 200 in 248ms
prisma:query SELECT "public"."Event"."id", "public"."Event"."title", "public"."Event"."description", "public"."Event"."date", "public"."Event"."time", "public"."Event"."location", "public"."Event"."capacity", "public"."Event"."price", "public"."Event"."speakers", "public"."Event"."requirements", "public"."Event"."agenda", "public"."Event"."image", "public"."Event"."category", "public"."Event"."status", "public"."Event"."registrationsCount", "public"."Event"."actualParticipants", "public"."Event"."createdAt", "public"."Event"."updatedAt" FROM "public"."Event" WHERE 1=1 ORDER BY "public"."Event"."createdAt" ASC OFFSET $1
prisma:query SELECT "public"."Registration"."id", "public"."Registration"."eventId" FROM "public"."Registration" WHERE ("public"."Registration"."status" <> $1 AND "public"."Registration"."eventId" IN ($2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13)) OFFSET $14
 GET /api/events 200 in 250ms
 GET /admin 200 in 86ms
prisma:query SELECT 1
prisma:query SELECT 1
prisma:query SELECT COUNT(*) FROM (SELECT "public"."Registration"."id" FROM "public"."Registration" WHERE "public"."Registration"."status" <> $1 OFFSET $2) AS "sub"
prisma:query SELECT COUNT(*) FROM (SELECT "public"."Event"."id" FROM "public"."Event" WHERE 1=1 OFFSET $1) AS "sub"
prisma:query SELECT "public"."News"."id", "public"."News"."title", "public"."News"."content", "public"."News"."excerpt", "public"."News"."author", "public"."News"."source", "public"."News"."category", "public"."News"."importance", "public"."News"."published", "public"."News"."publishedAt", "public"."News"."image", "public"."News"."tags", "public"."News"."link", "public"."News"."createdAt", "public"."News"."updatedAt" FROM "public"."News" WHERE 1=1 ORDER BY "public"."News"."createdAt" DESC OFFSET $1
prisma:query SELECT "public"."Contact"."id", "public"."Contact"."name", "public"."Contact"."email", "public"."Contact"."phone", "public"."Contact"."company", "public"."Contact"."role", "public"."Contact"."message", "public"."Contact"."type", "public"."Contact"."status", "public"."Contact"."priority", "public"."Contact"."notes", "public"."Contact"."createdAt", "public"."Contact"."updatedAt" FROM "public"."Contact" WHERE 1=1 ORDER BY "public"."Contact"."createdAt" DESC OFFSET $1
prisma:query SELECT COUNT(*) FROM (SELECT "public"."Event"."id" FROM "public"."Event" WHERE "public"."Event"."status" = $1 OFFSET $2) AS "sub"
prisma:query SELECT COUNT(*) FROM (SELECT "public"."Contact"."id" FROM "public"."Contact" WHERE 1=1 OFFSET $1) AS "sub"
prisma:query SELECT COUNT(*) FROM (SELECT "public"."News"."id" FROM "public"."News" WHERE "public"."News"."published" = $1 OFFSET $2) AS "sub"
prisma:query SELECT COUNT(*) FROM (SELECT "public"."User"."id" FROM "public"."User" WHERE "public"."User"."status" = $1 OFFSET $2) AS "sub"
prisma:query SELECT COUNT(*) FROM (SELECT "public"."Contact"."id" FROM "public"."Contact" WHERE "public"."Contact"."status" = $1 OFFSET $2) AS "sub"
prisma:query SELECT COUNT(*) FROM (SELECT "public"."News"."id" FROM "public"."News" WHERE 1=1 OFFSET $1) AS "sub"
prisma:query SELECT COUNT(*) FROM (SELECT "public"."User"."id" FROM "public"."User" WHERE 1=1 OFFSET $1) AS "sub"
 GET /api/stats 200 in 351ms
 GET /api/news 200 in 347ms
 GET /api/contacts 200 in 350ms
 GET /api/events 200 in 357ms
prisma:query SELECT "public"."Event"."id", "public"."Event"."title", "public"."Event"."description", "public"."Event"."date", "public"."Event"."time", "public"."Event"."location", "public"."Event"."capacity", "public"."Event"."price", "public"."Event"."speakers", "public"."Event"."requirements", "public"."Event"."agenda", "public"."Event"."image", "public"."Event"."category", "public"."Event"."status", "public"."Event"."registrationsCount", "public"."Event"."actualParticipants", "public"."Event"."createdAt", "public"."Event"."updatedAt" FROM "public"."Event" WHERE 1=1 ORDER BY "public"."Event"."createdAt" ASC OFFSET $1
prisma:query SELECT COUNT(*) FROM (SELECT "public"."News"."id" FROM "public"."News" WHERE "public"."News"."published" = $1 OFFSET $2) AS "sub"
prisma:query SELECT COUNT(*) FROM (SELECT "public"."Contact"."id" FROM "public"."Contact" WHERE 1=1 OFFSET $1) AS "sub"
prisma:query SELECT COUNT(*) FROM (SELECT "public"."Event"."id" FROM "public"."Event" WHERE 1=1 OFFSET $1) AS "sub"
prisma:query SELECT COUNT(*) FROM (SELECT "public"."Event"."id" FROM "public"."Event" WHERE "public"."Event"."status" = $1 OFFSET $2) AS "sub"
prisma:query SELECT COUNT(*) FROM (SELECT "public"."Registration"."id" FROM "public"."Registration" WHERE "public"."Registration"."status" <> $1 OFFSET $2) AS "sub"
prisma:query SELECT COUNT(*) FROM (SELECT "public"."News"."id" FROM "public"."News" WHERE 1=1 OFFSET $1) AS "sub"
prisma:query SELECT COUNT(*) FROM (SELECT "public"."User"."id" FROM "public"."User" WHERE 1=1 OFFSET $1) AS "sub"
prisma:query SELECT COUNT(*) FROM (SELECT "public"."Contact"."id" FROM "public"."Contact" WHERE "public"."Contact"."status" = $1 OFFSET $2) AS "sub"
prisma:query SELECT COUNT(*) FROM (SELECT "public"."User"."id" FROM "public"."User" WHERE "public"."User"."status" = $1 OFFSET $2) AS "sub"
prisma:query SELECT "public"."Contact"."id", "public"."Contact"."name", "public"."Contact"."email", "public"."Contact"."phone", "public"."Contact"."company", "public"."Contact"."role", "public"."Contact"."message", "public"."Contact"."type", "public"."Contact"."status", "public"."Contact"."priority", "public"."Contact"."notes", "public"."Contact"."createdAt", "public"."Contact"."updatedAt" FROM "public"."Contact" WHERE 1=1 ORDER BY "public"."Contact"."createdAt" DESC OFFSET $1
 GET /api/stats 200 in 289ms
 GET /api/contacts 200 in 291ms
 GET /api/news 200 in 293ms
prisma:query SELECT "public"."News"."id", "public"."News"."title", "public"."News"."content", "public"."News"."excerpt", "public"."News"."author", "public"."News"."source", "public"."News"."category", "public"."News"."importance", "public"."News"."published", "public"."News"."publishedAt", "public"."News"."image", "public"."News"."tags", "public"."News"."link", "public"."News"."createdAt", "public"."News"."updatedAt" FROM "public"."News" WHERE 1=1 ORDER BY "public"."News"."createdAt" DESC OFFSET $1
prisma:query SELECT "public"."Event"."id", "public"."Event"."title", "public"."Event"."description", "public"."Event"."date", "public"."Event"."time", "public"."Event"."location", "public"."Event"."capacity", "public"."Event"."price", "public"."Event"."speakers", "public"."Event"."requirements", "public"."Event"."agenda", "public"."Event"."image", "public"."Event"."category", "public"."Event"."status", "public"."Event"."registrationsCount", "public"."Event"."actualParticipants", "public"."Event"."createdAt", "public"."Event"."updatedAt" FROM "public"."Event" WHERE 1=1 ORDER BY "public"."Event"."createdAt" ASC OFFSET $1
 GET /api/events 200 in 304ms
 GET /favicon.ico?favicon.0b3bf435.ico 200 in 251ms
prisma:query SELECT "public"."Event"."id", "public"."Event"."title", "public"."Event"."description", "public"."Event"."date", "public"."Event"."time", "public"."Event"."location", "public"."Event"."capacity", "public"."Event"."price", "public"."Event"."speakers", "public"."Event"."requirements", "public"."Event"."agenda", "public"."Event"."image", "public"."Event"."category", "public"."Event"."status", "public"."Event"."registrationsCount", "public"."Event"."actualParticipants", "public"."Event"."createdAt", "public"."Event"."updatedAt" FROM "public"."Event" WHERE 1=1 ORDER BY "public"."Event"."createdAt" ASC OFFSET $1
 GET /api/events 200 in 258ms
prisma:query SELECT "public"."Event"."id", "public"."Event"."title", "public"."Event"."description", "public"."Event"."date", "public"."Event"."time", "public"."Event"."location", "public"."Event"."capacity", "public"."Event"."price", "public"."Event"."speakers", "public"."Event"."requirements", "public"."Event"."agenda", "public"."Event"."image", "public"."Event"."category", "public"."Event"."status", "public"."Event"."registrationsCount", "public"."Event"."actualParticipants", "public"."Event"."createdAt", "public"."Event"."updatedAt" FROM "public"."Event" WHERE 1=1 ORDER BY "public"."Event"."createdAt" ASC OFFSET $1
 GET /api/events 200 in 243ms
prisma:query SELECT "public"."Event"."id", "public"."Event"."title", "public"."Event"."description", "public"."Event"."date", "public"."Event"."time", "public"."Event"."location", "public"."Event"."capacity", "public"."Event"."price", "public"."Event"."speakers", "public"."Event"."requirements", "public"."Event"."agenda", "public"."Event"."image", "public"."Event"."category", "public"."Event"."status", "public"."Event"."registrationsCount", "public"."Event"."actualParticipants", "public"."Event"."createdAt", "public"."Event"."updatedAt" FROM "public"."Event" WHERE 1=1 ORDER BY "public"."Event"."createdAt" ASC OFFSET $1
 GET /api/events 200 in 264ms
 GET /api/registrations 200 in 263ms
prisma:query SELECT "public"."Registration"."id", "public"."Registration"."eventId", "public"."Registration"."fullName", "public"."Registration"."email", "public"."Registration"."phone", "public"."Registration"."organization", "public"."Registration"."experience", "public"."Registration"."expectation", "public"."Registration"."status", "public"."Registration"."createdAt", "public"."Registration"."updatedAt" FROM "public"."Registration" WHERE 1=1 ORDER BY "public"."Registration"."createdAt" DESC OFFSET $1
prisma:query SELECT "public"."Event"."id", "public"."Event"."title", "public"."Event"."description", "public"."Event"."date", "public"."Event"."time", "public"."Event"."location", "public"."Event"."capacity", "public"."Event"."price", "public"."Event"."speakers", "public"."Event"."requirements", "public"."Event"."agenda", "public"."Event"."image", "public"."Event"."category", "public"."Event"."status", "public"."Event"."registrationsCount", "public"."Event"."actualParticipants", "public"."Event"."createdAt", "public"."Event"."updatedAt" FROM "public"."Event" WHERE 1=1 ORDER BY "public"."Event"."createdAt" ASC OFFSET $1
 GET /api/events 200 in 246ms
 GET /api/registrations 200 in 249ms
prisma:query SELECT "public"."Registration"."id", "public"."Registration"."eventId", "public"."Registration"."fullName", "public"."Registration"."email", "public"."Registration"."phone", "public"."Registration"."organization", "public"."Registration"."experience", "public"."Registration"."expectation", "public"."Registration"."status", "public"."Registration"."createdAt", "public"."Registration"."updatedAt" FROM "public"."Registration" WHERE 1=1 ORDER BY "public"."Registration"."createdAt" DESC OFFSET $1
prisma:query SELECT "public"."Contact"."id", "public"."Contact"."name", "public"."Contact"."email", "public"."Contact"."phone", "public"."Contact"."company", "public"."Contact"."role", "public"."Contact"."message", "public"."Contact"."type", "public"."Contact"."status", "public"."Contact"."priority", "public"."Contact"."notes", "public"."Contact"."createdAt", "public"."Contact"."updatedAt" FROM "public"."Contact" WHERE 1=1 ORDER BY "public"."Contact"."createdAt" DESC OFFSET $1
 GET /api/contacts 200 in 241ms
prisma:query SELECT "public"."Contact"."id", "public"."Contact"."name", "public"."Contact"."email", "public"."Contact"."phone", "public"."Contact"."company", "public"."Contact"."role", "public"."Contact"."message", "public"."Contact"."type", "public"."Contact"."status", "public"."Contact"."priority", "public"."Contact"."notes", "public"."Contact"."createdAt", "public"."Contact"."updatedAt" FROM "public"."Contact" WHERE 1=1 ORDER BY "public"."Contact"."createdAt" DESC OFFSET $1
 GET /api/contacts 200 in 238ms
prisma:query SELECT "public"."Contact"."id", "public"."Contact"."name", "public"."Contact"."email", "public"."Contact"."phone", "public"."Contact"."company", "public"."Contact"."role", "public"."Contact"."message", "public"."Contact"."type", "public"."Contact"."status", "public"."Contact"."priority", "public"."Contact"."notes", "public"."Contact"."createdAt", "public"."Contact"."updatedAt" FROM "public"."Contact" WHERE 1=1 ORDER BY "public"."Contact"."createdAt" DESC OFFSET $1
 GET /api/contacts 200 in 265ms
prisma:query SELECT "public"."Contact"."id", "public"."Contact"."name", "public"."Contact"."email", "public"."Contact"."phone", "public"."Contact"."company", "public"."Contact"."role", "public"."Contact"."message", "public"."Contact"."type", "public"."Contact"."status", "public"."Contact"."priority", "public"."Contact"."notes", "public"."Contact"."createdAt", "public"."Contact"."updatedAt" FROM "public"."Contact" WHERE 1=1 ORDER BY "public"."Contact"."createdAt" DESC OFFSET $1
 GET /api/contacts 200 in 247ms
prisma:query SELECT "public"."Contact"."id", "public"."Contact"."name", "public"."Contact"."email", "public"."Contact"."phone", "public"."Contact"."company", "public"."Contact"."role", "public"."Contact"."message", "public"."Contact"."type", "public"."Contact"."status", "public"."Contact"."priority", "public"."Contact"."notes", "public"."Contact"."createdAt", "public"."Contact"."updatedAt" FROM "public"."Contact" WHERE 1=1 ORDER BY "public"."Contact"."createdAt" DESC OFFSET $1
 GET /api/contacts 200 in 271ms
prisma:query SELECT "public"."Contact"."id", "public"."Contact"."name", "public"."Contact"."email", "public"."Contact"."phone", "public"."Contact"."company", "public"."Contact"."role", "public"."Contact"."message", "public"."Contact"."type", "public"."Contact"."status", "public"."Contact"."priority", "public"."Contact"."notes", "public"."Contact"."createdAt", "public"."Contact"."updatedAt" FROM "public"."Contact" WHERE 1=1 ORDER BY "public"."Contact"."createdAt" DESC OFFSET $1
 GET /api/contacts 200 in 236ms
prisma:query SELECT 1
prisma:query SELECT "public"."Contact"."id", "public"."Contact"."name", "public"."Contact"."email", "public"."Contact"."phone", "public"."Contact"."company", "public"."Contact"."role", "public"."Contact"."message", "public"."Contact"."type", "public"."Contact"."status", "public"."Contact"."priority", "public"."Contact"."notes", "public"."Contact"."createdAt", "public"."Contact"."updatedAt" FROM "public"."Contact" WHERE 1=1 ORDER BY "public"."Contact"."createdAt" DESC OFFSET $1
 GET /api/contacts 200 in 241ms
prisma:query SELECT "public"."Contact"."id", "public"."Contact"."name", "public"."Contact"."email", "public"."Contact"."phone", "public"."Contact"."company", "public"."Contact"."role", "public"."Contact"."message", "public"."Contact"."type", "public"."Contact"."status", "public"."Contact"."priority", "public"."Contact"."notes", "public"."Contact"."createdAt", "public"."Contact"."updatedAt" FROM "public"."Contact" WHERE 1=1 ORDER BY "public"."Contact"."createdAt" DESC OFFSET $1
 GET /api/contacts 200 in 242ms
prisma:query SELECT "public"."Event"."id", "public"."Event"."title", "public"."Event"."description", "public"."Event"."date", "public"."Event"."time", "public"."Event"."location", "public"."Event"."capacity", "public"."Event"."price", "public"."Event"."speakers", "public"."Event"."requirements", "public"."Event"."agenda", "public"."Event"."image", "public"."Event"."category", "public"."Event"."status", "public"."Event"."registrationsCount", "public"."Event"."actualParticipants", "public"."Event"."createdAt", "public"."Event"."updatedAt" FROM "public"."Event" WHERE 1=1 ORDER BY "public"."Event"."createdAt" ASC OFFSET $1
 GET /api/events 200 in 252ms
 GET /api/registrations 200 in 253ms
prisma:query SELECT "public"."Registration"."id", "public"."Registration"."eventId", "public"."Registration"."fullName", "public"."Registration"."email", "public"."Registration"."phone", "public"."Registration"."organization", "public"."Registration"."experience", "public"."Registration"."expectation", "public"."Registration"."status", "public"."Registration"."createdAt", "public"."Registration"."updatedAt" FROM "public"."Registration" WHERE 1=1 ORDER BY "public"."Registration"."createdAt" DESC OFFSET $1
prisma:query SELECT "public"."Registration"."id", "public"."Registration"."eventId", "public"."Registration"."fullName", "public"."Registration"."email", "public"."Registration"."phone", "public"."Registration"."organization", "public"."Registration"."experience", "public"."Registration"."expectation", "public"."Registration"."status", "public"."Registration"."createdAt", "public"."Registration"."updatedAt" FROM "public"."Registration" WHERE 1=1 ORDER BY "public"."Registration"."createdAt" DESC OFFSET $1
 GET /api/registrations 200 in 251ms
 GET /api/events 200 in 250ms
prisma:query SELECT "public"."Event"."id", "public"."Event"."title", "public"."Event"."description", "public"."Event"."date", "public"."Event"."time", "public"."Event"."location", "public"."Event"."capacity", "public"."Event"."price", "public"."Event"."speakers", "public"."Event"."requirements", "public"."Event"."agenda", "public"."Event"."image", "public"."Event"."category", "public"."Event"."status", "public"."Event"."registrationsCount", "public"."Event"."actualParticipants", "public"."Event"."createdAt", "public"."Event"."updatedAt" FROM "public"."Event" WHERE 1=1 ORDER BY "public"."Event"."createdAt" ASC OFFSET $1
prisma:query SELECT "public"."Event"."id", "public"."Event"."title", "public"."Event"."description", "public"."Event"."date", "public"."Event"."time", "public"."Event"."location", "public"."Event"."capacity", "public"."Event"."price", "public"."Event"."speakers", "public"."Event"."requirements", "public"."Event"."agenda", "public"."Event"."image", "public"."Event"."category", "public"."Event"."status", "public"."Event"."registrationsCount", "public"."Event"."actualParticipants", "public"."Event"."createdAt", "public"."Event"."updatedAt" FROM "public"."Event" WHERE 1=1 ORDER BY "public"."Event"."createdAt" ASC OFFSET $1
 GET /api/events 200 in 244ms
prisma:query SELECT "public"."Event"."id", "public"."Event"."title", "public"."Event"."description", "public"."Event"."date", "public"."Event"."time", "public"."Event"."location", "public"."Event"."capacity", "public"."Event"."price", "public"."Event"."speakers", "public"."Event"."requirements", "public"."Event"."agenda", "public"."Event"."image", "public"."Event"."category", "public"."Event"."status", "public"."Event"."registrationsCount", "public"."Event"."actualParticipants", "public"."Event"."createdAt", "public"."Event"."updatedAt" FROM "public"."Event" WHERE 1=1 ORDER BY "public"."Event"."createdAt" ASC OFFSET $1
 GET /api/events 200 in 235ms
prisma:query SELECT "public"."Registration"."id", "public"."Registration"."eventId", "public"."Registration"."fullName", "public"."Registration"."email", "public"."Registration"."phone", "public"."Registration"."organization", "public"."Registration"."experience", "public"."Registration"."expectation", "public"."Registration"."status", "public"."Registration"."createdAt", "public"."Registration"."updatedAt" FROM "public"."Registration" WHERE 1=1 ORDER BY "public"."Registration"."createdAt" DESC OFFSET $1
 GET /api/registrations 200 in 243ms
 GET /api/events 200 in 245ms
prisma:query SELECT "public"."Event"."id", "public"."Event"."title", "public"."Event"."description", "public"."Event"."date", "public"."Event"."time", "public"."Event"."location", "public"."Event"."capacity", "public"."Event"."price", "public"."Event"."speakers", "public"."Event"."requirements", "public"."Event"."agenda", "public"."Event"."image", "public"."Event"."category", "public"."Event"."status", "public"."Event"."registrationsCount", "public"."Event"."actualParticipants", "public"."Event"."createdAt", "public"."Event"."updatedAt" FROM "public"."Event" WHERE 1=1 ORDER BY "public"."Event"."createdAt" ASC OFFSET $1
prisma:query SELECT "public"."Registration"."id", "public"."Registration"."eventId", "public"."Registration"."fullName", "public"."Registration"."email", "public"."Registration"."phone", "public"."Registration"."organization", "public"."Registration"."experience", "public"."Registration"."expectation", "public"."Registration"."status", "public"."Registration"."createdAt", "public"."Registration"."updatedAt" FROM "public"."Registration" WHERE 1=1 ORDER BY "public"."Registration"."createdAt" DESC OFFSET $1
 GET /api/registrations 200 in 244ms
 GET /api/events 200 in 246ms
prisma:query SELECT "public"."Event"."id", "public"."Event"."title", "public"."Event"."description", "public"."Event"."date", "public"."Event"."time", "public"."Event"."location", "public"."Event"."capacity", "public"."Event"."price", "public"."Event"."speakers", "public"."Event"."requirements", "public"."Event"."agenda", "public"."Event"."image", "public"."Event"."category", "public"."Event"."status", "public"."Event"."registrationsCount", "public"."Event"."actualParticipants", "public"."Event"."createdAt", "public"."Event"."updatedAt" FROM "public"."Event" WHERE 1=1 ORDER BY "public"."Event"."createdAt" ASC OFFSET $1
prisma:query SELECT "public"."Event"."id", "public"."Event"."title", "public"."Event"."description", "public"."Event"."date", "public"."Event"."time", "public"."Event"."location", "public"."Event"."capacity", "public"."Event"."price", "public"."Event"."speakers", "public"."Event"."requirements", "public"."Event"."agenda", "public"."Event"."image", "public"."Event"."category", "public"."Event"."status", "public"."Event"."registrationsCount", "public"."Event"."actualParticipants", "public"."Event"."createdAt", "public"."Event"."updatedAt" FROM "public"."Event" WHERE 1=1 ORDER BY "public"."Event"."createdAt" ASC OFFSET $1
 GET /api/events 200 in 240ms
prisma:query SELECT "public"."Event"."id", "public"."Event"."title", "public"."Event"."description", "public"."Event"."date", "public"."Event"."time", "public"."Event"."location", "public"."Event"."capacity", "public"."Event"."price", "public"."Event"."speakers", "public"."Event"."requirements", "public"."Event"."agenda", "public"."Event"."image", "public"."Event"."category", "public"."Event"."status", "public"."Event"."registrationsCount", "public"."Event"."actualParticipants", "public"."Event"."createdAt", "public"."Event"."updatedAt" FROM "public"."Event" WHERE 1=1 ORDER BY "public"."Event"."createdAt" ASC OFFSET $1
 GET /api/events 200 in 240ms
prisma:query SELECT 1
prisma:query SELECT "public"."Contact"."id", "public"."Contact"."name", "public"."Contact"."email", "public"."Contact"."phone", "public"."Contact"."company", "public"."Contact"."role", "public"."Contact"."message", "public"."Contact"."type", "public"."Contact"."status", "public"."Contact"."priority", "public"."Contact"."notes", "public"."Contact"."createdAt", "public"."Contact"."updatedAt" FROM "public"."Contact" WHERE 1=1 ORDER BY "public"."Contact"."createdAt" DESC OFFSET $1
 GET /api/contacts 200 in 276ms
prisma:query SELECT "public"."Contact"."id", "public"."Contact"."name", "public"."Contact"."email", "public"."Contact"."phone", "public"."Contact"."company", "public"."Contact"."role", "public"."Contact"."message", "public"."Contact"."type", "public"."Contact"."status", "public"."Contact"."priority", "public"."Contact"."notes", "public"."Contact"."createdAt", "public"."Contact"."updatedAt" FROM "public"."Contact" WHERE 1=1 ORDER BY "public"."Contact"."createdAt" DESC OFFSET $1
 GET /api/contacts 200 in 257ms
prisma:query SELECT "public"."Registration"."id", "public"."Registration"."eventId", "public"."Registration"."fullName", "public"."Registration"."email", "public"."Registration"."phone", "public"."Registration"."organization", "public"."Registration"."experience", "public"."Registration"."expectation", "public"."Registration"."status", "public"."Registration"."createdAt", "public"."Registration"."updatedAt" FROM "public"."Registration" WHERE 1=1 ORDER BY "public"."Registration"."createdAt" DESC OFFSET $1
 GET /api/registrations 200 in 278ms
prisma:query SELECT "public"."Event"."id", "public"."Event"."title", "public"."Event"."description", "public"."Event"."date", "public"."Event"."time", "public"."Event"."location", "public"."Event"."capacity", "public"."Event"."price", "public"."Event"."speakers", "public"."Event"."requirements", "public"."Event"."agenda", "public"."Event"."image", "public"."Event"."category", "public"."Event"."status", "public"."Event"."registrationsCount", "public"."Event"."actualParticipants", "public"."Event"."createdAt", "public"."Event"."updatedAt" FROM "public"."Event" WHERE 1=1 ORDER BY "public"."Event"."createdAt" ASC OFFSET $1
 GET /api/events 200 in 285ms
prisma:query SELECT "public"."Registration"."id", "public"."Registration"."eventId", "public"."Registration"."fullName", "public"."Registration"."email", "public"."Registration"."phone", "public"."Registration"."organization", "public"."Registration"."experience", "public"."Registration"."expectation", "public"."Registration"."status", "public"."Registration"."createdAt", "public"."Registration"."updatedAt" FROM "public"."Registration" WHERE 1=1 ORDER BY "public"."Registration"."createdAt" DESC OFFSET $1
 GET /api/registrations 200 in 266ms
 GET /api/events 200 in 260ms
prisma:query SELECT "public"."Event"."id", "public"."Event"."title", "public"."Event"."description", "public"."Event"."date", "public"."Event"."time", "public"."Event"."location", "public"."Event"."capacity", "public"."Event"."price", "public"."Event"."speakers", "public"."Event"."requirements", "public"."Event"."agenda", "public"."Event"."image", "public"."Event"."category", "public"."Event"."status", "public"."Event"."registrationsCount", "public"."Event"."actualParticipants", "public"."Event"."createdAt", "public"."Event"."updatedAt" FROM "public"."Event" WHERE 1=1 ORDER BY "public"."Event"."createdAt" ASC OFFSET $1
prisma:query SELECT "public"."Event"."id", "public"."Event"."title", "public"."Event"."description", "public"."Event"."date", "public"."Event"."time", "public"."Event"."location", "public"."Event"."capacity", "public"."Event"."price", "public"."Event"."speakers", "public"."Event"."requirements", "public"."Event"."agenda", "public"."Event"."image", "public"."Event"."category", "public"."Event"."status", "public"."Event"."registrationsCount", "public"."Event"."actualParticipants", "public"."Event"."createdAt", "public"."Event"."updatedAt" FROM "public"."Event" WHERE 1=1 ORDER BY "public"."Event"."createdAt" ASC OFFSET $1
 GET /api/events 200 in 249ms
 GET /api/events 200 in 247ms
prisma:query SELECT "public"."Event"."id", "public"."Event"."title", "public"."Event"."description", "public"."Event"."date", "public"."Event"."time", "public"."Event"."location", "public"."Event"."capacity", "public"."Event"."price", "public"."Event"."speakers", "public"."Event"."requirements", "public"."Event"."agenda", "public"."Event"."image", "public"."Event"."category", "public"."Event"."status", "public"."Event"."registrationsCount", "public"."Event"."actualParticipants", "public"."Event"."createdAt", "public"."Event"."updatedAt" FROM "public"."Event" WHERE 1=1 ORDER BY "public"."Event"."createdAt" ASC OFFSET $1
prisma:query SELECT "public"."Registration"."id", "public"."Registration"."eventId", "public"."Registration"."fullName", "public"."Registration"."email", "public"."Registration"."phone", "public"."Registration"."organization", "public"."Registration"."experience", "public"."Registration"."expectation", "public"."Registration"."status", "public"."Registration"."createdAt", "public"."Registration"."updatedAt" FROM "public"."Registration" WHERE 1=1 ORDER BY "public"."Registration"."createdAt" DESC OFFSET $1
 GET /api/registrations 200 in 251ms
 GET /api/events 200 in 251ms
prisma:query SELECT "public"."Event"."id", "public"."Event"."title", "public"."Event"."description", "public"."Event"."date", "public"."Event"."time", "public"."Event"."location", "public"."Event"."capacity", "public"."Event"."price", "public"."Event"."speakers", "public"."Event"."requirements", "public"."Event"."agenda", "public"."Event"."image", "public"."Event"."category", "public"."Event"."status", "public"."Event"."registrationsCount", "public"."Event"."actualParticipants", "public"."Event"."createdAt", "public"."Event"."updatedAt" FROM "public"."Event" WHERE 1=1 ORDER BY "public"."Event"."createdAt" ASC OFFSET $1
prisma:query SELECT "public"."Registration"."id", "public"."Registration"."eventId", "public"."Registration"."fullName", "public"."Registration"."email", "public"."Registration"."phone", "public"."Registration"."organization", "public"."Registration"."experience", "public"."Registration"."expectation", "public"."Registration"."status", "public"."Registration"."createdAt", "public"."Registration"."updatedAt" FROM "public"."Registration" WHERE 1=1 ORDER BY "public"."Registration"."createdAt" DESC OFFSET $1
 GET /api/registrations 200 in 251ms
 GET /api/events 200 in 249ms
prisma:query SELECT "public"."Event"."id", "public"."Event"."title", "public"."Event"."description", "public"."Event"."date", "public"."Event"."time", "public"."Event"."location", "public"."Event"."capacity", "public"."Event"."price", "public"."Event"."speakers", "public"."Event"."requirements", "public"."Event"."agenda", "public"."Event"."image", "public"."Event"."category", "public"."Event"."status", "public"."Event"."registrationsCount", "public"."Event"."actualParticipants", "public"."Event"."createdAt", "public"."Event"."updatedAt" FROM "public"."Event" WHERE 1=1 ORDER BY "public"."Event"."createdAt" ASC OFFSET $1
prisma:query SELECT "public"."Contact"."id", "public"."Contact"."name", "public"."Contact"."email", "public"."Contact"."phone", "public"."Contact"."company", "public"."Contact"."role", "public"."Contact"."message", "public"."Contact"."type", "public"."Contact"."status", "public"."Contact"."priority", "public"."Contact"."notes", "public"."Contact"."createdAt", "public"."Contact"."updatedAt" FROM "public"."Contact" WHERE 1=1 ORDER BY "public"."Contact"."createdAt" DESC OFFSET $1
 GET /api/contacts 200 in 255ms
prisma:query SELECT "public"."Contact"."id", "public"."Contact"."name", "public"."Contact"."email", "public"."Contact"."phone", "public"."Contact"."company", "public"."Contact"."role", "public"."Contact"."message", "public"."Contact"."type", "public"."Contact"."status", "public"."Contact"."priority", "public"."Contact"."notes", "public"."Contact"."createdAt", "public"."Contact"."updatedAt" FROM "public"."Contact" WHERE 1=1 ORDER BY "public"."Contact"."createdAt" DESC OFFSET $1
 GET /api/contacts 200 in 261ms
prisma:query SELECT "public"."Contact"."id", "public"."Contact"."name", "public"."Contact"."email", "public"."Contact"."phone", "public"."Contact"."company", "public"."Contact"."role", "public"."Contact"."message", "public"."Contact"."type", "public"."Contact"."status", "public"."Contact"."priority", "public"."Contact"."notes", "public"."Contact"."createdAt", "public"."Contact"."updatedAt" FROM "public"."Contact" WHERE 1=1 ORDER BY "public"."Contact"."createdAt" DESC OFFSET $1
 GET /api/contacts 200 in 247ms
prisma:query SELECT "public"."Contact"."id", "public"."Contact"."name", "public"."Contact"."email", "public"."Contact"."phone", "public"."Contact"."company", "public"."Contact"."role", "public"."Contact"."message", "public"."Contact"."type", "public"."Contact"."status", "public"."Contact"."priority", "public"."Contact"."notes", "public"."Contact"."createdAt", "public"."Contact"."updatedAt" FROM "public"."Contact" WHERE 1=1 ORDER BY "public"."Contact"."createdAt" DESC OFFSET $1
 GET /api/contacts 200 in 240ms
prisma:query INSERT INTO "public"."Contact" ("id","name","email","phone","company","role","message","type","status","priority","notes","createdAt","updatedAt") VALUES ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13) RETURNING "public"."Contact"."id", "public"."Contact"."name", "public"."Contact"."email", "public"."Contact"."phone", "public"."Contact"."company", "public"."Contact"."role", "public"."Contact"."message", "public"."Contact"."type", "public"."Contact"."status", "public"."Contact"."priority", "public"."Contact"."notes", "public"."Contact"."createdAt", "public"."Contact"."updatedAt"
 POST /api/contacts 201 in 256ms
prisma:query SELECT 1
prisma:query SELECT "public"."Contact"."id", "public"."Contact"."name", "public"."Contact"."email", "public"."Contact"."phone", "public"."Contact"."company", "public"."Contact"."role", "public"."Contact"."message", "public"."Contact"."type", "public"."Contact"."status", "public"."Contact"."priority", "public"."Contact"."notes", "public"."Contact"."createdAt", "public"."Contact"."updatedAt" FROM "public"."Contact" WHERE 1=1 ORDER BY "public"."Contact"."createdAt" DESC OFFSET $1
 GET /api/contacts 200 in 242ms
prisma:query SELECT "public"."Contact"."id", "public"."Contact"."name", "public"."Contact"."email", "public"."Contact"."phone", "public"."Contact"."company", "public"."Contact"."role", "public"."Contact"."message", "public"."Contact"."type", "public"."Contact"."status", "public"."Contact"."priority", "public"."Contact"."notes", "public"."Contact"."createdAt", "public"."Contact"."updatedAt" FROM "public"."Contact" WHERE 1=1 ORDER BY "public"."Contact"."createdAt" DESC OFFSET $1
 GET /api/contacts 200 in 241ms
prisma:query UPDATE "public"."Contact" SET "status" = $1, "updatedAt" = $2 WHERE ("public"."Contact"."id" = $3 AND 1=1) RETURNING "public"."Contact"."id", "public"."Contact"."name", "public"."Contact"."email", "public"."Contact"."phone", "public"."Contact"."company", "public"."Contact"."role", "public"."Contact"."message", "public"."Contact"."type", "public"."Contact"."status", "public"."Contact"."priority", "public"."Contact"."notes", "public"."Contact"."createdAt", "public"."Contact"."updatedAt"
 PUT /api/contacts/cmfxnxdc20005562ox067xz65 200 in 256ms
 ✓ Compiled in 152ms
 GET / 200 in 111ms
prisma:query SELECT "public"."Event"."id", "public"."Event"."title", "public"."Event"."description", "public"."Event"."date", "public"."Event"."time", "public"."Event"."location", "public"."Event"."capacity", "public"."Event"."price", "public"."Event"."speakers", "public"."Event"."requirements", "public"."Event"."agenda", "public"."Event"."image", "public"."Event"."category", "public"."Event"."status", "public"."Event"."registrationsCount", "public"."Event"."actualParticipants", "public"."Event"."createdAt", "public"."Event"."updatedAt" FROM "public"."Event" WHERE 1=1 ORDER BY "public"."Event"."createdAt" ASC OFFSET $1
prisma:query SELECT "public"."Contact"."id", "public"."Contact"."name", "public"."Contact"."email", "public"."Contact"."phone", "public"."Contact"."company", "public"."Contact"."role", "public"."Contact"."message", "public"."Contact"."type", "public"."Contact"."status", "public"."Contact"."priority", "public"."Contact"."notes", "public"."Contact"."createdAt", "public"."Contact"."updatedAt" FROM "public"."Contact" WHERE 1=1 ORDER BY "public"."Contact"."createdAt" DESC OFFSET $1
 GET /api/events 200 in 309ms
 GET /api/contacts 200 in 311ms
 GET /api/registrations 200 in 314ms
prisma:query SELECT "public"."Registration"."id", "public"."Registration"."eventId", "public"."Registration"."fullName", "public"."Registration"."email", "public"."Registration"."phone", "public"."Registration"."organization", "public"."Registration"."experience", "public"."Registration"."expectation", "public"."Registration"."status", "public"."Registration"."createdAt", "public"."Registration"."updatedAt" FROM "public"."Registration" WHERE 1=1 ORDER BY "public"."Registration"."createdAt" DESC OFFSET $1
 GET /api/news 200 in 325ms
prisma:query SELECT "public"."News"."id", "public"."News"."title", "public"."News"."content", "public"."News"."excerpt", "public"."News"."author", "public"."News"."source", "public"."News"."category", "public"."News"."importance", "public"."News"."published", "public"."News"."publishedAt", "public"."News"."image", "public"."News"."tags", "public"."News"."link", "public"."News"."createdAt", "public"."News"."updatedAt" FROM "public"."News" WHERE 1=1 ORDER BY "public"."News"."createdAt" DESC OFFSET $1
 GET /favicon.ico?favicon.0b3bf435.ico 200 in 251ms
 ✓ Compiled /api/users in 134ms
prisma:query SELECT 1
prisma:query SELECT "public"."User"."id", "public"."User"."name", "public"."User"."email", "public"."User"."phone", "public"."User"."company", "public"."User"."role", "public"."User"."status", "public"."User"."joinDate", "public"."User"."lastActive" FROM "public"."User" WHERE 1=1 ORDER BY "public"."User"."name" ASC OFFSET $1
 GET /api/users 200 in 398ms
prisma:query SELECT "public"."User"."id", "public"."User"."name", "public"."User"."email", "public"."User"."phone", "public"."User"."company", "public"."User"."role", "public"."User"."status", "public"."User"."joinDate", "public"."User"."lastActive" FROM "public"."User" WHERE 1=1 ORDER BY "public"."User"."name" ASC OFFSET $1
 GET /api/users 200 in 257ms
 ✓ Compiled in 163ms
prisma:query SELECT "public"."User"."id", "public"."User"."name", "public"."User"."email", "public"."User"."phone", "public"."User"."company", "public"."User"."role", "public"."User"."status", "public"."User"."joinDate", "public"."User"."lastActive" FROM "public"."User" WHERE 1=1 ORDER BY "public"."User"."name" ASC OFFSET $1
 GET /api/users 200 in 264ms
prisma:query SELECT "public"."Contact"."id", "public"."Contact"."name", "public"."Contact"."email", "public"."Contact"."phone", "public"."Contact"."company", "public"."Contact"."role", "public"."Contact"."message", "public"."Contact"."type", "public"."Contact"."status", "public"."Contact"."priority", "public"."Contact"."notes", "public"."Contact"."createdAt", "public"."Contact"."updatedAt" FROM "public"."Contact" WHERE 1=1 ORDER BY "public"."Contact"."createdAt" DESC OFFSET $1
 GET /api/contacts 200 in 246ms
prisma:query SELECT "public"."Contact"."id", "public"."Contact"."name", "public"."Contact"."email", "public"."Contact"."phone", "public"."Contact"."company", "public"."Contact"."role", "public"."Contact"."message", "public"."Contact"."type", "public"."Contact"."status", "public"."Contact"."priority", "public"."Contact"."notes", "public"."Contact"."createdAt", "public"."Contact"."updatedAt" FROM "public"."Contact" WHERE 1=1 ORDER BY "public"."Contact"."createdAt" DESC OFFSET $1
 GET /api/contacts 200 in 249ms
prisma:query SELECT "public"."User"."id", "public"."User"."name", "public"."User"."email", "public"."User"."phone", "public"."User"."company", "public"."User"."role", "public"."User"."status", "public"."User"."joinDate", "public"."User"."lastActive" FROM "public"."User" WHERE 1=1 ORDER BY "public"."User"."name" ASC OFFSET $1
 GET /api/users 200 in 243ms
prisma:query SELECT "public"."User"."id", "public"."User"."name", "public"."User"."email", "public"."User"."phone", "public"."User"."company", "public"."User"."role", "public"."User"."status", "public"."User"."joinDate", "public"."User"."lastActive" FROM "public"."User" WHERE 1=1 ORDER BY "public"."User"."name" ASC OFFSET $1
 GET /api/users 200 in 265ms
 GET /admin 200 in 240ms
prisma:query SELECT 1
prisma:query SELECT 1
prisma:query SELECT 1
prisma:query SELECT 1
prisma:query SELECT 1
prisma:query SELECT 1
prisma:query SELECT 1
prisma:query SELECT 1
prisma:query SELECT COUNT(*) FROM (SELECT "public"."Event"."id" FROM "public"."Event" WHERE "public"."Event"."status" = $1 OFFSET $2) AS "sub"
prisma:query SELECT COUNT(*) FROM (SELECT "public"."News"."id" FROM "public"."News" WHERE 1=1 OFFSET $1) AS "sub"
prisma:query SELECT COUNT(*) FROM (SELECT "public"."Event"."id" FROM "public"."Event" WHERE 1=1 OFFSET $1) AS "sub"
prisma:query SELECT COUNT(*) FROM (SELECT "public"."User"."id" FROM "public"."User" WHERE 1=1 OFFSET $1) AS "sub"
prisma:query SELECT COUNT(*) FROM (SELECT "public"."News"."id" FROM "public"."News" WHERE "public"."News"."published" = $1 OFFSET $2) AS "sub"
prisma:query SELECT COUNT(*) FROM (SELECT "public"."Contact"."id" FROM "public"."Contact" WHERE "public"."Contact"."status" = $1 OFFSET $2) AS "sub"
prisma:query SELECT COUNT(*) FROM (SELECT "public"."Contact"."id" FROM "public"."Contact" WHERE 1=1 OFFSET $1) AS "sub"
prisma:query SELECT COUNT(*) FROM (SELECT "public"."User"."id" FROM "public"."User" WHERE "public"."User"."status" = $1 OFFSET $2) AS "sub"
prisma:query SELECT "public"."Event"."id", "public"."Event"."title", "public"."Event"."description", "public"."Event"."date", "public"."Event"."time", "public"."Event"."location", "public"."Event"."capacity", "public"."Event"."price", "public"."Event"."speakers", "public"."Event"."requirements", "public"."Event"."agenda", "public"."Event"."image", "public"."Event"."category", "public"."Event"."status", "public"."Event"."registrationsCount", "public"."Event"."actualParticipants", "public"."Event"."createdAt", "public"."Event"."updatedAt" FROM "public"."Event" WHERE 1=1 ORDER BY "public"."Event"."createdAt" ASC OFFSET $1
prisma:query SELECT COUNT(*) FROM (SELECT "public"."Registration"."id" FROM "public"."Registration" WHERE "public"."Registration"."status" <> $1 OFFSET $2) AS "sub"
prisma:query SELECT "public"."News"."id", "public"."News"."title", "public"."News"."content", "public"."News"."excerpt", "public"."News"."author", "public"."News"."source", "public"."News"."category", "public"."News"."importance", "public"."News"."published", "public"."News"."publishedAt", "public"."News"."image", "public"."News"."tags", "public"."News"."link", "public"."News"."createdAt", "public"."News"."updatedAt" FROM "public"."News" WHERE 1=1 ORDER BY "public"."News"."createdAt" DESC OFFSET $1
 GET /api/stats 200 in 330ms
 GET /api/events 200 in 330ms
 GET /api/news 200 in 334ms
 GET /api/contacts 200 in 336ms
prisma:query SELECT "public"."Contact"."id", "public"."Contact"."name", "public"."Contact"."email", "public"."Contact"."phone", "public"."Contact"."company", "public"."Contact"."role", "public"."Contact"."message", "public"."Contact"."type", "public"."Contact"."status", "public"."Contact"."priority", "public"."Contact"."notes", "public"."Contact"."createdAt", "public"."Contact"."updatedAt" FROM "public"."Contact" WHERE 1=1 ORDER BY "public"."Contact"."createdAt" DESC OFFSET $1
 GET /favicon.ico?favicon.0b3bf435.ico 200 in 239ms
prisma:query SELECT COUNT(*) FROM (SELECT "public"."News"."id" FROM "public"."News" WHERE 1=1 OFFSET $1) AS "sub"
prisma:query SELECT COUNT(*) FROM (SELECT "public"."Contact"."id" FROM "public"."Contact" WHERE 1=1 OFFSET $1) AS "sub"
prisma:query SELECT COUNT(*) FROM (SELECT "public"."Registration"."id" FROM "public"."Registration" WHERE "public"."Registration"."status" <> $1 OFFSET $2) AS "sub"
prisma:query SELECT COUNT(*) FROM (SELECT "public"."Event"."id" FROM "public"."Event" WHERE "public"."Event"."status" = $1 OFFSET $2) AS "sub"
prisma:query SELECT COUNT(*) FROM (SELECT "public"."User"."id" FROM "public"."User" WHERE 1=1 OFFSET $1) AS "sub"
prisma:query SELECT COUNT(*) FROM (SELECT "public"."User"."id" FROM "public"."User" WHERE "public"."User"."status" = $1 OFFSET $2) AS "sub"
prisma:query SELECT COUNT(*) FROM (SELECT "public"."News"."id" FROM "public"."News" WHERE "public"."News"."published" = $1 OFFSET $2) AS "sub"
prisma:query SELECT COUNT(*) FROM (SELECT "public"."Event"."id" FROM "public"."Event" WHERE 1=1 OFFSET $1) AS "sub"
prisma:query SELECT COUNT(*) FROM (SELECT "public"."Contact"."id" FROM "public"."Contact" WHERE "public"."Contact"."status" = $1 OFFSET $2) AS "sub"
prisma:query SELECT "public"."Event"."id", "public"."Event"."title", "public"."Event"."description", "public"."Event"."date", "public"."Event"."time", "public"."Event"."location", "public"."Event"."capacity", "public"."Event"."price", "public"."Event"."speakers", "public"."Event"."requirements", "public"."Event"."agenda", "public"."Event"."image", "public"."Event"."category", "public"."Event"."status", "public"."Event"."registrationsCount", "public"."Event"."actualParticipants", "public"."Event"."createdAt", "public"."Event"."updatedAt" FROM "public"."Event" WHERE 1=1 ORDER BY "public"."Event"."createdAt" ASC OFFSET $1
prisma:query SELECT "public"."News"."id", "public"."News"."title", "public"."News"."content", "public"."News"."excerpt", "public"."News"."author", "public"."News"."source", "public"."News"."category", "public"."News"."importance", "public"."News"."published", "public"."News"."publishedAt", "public"."News"."image", "public"."News"."tags", "public"."News"."link", "public"."News"."createdAt", "public"."News"."updatedAt" FROM "public"."News" WHERE 1=1 ORDER BY "public"."News"."createdAt" DESC OFFSET $1
 GET /api/stats 200 in 313ms
 GET /api/events 200 in 314ms
 GET /api/news 200 in 315ms
 GET /api/contacts 200 in 319ms
prisma:query SELECT "public"."Contact"."id", "public"."Contact"."name", "public"."Contact"."email", "public"."Contact"."phone", "public"."Contact"."company", "public"."Contact"."role", "public"."Contact"."message", "public"."Contact"."type", "public"."Contact"."status", "public"."Contact"."priority", "public"."Contact"."notes", "public"."Contact"."createdAt", "public"."Contact"."updatedAt" FROM "public"."Contact" WHERE 1=1 ORDER BY "public"."Contact"."createdAt" DESC OFFSET $1
prisma:query SELECT "public"."Contact"."id", "public"."Contact"."name", "public"."Contact"."email", "public"."Contact"."phone", "public"."Contact"."company", "public"."Contact"."role", "public"."Contact"."message", "public"."Contact"."type", "public"."Contact"."status", "public"."Contact"."priority", "public"."Contact"."notes", "public"."Contact"."createdAt", "public"."Contact"."updatedAt" FROM "public"."Contact" WHERE 1=1 ORDER BY "public"."Contact"."createdAt" DESC OFFSET $1
 GET /api/contacts 200 in 264ms
prisma:query SELECT "public"."Contact"."id", "public"."Contact"."name", "public"."Contact"."email", "public"."Contact"."phone", "public"."Contact"."company", "public"."Contact"."role", "public"."Contact"."message", "public"."Contact"."type", "public"."Contact"."status", "public"."Contact"."priority", "public"."Contact"."notes", "public"."Contact"."createdAt", "public"."Contact"."updatedAt" FROM "public"."Contact" WHERE 1=1 ORDER BY "public"."Contact"."createdAt" DESC OFFSET $1
 GET /api/contacts 200 in 278ms
prisma:query SELECT "public"."User"."id", "public"."User"."name", "public"."User"."email", "public"."User"."phone", "public"."User"."company", "public"."User"."role", "public"."User"."status", "public"."User"."joinDate", "public"."User"."lastActive" FROM "public"."User" WHERE 1=1 ORDER BY "public"."User"."name" ASC OFFSET $1
 GET /api/users 200 in 246ms
prisma:query SELECT "public"."User"."id", "public"."User"."name", "public"."User"."email", "public"."User"."phone", "public"."User"."company", "public"."User"."role", "public"."User"."status", "public"."User"."joinDate", "public"."User"."lastActive" FROM "public"."User" WHERE 1=1 ORDER BY "public"."User"."name" ASC OFFSET $1
 GET /api/users 200 in 270ms
prisma:query SELECT "public"."Contact"."id", "public"."Contact"."name", "public"."Contact"."email", "public"."Contact"."phone", "public"."Contact"."company", "public"."Contact"."role", "public"."Contact"."message", "public"."Contact"."type", "public"."Contact"."status", "public"."Contact"."priority", "public"."Contact"."notes", "public"."Contact"."createdAt", "public"."Contact"."updatedAt" FROM "public"."Contact" WHERE 1=1 ORDER BY "public"."Contact"."createdAt" DESC OFFSET $1
 GET /api/contacts 200 in 253ms
prisma:query SELECT "public"."Contact"."id", "public"."Contact"."name", "public"."Contact"."email", "public"."Contact"."phone", "public"."Contact"."company", "public"."Contact"."role", "public"."Contact"."message", "public"."Contact"."type", "public"."Contact"."status", "public"."Contact"."priority", "public"."Contact"."notes", "public"."Contact"."createdAt", "public"."Contact"."updatedAt" FROM "public"."Contact" WHERE 1=1 ORDER BY "public"."Contact"."createdAt" DESC OFFSET $1
 GET /api/contacts 200 in 263ms
prisma:query SELECT "public"."User"."id", "public"."User"."name", "public"."User"."email", "public"."User"."phone", "public"."User"."company", "public"."User"."role", "public"."User"."status", "public"."User"."joinDate", "public"."User"."lastActive" FROM "public"."User" WHERE 1=1 ORDER BY "public"."User"."name" ASC OFFSET $1
 GET /api/users 200 in 273ms
prisma:query SELECT "public"."User"."id", "public"."User"."name", "public"."User"."email", "public"."User"."phone", "public"."User"."company", "public"."User"."role", "public"."User"."status", "public"."User"."joinDate", "public"."User"."lastActive" FROM "public"."User" WHERE 1=1 ORDER BY "public"."User"."name" ASC OFFSET $1
 GET /api/users 200 in 272ms
prisma:query SELECT "public"."Contact"."id", "public"."Contact"."name", "public"."Contact"."email", "public"."Contact"."phone", "public"."Contact"."company", "public"."Contact"."role", "public"."Contact"."message", "public"."Contact"."type", "public"."Contact"."status", "public"."Contact"."priority", "public"."Contact"."notes", "public"."Contact"."createdAt", "public"."Contact"."updatedAt" FROM "public"."Contact" WHERE 1=1 ORDER BY "public"."Contact"."createdAt" DESC OFFSET $1
 GET /api/contacts 200 in 266ms
prisma:query SELECT "public"."Contact"."id", "public"."Contact"."name", "public"."Contact"."email", "public"."Contact"."phone", "public"."Contact"."company", "public"."Contact"."role", "public"."Contact"."message", "public"."Contact"."type", "public"."Contact"."status", "public"."Contact"."priority", "public"."Contact"."notes", "public"."Contact"."createdAt", "public"."Contact"."updatedAt" FROM "public"."Contact" WHERE 1=1 ORDER BY "public"."Contact"."createdAt" DESC OFFSET $1
 GET /api/contacts 200 in 276ms
prisma:query SELECT "public"."User"."id", "public"."User"."name", "public"."User"."email", "public"."User"."phone", "public"."User"."company", "public"."User"."role", "public"."User"."status", "public"."User"."joinDate", "public"."User"."lastActive" FROM "public"."User" WHERE 1=1 ORDER BY "public"."User"."name" ASC OFFSET $1
 GET /api/users 200 in 258ms
prisma:query SELECT "public"."User"."id", "public"."User"."name", "public"."User"."email", "public"."User"."phone", "public"."User"."company", "public"."User"."role", "public"."User"."status", "public"."User"."joinDate", "public"."User"."lastActive" FROM "public"."User" WHERE 1=1 ORDER BY "public"."User"."name" ASC OFFSET $1
 GET /api/users 200 in 239ms
prisma:query SELECT "public"."Event"."id", "public"."Event"."title", "public"."Event"."description", "public"."Event"."date", "public"."Event"."time", "public"."Event"."location", "public"."Event"."capacity", "public"."Event"."price", "public"."Event"."speakers", "public"."Event"."requirements", "public"."Event"."agenda", "public"."Event"."image", "public"."Event"."category", "public"."Event"."status", "public"."Event"."registrationsCount", "public"."Event"."actualParticipants", "public"."Event"."createdAt", "public"."Event"."updatedAt" FROM "public"."Event" WHERE 1=1 ORDER BY "public"."Event"."createdAt" ASC OFFSET $1
 GET /api/events 200 in 264ms
prisma:query SELECT "public"."Event"."id", "public"."Event"."title", "public"."Event"."description", "public"."Event"."date", "public"."Event"."time", "public"."Event"."location", "public"."Event"."capacity", "public"."Event"."price", "public"."Event"."speakers", "public"."Event"."requirements", "public"."Event"."agenda", "public"."Event"."image", "public"."Event"."category", "public"."Event"."status", "public"."Event"."registrationsCount", "public"."Event"."actualParticipants", "public"."Event"."createdAt", "public"."Event"."updatedAt" FROM "public"."Event" WHERE 1=1 ORDER BY "public"."Event"."createdAt" ASC OFFSET $1
 GET /api/events 200 in 248ms
prisma:query SELECT "public"."Registration"."id", "public"."Registration"."eventId", "public"."Registration"."fullName", "public"."Registration"."email", "public"."Registration"."phone", "public"."Registration"."organization", "public"."Registration"."experience", "public"."Registration"."expectation", "public"."Registration"."status", "public"."Registration"."createdAt", "public"."Registration"."updatedAt" FROM "public"."Registration" WHERE 1=1 ORDER BY "public"."Registration"."createdAt" DESC OFFSET $1
 GET /api/registrations 200 in 278ms
 GET /api/events 200 in 278ms
prisma:query SELECT "public"."Event"."id", "public"."Event"."title", "public"."Event"."description", "public"."Event"."date", "public"."Event"."time", "public"."Event"."location", "public"."Event"."capacity", "public"."Event"."price", "public"."Event"."speakers", "public"."Event"."requirements", "public"."Event"."agenda", "public"."Event"."image", "public"."Event"."category", "public"."Event"."status", "public"."Event"."registrationsCount", "public"."Event"."actualParticipants", "public"."Event"."createdAt", "public"."Event"."updatedAt" FROM "public"."Event" WHERE 1=1 ORDER BY "public"."Event"."createdAt" ASC OFFSET $1
prisma:query SELECT "public"."Event"."id", "public"."Event"."title", "public"."Event"."description", "public"."Event"."date", "public"."Event"."time", "public"."Event"."location", "public"."Event"."capacity", "public"."Event"."price", "public"."Event"."speakers", "public"."Event"."requirements", "public"."Event"."agenda", "public"."Event"."image", "public"."Event"."category", "public"."Event"."status", "public"."Event"."registrationsCount", "public"."Event"."actualParticipants", "public"."Event"."createdAt", "public"."Event"."updatedAt" FROM "public"."Event" WHERE 1=1 ORDER BY "public"."Event"."createdAt" ASC OFFSET $1
 GET /api/events 200 in 253ms
 GET /api/registrations 200 in 258ms
prisma:query SELECT "public"."Registration"."id", "public"."Registration"."eventId", "public"."Registration"."fullName", "public"."Registration"."email", "public"."Registration"."phone", "public"."Registration"."organization", "public"."Registration"."experience", "public"."Registration"."expectation", "public"."Registration"."status", "public"."Registration"."createdAt", "public"."Registration"."updatedAt" FROM "public"."Registration" WHERE 1=1 ORDER BY "public"."Registration"."createdAt" DESC OFFSET $1
prisma:query SELECT "public"."Event"."id", "public"."Event"."title", "public"."Event"."description", "public"."Event"."date", "public"."Event"."time", "public"."Event"."location", "public"."Event"."capacity", "public"."Event"."price", "public"."Event"."speakers", "public"."Event"."requirements", "public"."Event"."agenda", "public"."Event"."image", "public"."Event"."category", "public"."Event"."status", "public"."Event"."registrationsCount", "public"."Event"."actualParticipants", "public"."Event"."createdAt", "public"."Event"."updatedAt" FROM "public"."Event" WHERE 1=1 ORDER BY "public"."Event"."createdAt" ASC OFFSET $1
 GET /api/events 200 in 245ms
prisma:query SELECT "public"."Event"."id", "public"."Event"."title", "public"."Event"."description", "public"."Event"."date", "public"."Event"."time", "public"."Event"."location", "public"."Event"."capacity", "public"."Event"."price", "public"."Event"."speakers", "public"."Event"."requirements", "public"."Event"."agenda", "public"."Event"."image", "public"."Event"."category", "public"."Event"."status", "public"."Event"."registrationsCount", "public"."Event"."actualParticipants", "public"."Event"."createdAt", "public"."Event"."updatedAt" FROM "public"."Event" WHERE 1=1 ORDER BY "public"."Event"."createdAt" ASC OFFSET $1
 GET /api/events 200 in 260ms
 ✓ Compiled in 88ms
 ✓ Compiled in 169ms
 POST /api/upload 200 in 323ms
prisma:query SELECT 1
prisma:query INSERT INTO "public"."Event" ("id","title","description","date","time","location","capacity","price","speakers","requirements","agenda","image","category","status","registrationsCount","actualParticipants","createdAt","updatedAt") VALUES ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18) RETURNING "public"."Event"."id", "public"."Event"."title", "public"."Event"."description", "public"."Event"."date", "public"."Event"."time", "public"."Event"."location", "public"."Event"."capacity", "public"."Event"."price", "public"."Event"."speakers", "public"."Event"."requirements", "public"."Event"."agenda", "public"."Event"."image", "public"."Event"."category", "public"."Event"."status", "public"."Event"."registrationsCount", "public"."Event"."actualParticipants", "public"."Event"."createdAt", "public"."Event"."updatedAt"
 POST /api/events 201 in 257ms
 GET / 200 in 246ms
prisma:query SELECT "public"."Event"."id", "public"."Event"."title", "public"."Event"."description", "public"."Event"."date", "public"."Event"."time", "public"."Event"."location", "public"."Event"."capacity", "public"."Event"."price", "public"."Event"."speakers", "public"."Event"."requirements", "public"."Event"."agenda", "public"."Event"."image", "public"."Event"."category", "public"."Event"."status", "public"."Event"."registrationsCount", "public"."Event"."actualParticipants", "public"."Event"."createdAt", "public"."Event"."updatedAt" FROM "public"."Event" WHERE 1=1 ORDER BY "public"."Event"."createdAt" ASC OFFSET $1
prisma:query SELECT 1
prisma:query SELECT "public"."Registration"."id", "public"."Registration"."eventId" FROM "public"."Registration" WHERE ("public"."Registration"."status" <> $1 AND "public"."Registration"."eventId" IN ($2)) OFFSET $3
prisma:query SELECT "public"."Registration"."id", "public"."Registration"."eventId", "public"."Registration"."fullName", "public"."Registration"."email", "public"."Registration"."phone", "public"."Registration"."organization", "public"."Registration"."experience", "public"."Registration"."expectation", "public"."Registration"."status", "public"."Registration"."createdAt", "public"."Registration"."updatedAt" FROM "public"."Registration" WHERE 1=1 ORDER BY "public"."Registration"."createdAt" DESC OFFSET $1
prisma:query SELECT "public"."News"."id", "public"."News"."title", "public"."News"."content", "public"."News"."excerpt", "public"."News"."author", "public"."News"."source", "public"."News"."category", "public"."News"."importance", "public"."News"."published", "public"."News"."publishedAt", "public"."News"."image", "public"."News"."tags", "public"."News"."link", "public"."News"."createdAt", "public"."News"."updatedAt" FROM "public"."News" WHERE 1=1 ORDER BY "public"."News"."createdAt" DESC OFFSET $1
 GET /api/events 200 in 311ms
 GET /api/registrations 200 in 312ms
 GET /api/news 200 in 314ms
 GET /api/contacts 200 in 316ms
prisma:query SELECT "public"."Contact"."id", "public"."Contact"."name", "public"."Contact"."email", "public"."Contact"."phone", "public"."Contact"."company", "public"."Contact"."role", "public"."Contact"."message", "public"."Contact"."type", "public"."Contact"."status", "public"."Contact"."priority", "public"."Contact"."notes", "public"."Contact"."createdAt", "public"."Contact"."updatedAt" FROM "public"."Contact" WHERE 1=1 ORDER BY "public"."Contact"."createdAt" DESC OFFSET $1
 GET /favicon.ico?favicon.0b3bf435.ico 200 in 256ms
prisma:query SELECT 1
prisma:query SELECT "public"."Event"."id", "public"."Event"."title", "public"."Event"."description", "public"."Event"."date", "public"."Event"."time", "public"."Event"."location", "public"."Event"."capacity", "public"."Event"."price", "public"."Event"."speakers", "public"."Event"."requirements", "public"."Event"."agenda", "public"."Event"."image", "public"."Event"."category", "public"."Event"."status", "public"."Event"."registrationsCount", "public"."Event"."actualParticipants", "public"."Event"."createdAt", "public"."Event"."updatedAt" FROM "public"."Event" WHERE ("public"."Event"."id" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query INSERT INTO "public"."Registration" ("id","eventId","fullName","email","phone","organization","experience","expectation","status","createdAt","updatedAt") VALUES ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11) RETURNING "public"."Registration"."id", "public"."Registration"."eventId", "public"."Registration"."fullName", "public"."Registration"."email", "public"."Registration"."phone", "public"."Registration"."organization", "public"."Registration"."experience", "public"."Registration"."expectation", "public"."Registration"."status", "public"."Registration"."createdAt", "public"."Registration"."updatedAt"
prisma:query SELECT COUNT(*) FROM (SELECT "public"."Registration"."id" FROM "public"."Registration" WHERE ("public"."Registration"."eventId" = $1 AND (NOT "public"."Registration"."status" = $2)) OFFSET $3) AS "sub"
prisma:query UPDATE "public"."Event" SET "registrationsCount" = $1, "updatedAt" = $2 WHERE ("public"."Event"."id" = $3 AND 1=1) RETURNING "public"."Event"."id", "public"."Event"."title", "public"."Event"."description", "public"."Event"."date", "public"."Event"."time", "public"."Event"."location", "public"."Event"."capacity", "public"."Event"."price", "public"."Event"."speakers", "public"."Event"."requirements", "public"."Event"."agenda", "public"."Event"."image", "public"."Event"."category", "public"."Event"."status", "public"."Event"."registrationsCount", "public"."Event"."actualParticipants", "public"."Event"."createdAt", "public"."Event"."updatedAt"
 POST /api/registrations 201 in 254ms
prisma:query SELECT "public"."Event"."id", "public"."Event"."title", "public"."Event"."description", "public"."Event"."date", "public"."Event"."time", "public"."Event"."location", "public"."Event"."capacity", "public"."Event"."price", "public"."Event"."speakers", "public"."Event"."requirements", "public"."Event"."agenda", "public"."Event"."image", "public"."Event"."category", "public"."Event"."status", "public"."Event"."registrationsCount", "public"."Event"."actualParticipants", "public"."Event"."createdAt", "public"."Event"."updatedAt" FROM "public"."Event" WHERE 1=1 ORDER BY "public"."Event"."createdAt" ASC OFFSET $1
prisma:query SELECT "public"."Registration"."id", "public"."Registration"."eventId" FROM "public"."Registration" WHERE ("public"."Registration"."status" <> $1 AND "public"."Registration"."eventId" IN ($2)) OFFSET $3
 GET /api/events 200 in 240ms
 GET /admin 200 in 214ms
prisma:query SELECT 1
prisma:query SELECT 1
prisma:query SELECT COUNT(*) FROM (SELECT "public"."Event"."id" FROM "public"."Event" WHERE 1=1 OFFSET $1) AS "sub"
prisma:query SELECT COUNT(*) FROM (SELECT "public"."Event"."id" FROM "public"."Event" WHERE "public"."Event"."status" = $1 OFFSET $2) AS "sub"
prisma:query SELECT COUNT(*) FROM (SELECT "public"."News"."id" FROM "public"."News" WHERE "public"."News"."published" = $1 OFFSET $2) AS "sub"
prisma:query SELECT "public"."News"."id", "public"."News"."title", "public"."News"."content", "public"."News"."excerpt", "public"."News"."author", "public"."News"."source", "public"."News"."category", "public"."News"."importance", "public"."News"."published", "public"."News"."publishedAt", "public"."News"."image", "public"."News"."tags", "public"."News"."link", "public"."News"."createdAt", "public"."News"."updatedAt" FROM "public"."News" WHERE 1=1 ORDER BY "public"."News"."createdAt" DESC OFFSET $1
prisma:query SELECT COUNT(*) FROM (SELECT "public"."Registration"."id" FROM "public"."Registration" WHERE "public"."Registration"."status" <> $1 OFFSET $2) AS "sub"
prisma:query SELECT "public"."Event"."id", "public"."Event"."title", "public"."Event"."description", "public"."Event"."date", "public"."Event"."time", "public"."Event"."location", "public"."Event"."capacity", "public"."Event"."price", "public"."Event"."speakers", "public"."Event"."requirements", "public"."Event"."agenda", "public"."Event"."image", "public"."Event"."category", "public"."Event"."status", "public"."Event"."registrationsCount", "public"."Event"."actualParticipants", "public"."Event"."createdAt", "public"."Event"."updatedAt" FROM "public"."Event" WHERE 1=1 ORDER BY "public"."Event"."createdAt" ASC OFFSET $1
prisma:query SELECT COUNT(*) FROM (SELECT "public"."News"."id" FROM "public"."News" WHERE 1=1 OFFSET $1) AS "sub"
prisma:query SELECT COUNT(*) FROM (SELECT "public"."User"."id" FROM "public"."User" WHERE 1=1 OFFSET $1) AS "sub"
prisma:query SELECT COUNT(*) FROM (SELECT "public"."Contact"."id" FROM "public"."Contact" WHERE 1=1 OFFSET $1) AS "sub"
prisma:query SELECT "public"."Registration"."id", "public"."Registration"."eventId" FROM "public"."Registration" WHERE ("public"."Registration"."status" <> $1 AND "public"."Registration"."eventId" IN ($2)) OFFSET $3
prisma:query SELECT COUNT(*) FROM (SELECT "public"."Contact"."id" FROM "public"."Contact" WHERE "public"."Contact"."status" = $1 OFFSET $2) AS "sub"
 GET /api/news 200 in 365ms
 GET /api/events 200 in 370ms
 GET /api/contacts 200 in 371ms
prisma:query SELECT "public"."Contact"."id", "public"."Contact"."name", "public"."Contact"."email", "public"."Contact"."phone", "public"."Contact"."company", "public"."Contact"."role", "public"."Contact"."message", "public"."Contact"."type", "public"."Contact"."status", "public"."Contact"."priority", "public"."Contact"."notes", "public"."Contact"."createdAt", "public"."Contact"."updatedAt" FROM "public"."Contact" WHERE 1=1 ORDER BY "public"."Contact"."createdAt" DESC OFFSET $1
prisma:query SELECT COUNT(*) FROM (SELECT "public"."User"."id" FROM "public"."User" WHERE "public"."User"."status" = $1 OFFSET $2) AS "sub"
 GET /api/stats 200 in 381ms
prisma:query SELECT "public"."News"."id", "public"."News"."title", "public"."News"."content", "public"."News"."excerpt", "public"."News"."author", "public"."News"."source", "public"."News"."category", "public"."News"."importance", "public"."News"."published", "public"."News"."publishedAt", "public"."News"."image", "public"."News"."tags", "public"."News"."link", "public"."News"."createdAt", "public"."News"."updatedAt" FROM "public"."News" WHERE 1=1 ORDER BY "public"."News"."createdAt" DESC OFFSET $1
prisma:query SELECT "public"."Event"."id", "public"."Event"."title", "public"."Event"."description", "public"."Event"."date", "public"."Event"."time", "public"."Event"."location", "public"."Event"."capacity", "public"."Event"."price", "public"."Event"."speakers", "public"."Event"."requirements", "public"."Event"."agenda", "public"."Event"."image", "public"."Event"."category", "public"."Event"."status", "public"."Event"."registrationsCount", "public"."Event"."actualParticipants", "public"."Event"."createdAt", "public"."Event"."updatedAt" FROM "public"."Event" WHERE 1=1 ORDER BY "public"."Event"."createdAt" ASC OFFSET $1
 GET /api/news 200 in 294ms
 GET /api/events 200 in 294ms
 GET /api/contacts 200 in 296ms
prisma:query SELECT "public"."Registration"."id", "public"."Registration"."eventId" FROM "public"."Registration" WHERE ("public"."Registration"."status" <> $1 AND "public"."Registration"."eventId" IN ($2)) OFFSET $3
prisma:query SELECT "public"."Contact"."id", "public"."Contact"."name", "public"."Contact"."email", "public"."Contact"."phone", "public"."Contact"."company", "public"."Contact"."role", "public"."Contact"."message", "public"."Contact"."type", "public"."Contact"."status", "public"."Contact"."priority", "public"."Contact"."notes", "public"."Contact"."createdAt", "public"."Contact"."updatedAt" FROM "public"."Contact" WHERE 1=1 ORDER BY "public"."Contact"."createdAt" DESC OFFSET $1
prisma:query SELECT COUNT(*) FROM (SELECT "public"."Contact"."id" FROM "public"."Contact" WHERE "public"."Contact"."status" = $1 OFFSET $2) AS "sub"
prisma:query SELECT COUNT(*) FROM (SELECT "public"."Event"."id" FROM "public"."Event" WHERE "public"."Event"."status" = $1 OFFSET $2) AS "sub"
prisma:query SELECT COUNT(*) FROM (SELECT "public"."User"."id" FROM "public"."User" WHERE 1=1 OFFSET $1) AS "sub"
prisma:query SELECT COUNT(*) FROM (SELECT "public"."Event"."id" FROM "public"."Event" WHERE 1=1 OFFSET $1) AS "sub"
prisma:query SELECT COUNT(*) FROM (SELECT "public"."Contact"."id" FROM "public"."Contact" WHERE 1=1 OFFSET $1) AS "sub"
prisma:query SELECT COUNT(*) FROM (SELECT "public"."Registration"."id" FROM "public"."Registration" WHERE "public"."Registration"."status" <> $1 OFFSET $2) AS "sub"
prisma:query SELECT COUNT(*) FROM (SELECT "public"."News"."id" FROM "public"."News" WHERE "public"."News"."published" = $1 OFFSET $2) AS "sub"
prisma:query SELECT COUNT(*) FROM (SELECT "public"."News"."id" FROM "public"."News" WHERE 1=1 OFFSET $1) AS "sub"
prisma:query SELECT COUNT(*) FROM (SELECT "public"."User"."id" FROM "public"."User" WHERE "public"."User"."status" = $1 OFFSET $2) AS "sub"
 GET /api/stats 200 in 302ms
 GET / 200 in 85ms
prisma:query SELECT "public"."Event"."id", "public"."Event"."title", "public"."Event"."description", "public"."Event"."date", "public"."Event"."time", "public"."Event"."location", "public"."Event"."capacity", "public"."Event"."price", "public"."Event"."speakers", "public"."Event"."requirements", "public"."Event"."agenda", "public"."Event"."image", "public"."Event"."category", "public"."Event"."status", "public"."Event"."registrationsCount", "public"."Event"."actualParticipants", "public"."Event"."createdAt", "public"."Event"."updatedAt" FROM "public"."Event" WHERE 1=1 ORDER BY "public"."Event"."createdAt" ASC OFFSET $1
prisma:query SELECT "public"."Registration"."id", "public"."Registration"."eventId" FROM "public"."Registration" WHERE ("public"."Registration"."status" <> $1 AND "public"."Registration"."eventId" IN ($2)) OFFSET $3
prisma:query SELECT "public"."Registration"."id", "public"."Registration"."eventId", "public"."Registration"."fullName", "public"."Registration"."email", "public"."Registration"."phone", "public"."Registration"."organization", "public"."Registration"."experience", "public"."Registration"."expectation", "public"."Registration"."status", "public"."Registration"."createdAt", "public"."Registration"."updatedAt" FROM "public"."Registration" WHERE 1=1 ORDER BY "public"."Registration"."createdAt" DESC OFFSET $1
 GET /api/events 200 in 307ms
 GET /api/registrations 200 in 309ms
 GET /api/contacts 200 in 310ms
prisma:query SELECT "public"."Contact"."id", "public"."Contact"."name", "public"."Contact"."email", "public"."Contact"."phone", "public"."Contact"."company", "public"."Contact"."role", "public"."Contact"."message", "public"."Contact"."type", "public"."Contact"."status", "public"."Contact"."priority", "public"."Contact"."notes", "public"."Contact"."createdAt", "public"."Contact"."updatedAt" FROM "public"."Contact" WHERE 1=1 ORDER BY "public"."Contact"."createdAt" DESC OFFSET $1
 GET /api/news 200 in 321ms
prisma:query SELECT "public"."News"."id", "public"."News"."title", "public"."News"."content", "public"."News"."excerpt", "public"."News"."author", "public"."News"."source", "public"."News"."category", "public"."News"."importance", "public"."News"."published", "public"."News"."publishedAt", "public"."News"."image", "public"."News"."tags", "public"."News"."link", "public"."News"."createdAt", "public"."News"."updatedAt" FROM "public"."News" WHERE 1=1 ORDER BY "public"."News"."createdAt" DESC OFFSET $1
 GET /favicon.ico?favicon.0b3bf435.ico 200 in 249ms
 GET /favicon.ico?favicon.0b3bf435.ico 200 in 244ms
prisma:query SELECT 1
prisma:query SELECT "public"."User"."id", "public"."User"."name", "public"."User"."email", "public"."User"."phone", "public"."User"."company", "public"."User"."role", "public"."User"."status", "public"."User"."joinDate", "public"."User"."lastActive" FROM "public"."User" WHERE 1=1 ORDER BY "public"."User"."name" ASC OFFSET $1
 GET /api/users 200 in 328ms
prisma:query SELECT "public"."User"."id", "public"."User"."name", "public"."User"."email", "public"."User"."phone", "public"."User"."company", "public"."User"."role", "public"."User"."status", "public"."User"."joinDate", "public"."User"."lastActive" FROM "public"."User" WHERE 1=1 ORDER BY "public"."User"."name" ASC OFFSET $1
 GET /api/users 200 in 244ms
 GET /admin 200 in 91ms
prisma:query SELECT 1
prisma:query SELECT 1
prisma:query SELECT 1
prisma:query SELECT 1
prisma:query SELECT 1
prisma:query SELECT 1
prisma:query SELECT 1
prisma:query SELECT 1
prisma:query SELECT COUNT(*) FROM (SELECT "public"."Event"."id" FROM "public"."Event" WHERE 1=1 OFFSET $1) AS "sub"
prisma:query SELECT COUNT(*) FROM (SELECT "public"."Contact"."id" FROM "public"."Contact" WHERE 1=1 OFFSET $1) AS "sub"
prisma:query SELECT COUNT(*) FROM (SELECT "public"."Registration"."id" FROM "public"."Registration" WHERE "public"."Registration"."status" <> $1 OFFSET $2) AS "sub"
prisma:query SELECT COUNT(*) FROM (SELECT "public"."Event"."id" FROM "public"."Event" WHERE "public"."Event"."status" = $1 OFFSET $2) AS "sub"
prisma:query SELECT COUNT(*) FROM (SELECT "public"."News"."id" FROM "public"."News" WHERE 1=1 OFFSET $1) AS "sub"
prisma:query SELECT COUNT(*) FROM (SELECT "public"."User"."id" FROM "public"."User" WHERE "public"."User"."status" = $1 OFFSET $2) AS "sub"
prisma:query SELECT COUNT(*) FROM (SELECT "public"."Contact"."id" FROM "public"."Contact" WHERE "public"."Contact"."status" = $1 OFFSET $2) AS "sub"
prisma:query SELECT COUNT(*) FROM (SELECT "public"."User"."id" FROM "public"."User" WHERE 1=1 OFFSET $1) AS "sub"
prisma:query SELECT COUNT(*) FROM (SELECT "public"."News"."id" FROM "public"."News" WHERE "public"."News"."published" = $1 OFFSET $2) AS "sub"
 GET /api/stats 200 in 316ms
 GET /api/news 200 in 328ms
prisma:query SELECT "public"."News"."id", "public"."News"."title", "public"."News"."content", "public"."News"."excerpt", "public"."News"."author", "public"."News"."source", "public"."News"."category", "public"."News"."importance", "public"."News"."published", "public"."News"."publishedAt", "public"."News"."image", "public"."News"."tags", "public"."News"."link", "public"."News"."createdAt", "public"."News"."updatedAt" FROM "public"."News" WHERE 1=1 ORDER BY "public"."News"."createdAt" DESC OFFSET $1
prisma:query SELECT "public"."Event"."id", "public"."Event"."title", "public"."Event"."description", "public"."Event"."date", "public"."Event"."time", "public"."Event"."location", "public"."Event"."capacity", "public"."Event"."price", "public"."Event"."speakers", "public"."Event"."requirements", "public"."Event"."agenda", "public"."Event"."image", "public"."Event"."category", "public"."Event"."status", "public"."Event"."registrationsCount", "public"."Event"."actualParticipants", "public"."Event"."createdAt", "public"."Event"."updatedAt" FROM "public"."Event" WHERE 1=1 ORDER BY "public"."Event"."createdAt" ASC OFFSET $1
prisma:query SELECT "public"."Registration"."id", "public"."Registration"."eventId" FROM "public"."Registration" WHERE ("public"."Registration"."status" <> $1 AND "public"."Registration"."eventId" IN ($2)) OFFSET $3
 GET /api/events 200 in 339ms
 GET /api/contacts 200 in 342ms
 GET /favicon.ico?favicon.0b3bf435.ico 200 in 291ms
prisma:query SELECT "public"."Contact"."id", "public"."Contact"."name", "public"."Contact"."email", "public"."Contact"."phone", "public"."Contact"."company", "public"."Contact"."role", "public"."Contact"."message", "public"."Contact"."type", "public"."Contact"."status", "public"."Contact"."priority", "public"."Contact"."notes", "public"."Contact"."createdAt", "public"."Contact"."updatedAt" FROM "public"."Contact" WHERE 1=1 ORDER BY "public"."Contact"."createdAt" DESC OFFSET $1
prisma:query SELECT COUNT(*) FROM (SELECT "public"."Event"."id" FROM "public"."Event" WHERE 1=1 OFFSET $1) AS "sub"
prisma:query SELECT COUNT(*) FROM (SELECT "public"."News"."id" FROM "public"."News" WHERE "public"."News"."published" = $1 OFFSET $2) AS "sub"
prisma:query SELECT COUNT(*) FROM (SELECT "public"."News"."id" FROM "public"."News" WHERE 1=1 OFFSET $1) AS "sub"
prisma:query SELECT COUNT(*) FROM (SELECT "public"."Event"."id" FROM "public"."Event" WHERE "public"."Event"."status" = $1 OFFSET $2) AS "sub"
prisma:query SELECT COUNT(*) FROM (SELECT "public"."Contact"."id" FROM "public"."Contact" WHERE 1=1 OFFSET $1) AS "sub"
prisma:query SELECT COUNT(*) FROM (SELECT "public"."Registration"."id" FROM "public"."Registration" WHERE "public"."Registration"."status" <> $1 OFFSET $2) AS "sub"
prisma:query SELECT COUNT(*) FROM (SELECT "public"."User"."id" FROM "public"."User" WHERE "public"."User"."status" = $1 OFFSET $2) AS "sub"
prisma:query SELECT COUNT(*) FROM (SELECT "public"."User"."id" FROM "public"."User" WHERE 1=1 OFFSET $1) AS "sub"
prisma:query SELECT COUNT(*) FROM (SELECT "public"."Contact"."id" FROM "public"."Contact" WHERE "public"."Contact"."status" = $1 OFFSET $2) AS "sub"
 GET /api/stats 200 in 367ms
prisma:query SELECT "public"."News"."id", "public"."News"."title", "public"."News"."content", "public"."News"."excerpt", "public"."News"."author", "public"."News"."source", "public"."News"."category", "public"."News"."importance", "public"."News"."published", "public"."News"."publishedAt", "public"."News"."image", "public"."News"."tags", "public"."News"."link", "public"."News"."createdAt", "public"."News"."updatedAt" FROM "public"."News" WHERE 1=1 ORDER BY "public"."News"."createdAt" DESC OFFSET $1
prisma:query SELECT "public"."Event"."id", "public"."Event"."title", "public"."Event"."description", "public"."Event"."date", "public"."Event"."time", "public"."Event"."location", "public"."Event"."capacity", "public"."Event"."price", "public"."Event"."speakers", "public"."Event"."requirements", "public"."Event"."agenda", "public"."Event"."image", "public"."Event"."category", "public"."Event"."status", "public"."Event"."registrationsCount", "public"."Event"."actualParticipants", "public"."Event"."createdAt", "public"."Event"."updatedAt" FROM "public"."Event" WHERE 1=1 ORDER BY "public"."Event"."createdAt" ASC OFFSET $1
prisma:query SELECT "public"."Registration"."id", "public"."Registration"."eventId" FROM "public"."Registration" WHERE ("public"."Registration"."status" <> $1 AND "public"."Registration"."eventId" IN ($2)) OFFSET $3
 GET /api/news 200 in 346ms
 GET /api/events 200 in 345ms
 GET /api/contacts 200 in 347ms
prisma:query SELECT "public"."Contact"."id", "public"."Contact"."name", "public"."Contact"."email", "public"."Contact"."phone", "public"."Contact"."company", "public"."Contact"."role", "public"."Contact"."message", "public"."Contact"."type", "public"."Contact"."status", "public"."Contact"."priority", "public"."Contact"."notes", "public"."Contact"."createdAt", "public"."Contact"."updatedAt" FROM "public"."Contact" WHERE 1=1 ORDER BY "public"."Contact"."createdAt" DESC OFFSET $1
prisma:query SELECT "public"."User"."id", "public"."User"."name", "public"."User"."email", "public"."User"."phone", "public"."User"."company", "public"."User"."role", "public"."User"."status", "public"."User"."joinDate", "public"."User"."lastActive" FROM "public"."User" WHERE ("public"."User"."email" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query INSERT INTO "public"."User" ("id","name","email","phone","company","role","status","joinDate","lastActive") VALUES ($1,$2,$3,$4,$5,$6,$7,$8,$9) RETURNING "public"."User"."id", "public"."User"."name", "public"."User"."email", "public"."User"."phone", "public"."User"."company", "public"."User"."role", "public"."User"."status", "public"."User"."joinDate", "public"."User"."lastActive"
 POST /api/users 201 in 273ms
 GET /admin 200 in 206ms
prisma:query SELECT COUNT(*) FROM (SELECT "public"."News"."id" FROM "public"."News" WHERE "public"."News"."published" = $1 OFFSET $2) AS "sub"
prisma:query SELECT COUNT(*) FROM (SELECT "public"."Registration"."id" FROM "public"."Registration" WHERE "public"."Registration"."status" <> $1 OFFSET $2) AS "sub"
prisma:query SELECT COUNT(*) FROM (SELECT "public"."Contact"."id" FROM "public"."Contact" WHERE 1=1 OFFSET $1) AS "sub"
prisma:query SELECT COUNT(*) FROM (SELECT "public"."User"."id" FROM "public"."User" WHERE 1=1 OFFSET $1) AS "sub"
prisma:query SELECT COUNT(*) FROM (SELECT "public"."Event"."id" FROM "public"."Event" WHERE 1=1 OFFSET $1) AS "sub"
prisma:query SELECT COUNT(*) FROM (SELECT "public"."User"."id" FROM "public"."User" WHERE "public"."User"."status" = $1 OFFSET $2) AS "sub"
prisma:query SELECT COUNT(*) FROM (SELECT "public"."Contact"."id" FROM "public"."Contact" WHERE "public"."Contact"."status" = $1 OFFSET $2) AS "sub"
prisma:query SELECT COUNT(*) FROM (SELECT "public"."News"."id" FROM "public"."News" WHERE 1=1 OFFSET $1) AS "sub"
prisma:query SELECT COUNT(*) FROM (SELECT "public"."Event"."id" FROM "public"."Event" WHERE "public"."Event"."status" = $1 OFFSET $2) AS "sub"
prisma:query SELECT "public"."Event"."id", "public"."Event"."title", "public"."Event"."description", "public"."Event"."date", "public"."Event"."time", "public"."Event"."location", "public"."Event"."capacity", "public"."Event"."price", "public"."Event"."speakers", "public"."Event"."requirements", "public"."Event"."agenda", "public"."Event"."image", "public"."Event"."category", "public"."Event"."status", "public"."Event"."registrationsCount", "public"."Event"."actualParticipants", "public"."Event"."createdAt", "public"."Event"."updatedAt" FROM "public"."Event" WHERE 1=1 ORDER BY "public"."Event"."createdAt" ASC OFFSET $1
prisma:query SELECT "public"."Registration"."id", "public"."Registration"."eventId" FROM "public"."Registration" WHERE ("public"."Registration"."status" <> $1 AND "public"."Registration"."eventId" IN ($2)) OFFSET $3
 GET /api/stats 200 in 316ms
 GET /api/events 200 in 317ms
 GET /api/news 200 in 319ms
prisma:query SELECT "public"."News"."id", "public"."News"."title", "public"."News"."content", "public"."News"."excerpt", "public"."News"."author", "public"."News"."source", "public"."News"."category", "public"."News"."importance", "public"."News"."published", "public"."News"."publishedAt", "public"."News"."image", "public"."News"."tags", "public"."News"."link", "public"."News"."createdAt", "public"."News"."updatedAt" FROM "public"."News" WHERE 1=1 ORDER BY "public"."News"."createdAt" DESC OFFSET $1
prisma:query SELECT "public"."Contact"."id", "public"."Contact"."name", "public"."Contact"."email", "public"."Contact"."phone", "public"."Contact"."company", "public"."Contact"."role", "public"."Contact"."message", "public"."Contact"."type", "public"."Contact"."status", "public"."Contact"."priority", "public"."Contact"."notes", "public"."Contact"."createdAt", "public"."Contact"."updatedAt" FROM "public"."Contact" WHERE 1=1 ORDER BY "public"."Contact"."createdAt" DESC OFFSET $1
 GET /api/contacts 200 in 324ms
prisma:query SELECT COUNT(*) FROM (SELECT "public"."Event"."id" FROM "public"."Event" WHERE "public"."Event"."status" = $1 OFFSET $2) AS "sub"
prisma:query SELECT COUNT(*) FROM (SELECT "public"."Event"."id" FROM "public"."Event" WHERE 1=1 OFFSET $1) AS "sub"
prisma:query SELECT COUNT(*) FROM (SELECT "public"."News"."id" FROM "public"."News" WHERE 1=1 OFFSET $1) AS "sub"
prisma:query SELECT COUNT(*) FROM (SELECT "public"."Contact"."id" FROM "public"."Contact" WHERE 1=1 OFFSET $1) AS "sub"
prisma:query SELECT COUNT(*) FROM (SELECT "public"."Contact"."id" FROM "public"."Contact" WHERE "public"."Contact"."status" = $1 OFFSET $2) AS "sub"
prisma:query SELECT COUNT(*) FROM (SELECT "public"."Registration"."id" FROM "public"."Registration" WHERE "public"."Registration"."status" <> $1 OFFSET $2) AS "sub"
prisma:query SELECT COUNT(*) FROM (SELECT "public"."User"."id" FROM "public"."User" WHERE "public"."User"."status" = $1 OFFSET $2) AS "sub"
prisma:query SELECT COUNT(*) FROM (SELECT "public"."News"."id" FROM "public"."News" WHERE "public"."News"."published" = $1 OFFSET $2) AS "sub"
prisma:query SELECT COUNT(*) FROM (SELECT "public"."User"."id" FROM "public"."User" WHERE 1=1 OFFSET $1) AS "sub"
prisma:query SELECT "public"."Event"."id", "public"."Event"."title", "public"."Event"."description", "public"."Event"."date", "public"."Event"."time", "public"."Event"."location", "public"."Event"."capacity", "public"."Event"."price", "public"."Event"."speakers", "public"."Event"."requirements", "public"."Event"."agenda", "public"."Event"."image", "public"."Event"."category", "public"."Event"."status", "public"."Event"."registrationsCount", "public"."Event"."actualParticipants", "public"."Event"."createdAt", "public"."Event"."updatedAt" FROM "public"."Event" WHERE 1=1 ORDER BY "public"."Event"."createdAt" ASC OFFSET $1
prisma:query SELECT "public"."News"."id", "public"."News"."title", "public"."News"."content", "public"."News"."excerpt", "public"."News"."author", "public"."News"."source", "public"."News"."category", "public"."News"."importance", "public"."News"."published", "public"."News"."publishedAt", "public"."News"."image", "public"."News"."tags", "public"."News"."link", "public"."News"."createdAt", "public"."News"."updatedAt" FROM "public"."News" WHERE 1=1 ORDER BY "public"."News"."createdAt" DESC OFFSET $1
prisma:query SELECT "public"."Registration"."id", "public"."Registration"."eventId" FROM "public"."Registration" WHERE ("public"."Registration"."status" <> $1 AND "public"."Registration"."eventId" IN ($2)) OFFSET $3
 GET /api/stats 200 in 299ms
 GET /api/events 200 in 301ms
 GET /api/news 200 in 297ms
 GET /api/contacts 200 in 298ms
prisma:query SELECT "public"."Contact"."id", "public"."Contact"."name", "public"."Contact"."email", "public"."Contact"."phone", "public"."Contact"."company", "public"."Contact"."role", "public"."Contact"."message", "public"."Contact"."type", "public"."Contact"."status", "public"."Contact"."priority", "public"."Contact"."notes", "public"."Contact"."createdAt", "public"."Contact"."updatedAt" FROM "public"."Contact" WHERE 1=1 ORDER BY "public"."Contact"."createdAt" DESC OFFSET $1
 GET /favicon.ico?favicon.0b3bf435.ico 200 in 247ms
prisma:query SELECT "public"."User"."id", "public"."User"."name", "public"."User"."email", "public"."User"."phone", "public"."User"."company", "public"."User"."role", "public"."User"."status", "public"."User"."joinDate", "public"."User"."lastActive" FROM "public"."User" WHERE 1=1 ORDER BY "public"."User"."name" ASC OFFSET $1
 GET /api/users 200 in 249ms
prisma:query SELECT "public"."User"."id", "public"."User"."name", "public"."User"."email", "public"."User"."phone", "public"."User"."company", "public"."User"."role", "public"."User"."status", "public"."User"."joinDate", "public"."User"."lastActive" FROM "public"."User" WHERE 1=1 ORDER BY "public"."User"."name" ASC OFFSET $1
 GET /api/users 200 in 243ms
prisma:query SELECT 1
prisma:query SELECT "public"."Contact"."id", "public"."Contact"."name", "public"."Contact"."email", "public"."Contact"."phone", "public"."Contact"."company", "public"."Contact"."role", "public"."Contact"."message", "public"."Contact"."type", "public"."Contact"."status", "public"."Contact"."priority", "public"."Contact"."notes", "public"."Contact"."createdAt", "public"."Contact"."updatedAt" FROM "public"."Contact" WHERE 1=1 ORDER BY "public"."Contact"."createdAt" DESC OFFSET $1
 GET /api/contacts 200 in 244ms
prisma:query SELECT "public"."Contact"."id", "public"."Contact"."name", "public"."Contact"."email", "public"."Contact"."phone", "public"."Contact"."company", "public"."Contact"."role", "public"."Contact"."message", "public"."Contact"."type", "public"."Contact"."status", "public"."Contact"."priority", "public"."Contact"."notes", "public"."Contact"."createdAt", "public"."Contact"."updatedAt" FROM "public"."Contact" WHERE 1=1 ORDER BY "public"."Contact"."createdAt" DESC OFFSET $1
 GET /api/contacts 200 in 236ms
prisma:query SELECT "public"."Registration"."id", "public"."Registration"."eventId", "public"."Registration"."fullName", "public"."Registration"."email", "public"."Registration"."phone", "public"."Registration"."organization", "public"."Registration"."experience", "public"."Registration"."expectation", "public"."Registration"."status", "public"."Registration"."createdAt", "public"."Registration"."updatedAt" FROM "public"."Registration" WHERE 1=1 ORDER BY "public"."Registration"."createdAt" DESC OFFSET $1
 GET /api/registrations 200 in 253ms
 GET /api/events 200 in 250ms
prisma:query SELECT "public"."Event"."id", "public"."Event"."title", "public"."Event"."description", "public"."Event"."date", "public"."Event"."time", "public"."Event"."location", "public"."Event"."capacity", "public"."Event"."price", "public"."Event"."speakers", "public"."Event"."requirements", "public"."Event"."agenda", "public"."Event"."image", "public"."Event"."category", "public"."Event"."status", "public"."Event"."registrationsCount", "public"."Event"."actualParticipants", "public"."Event"."createdAt", "public"."Event"."updatedAt" FROM "public"."Event" WHERE 1=1 ORDER BY "public"."Event"."createdAt" ASC OFFSET $1
prisma:query SELECT "public"."Registration"."id", "public"."Registration"."eventId" FROM "public"."Registration" WHERE ("public"."Registration"."status" <> $1 AND "public"."Registration"."eventId" IN ($2)) OFFSET $3
prisma:query SELECT "public"."Registration"."id", "public"."Registration"."eventId", "public"."Registration"."fullName", "public"."Registration"."email", "public"."Registration"."phone", "public"."Registration"."organization", "public"."Registration"."experience", "public"."Registration"."expectation", "public"."Registration"."status", "public"."Registration"."createdAt", "public"."Registration"."updatedAt" FROM "public"."Registration" WHERE 1=1 ORDER BY "public"."Registration"."createdAt" DESC OFFSET $1
 GET /api/registrations 200 in 251ms
 GET /api/events 200 in 250ms
prisma:query SELECT "public"."Event"."id", "public"."Event"."title", "public"."Event"."description", "public"."Event"."date", "public"."Event"."time", "public"."Event"."location", "public"."Event"."capacity", "public"."Event"."price", "public"."Event"."speakers", "public"."Event"."requirements", "public"."Event"."agenda", "public"."Event"."image", "public"."Event"."category", "public"."Event"."status", "public"."Event"."registrationsCount", "public"."Event"."actualParticipants", "public"."Event"."createdAt", "public"."Event"."updatedAt" FROM "public"."Event" WHERE 1=1 ORDER BY "public"."Event"."createdAt" ASC OFFSET $1
prisma:query SELECT "public"."Registration"."id", "public"."Registration"."eventId" FROM "public"."Registration" WHERE ("public"."Registration"."status" <> $1 AND "public"."Registration"."eventId" IN ($2)) OFFSET $3
prisma:query SELECT "public"."Event"."id", "public"."Event"."title", "public"."Event"."description", "public"."Event"."date", "public"."Event"."time", "public"."Event"."location", "public"."Event"."capacity", "public"."Event"."price", "public"."Event"."speakers", "public"."Event"."requirements", "public"."Event"."agenda", "public"."Event"."image", "public"."Event"."category", "public"."Event"."status", "public"."Event"."registrationsCount", "public"."Event"."actualParticipants", "public"."Event"."createdAt", "public"."Event"."updatedAt" FROM "public"."Event" WHERE 1=1 ORDER BY "public"."Event"."createdAt" ASC OFFSET $1
prisma:query SELECT "public"."Registration"."id", "public"."Registration"."eventId" FROM "public"."Registration" WHERE ("public"."Registration"."status" <> $1 AND "public"."Registration"."eventId" IN ($2)) OFFSET $3
 GET /api/events 200 in 243ms
prisma:query SELECT "public"."Event"."id", "public"."Event"."title", "public"."Event"."description", "public"."Event"."date", "public"."Event"."time", "public"."Event"."location", "public"."Event"."capacity", "public"."Event"."price", "public"."Event"."speakers", "public"."Event"."requirements", "public"."Event"."agenda", "public"."Event"."image", "public"."Event"."category", "public"."Event"."status", "public"."Event"."registrationsCount", "public"."Event"."actualParticipants", "public"."Event"."createdAt", "public"."Event"."updatedAt" FROM "public"."Event" WHERE 1=1 ORDER BY "public"."Event"."createdAt" ASC OFFSET $1
prisma:query SELECT "public"."Registration"."id", "public"."Registration"."eventId" FROM "public"."Registration" WHERE ("public"."Registration"."status" <> $1 AND "public"."Registration"."eventId" IN ($2)) OFFSET $3
 GET /api/events 200 in 242ms
prisma:query SELECT "public"."Registration"."id", "public"."Registration"."eventId", "public"."Registration"."fullName", "public"."Registration"."email", "public"."Registration"."phone", "public"."Registration"."organization", "public"."Registration"."experience", "public"."Registration"."expectation", "public"."Registration"."status", "public"."Registration"."createdAt", "public"."Registration"."updatedAt" FROM "public"."Registration" WHERE 1=1 ORDER BY "public"."Registration"."createdAt" DESC OFFSET $1
 GET /api/registrations 200 in 251ms
prisma:query SELECT "public"."Event"."id", "public"."Event"."title", "public"."Event"."description", "public"."Event"."date", "public"."Event"."time", "public"."Event"."location", "public"."Event"."capacity", "public"."Event"."price", "public"."Event"."speakers", "public"."Event"."requirements", "public"."Event"."agenda", "public"."Event"."image", "public"."Event"."category", "public"."Event"."status", "public"."Event"."registrationsCount", "public"."Event"."actualParticipants", "public"."Event"."createdAt", "public"."Event"."updatedAt" FROM "public"."Event" WHERE 1=1 ORDER BY "public"."Event"."createdAt" ASC OFFSET $1
prisma:query SELECT "public"."Registration"."id", "public"."Registration"."eventId" FROM "public"."Registration" WHERE ("public"."Registration"."status" <> $1 AND "public"."Registration"."eventId" IN ($2)) OFFSET $3
 GET /api/events 200 in 252ms
prisma:query SELECT "public"."Registration"."id", "public"."Registration"."eventId", "public"."Registration"."fullName", "public"."Registration"."email", "public"."Registration"."phone", "public"."Registration"."organization", "public"."Registration"."experience", "public"."Registration"."expectation", "public"."Registration"."status", "public"."Registration"."createdAt", "public"."Registration"."updatedAt" FROM "public"."Registration" WHERE 1=1 ORDER BY "public"."Registration"."createdAt" DESC OFFSET $1
 GET /api/registrations 200 in 255ms
 GET /api/events 200 in 256ms
prisma:query SELECT "public"."Event"."id", "public"."Event"."title", "public"."Event"."description", "public"."Event"."date", "public"."Event"."time", "public"."Event"."location", "public"."Event"."capacity", "public"."Event"."price", "public"."Event"."speakers", "public"."Event"."requirements", "public"."Event"."agenda", "public"."Event"."image", "public"."Event"."category", "public"."Event"."status", "public"."Event"."registrationsCount", "public"."Event"."actualParticipants", "public"."Event"."createdAt", "public"."Event"."updatedAt" FROM "public"."Event" WHERE 1=1 ORDER BY "public"."Event"."createdAt" ASC OFFSET $1
prisma:query SELECT "public"."Registration"."id", "public"."Registration"."eventId" FROM "public"."Registration" WHERE ("public"."Registration"."status" <> $1 AND "public"."Registration"."eventId" IN ($2)) OFFSET $3
prisma:query SELECT "public"."Contact"."id", "public"."Contact"."name", "public"."Contact"."email", "public"."Contact"."phone", "public"."Contact"."company", "public"."Contact"."role", "public"."Contact"."message", "public"."Contact"."type", "public"."Contact"."status", "public"."Contact"."priority", "public"."Contact"."notes", "public"."Contact"."createdAt", "public"."Contact"."updatedAt" FROM "public"."Contact" WHERE 1=1 ORDER BY "public"."Contact"."createdAt" DESC OFFSET $1
 GET /api/contacts 200 in 255ms
prisma:query SELECT "public"."Contact"."id", "public"."Contact"."name", "public"."Contact"."email", "public"."Contact"."phone", "public"."Contact"."company", "public"."Contact"."role", "public"."Contact"."message", "public"."Contact"."type", "public"."Contact"."status", "public"."Contact"."priority", "public"."Contact"."notes", "public"."Contact"."createdAt", "public"."Contact"."updatedAt" FROM "public"."Contact" WHERE 1=1 ORDER BY "public"."Contact"."createdAt" DESC OFFSET $1
 GET /api/contacts 200 in 240ms
prisma:query SELECT "public"."User"."id", "public"."User"."name", "public"."User"."email", "public"."User"."phone", "public"."User"."company", "public"."User"."role", "public"."User"."status", "public"."User"."joinDate", "public"."User"."lastActive" FROM "public"."User" WHERE 1=1 ORDER BY "public"."User"."name" ASC OFFSET $1
 GET /api/users 200 in 236ms
prisma:query SELECT "public"."User"."id", "public"."User"."name", "public"."User"."email", "public"."User"."phone", "public"."User"."company", "public"."User"."role", "public"."User"."status", "public"."User"."joinDate", "public"."User"."lastActive" FROM "public"."User" WHERE 1=1 ORDER BY "public"."User"."name" ASC OFFSET $1
 GET /api/users 200 in 243ms
prisma:query SELECT "public"."Contact"."id", "public"."Contact"."name", "public"."Contact"."email", "public"."Contact"."phone", "public"."Contact"."company", "public"."Contact"."role", "public"."Contact"."message", "public"."Contact"."type", "public"."Contact"."status", "public"."Contact"."priority", "public"."Contact"."notes", "public"."Contact"."createdAt", "public"."Contact"."updatedAt" FROM "public"."Contact" WHERE 1=1 ORDER BY "public"."Contact"."createdAt" DESC OFFSET $1
 GET /api/contacts 200 in 245ms
prisma:query SELECT "public"."Contact"."id", "public"."Contact"."name", "public"."Contact"."email", "public"."Contact"."phone", "public"."Contact"."company", "public"."Contact"."role", "public"."Contact"."message", "public"."Contact"."type", "public"."Contact"."status", "public"."Contact"."priority", "public"."Contact"."notes", "public"."Contact"."createdAt", "public"."Contact"."updatedAt" FROM "public"."Contact" WHERE 1=1 ORDER BY "public"."Contact"."createdAt" DESC OFFSET $1
 GET /api/contacts 200 in 237ms
prisma:query SELECT "public"."Registration"."id", "public"."Registration"."eventId", "public"."Registration"."fullName", "public"."Registration"."email", "public"."Registration"."phone", "public"."Registration"."organization", "public"."Registration"."experience", "public"."Registration"."expectation", "public"."Registration"."status", "public"."Registration"."createdAt", "public"."Registration"."updatedAt" FROM "public"."Registration" WHERE 1=1 ORDER BY "public"."Registration"."createdAt" DESC OFFSET $1
 GET /api/registrations 200 in 247ms
 GET /api/events 200 in 244ms
prisma:query SELECT "public"."Event"."id", "public"."Event"."title", "public"."Event"."description", "public"."Event"."date", "public"."Event"."time", "public"."Event"."location", "public"."Event"."capacity", "public"."Event"."price", "public"."Event"."speakers", "public"."Event"."requirements", "public"."Event"."agenda", "public"."Event"."image", "public"."Event"."category", "public"."Event"."status", "public"."Event"."registrationsCount", "public"."Event"."actualParticipants", "public"."Event"."createdAt", "public"."Event"."updatedAt" FROM "public"."Event" WHERE 1=1 ORDER BY "public"."Event"."createdAt" ASC OFFSET $1
prisma:query SELECT "public"."Registration"."id", "public"."Registration"."eventId" FROM "public"."Registration" WHERE ("public"."Registration"."status" <> $1 AND "public"."Registration"."eventId" IN ($2)) OFFSET $3
prisma:query SELECT "public"."Registration"."id", "public"."Registration"."eventId", "public"."Registration"."fullName", "public"."Registration"."email", "public"."Registration"."phone", "public"."Registration"."organization", "public"."Registration"."experience", "public"."Registration"."expectation", "public"."Registration"."status", "public"."Registration"."createdAt", "public"."Registration"."updatedAt" FROM "public"."Registration" WHERE 1=1 ORDER BY "public"."Registration"."createdAt" DESC OFFSET $1
 GET /api/registrations 200 in 270ms
prisma:query SELECT "public"."Event"."id", "public"."Event"."title", "public"."Event"."description", "public"."Event"."date", "public"."Event"."time", "public"."Event"."location", "public"."Event"."capacity", "public"."Event"."price", "public"."Event"."speakers", "public"."Event"."requirements", "public"."Event"."agenda", "public"."Event"."image", "public"."Event"."category", "public"."Event"."status", "public"."Event"."registrationsCount", "public"."Event"."actualParticipants", "public"."Event"."createdAt", "public"."Event"."updatedAt" FROM "public"."Event" WHERE 1=1 ORDER BY "public"."Event"."createdAt" ASC OFFSET $1
prisma:query SELECT "public"."Registration"."id", "public"."Registration"."eventId" FROM "public"."Registration" WHERE ("public"."Registration"."status" <> $1 AND "public"."Registration"."eventId" IN ($2)) OFFSET $3
 GET /api/events 200 in 271ms
 GET /api/events 200 in 259ms
prisma:query SELECT "public"."Event"."id", "public"."Event"."title", "public"."Event"."description", "public"."Event"."date", "public"."Event"."time", "public"."Event"."location", "public"."Event"."capacity", "public"."Event"."price", "public"."Event"."speakers", "public"."Event"."requirements", "public"."Event"."agenda", "public"."Event"."image", "public"."Event"."category", "public"."Event"."status", "public"."Event"."registrationsCount", "public"."Event"."actualParticipants", "public"."Event"."createdAt", "public"."Event"."updatedAt" FROM "public"."Event" WHERE 1=1 ORDER BY "public"."Event"."createdAt" ASC OFFSET $1
prisma:query SELECT "public"."Registration"."id", "public"."Registration"."eventId" FROM "public"."Registration" WHERE ("public"."Registration"."status" <> $1 AND "public"."Registration"."eventId" IN ($2)) OFFSET $3
prisma:query SELECT "public"."Event"."id", "public"."Event"."title", "public"."Event"."description", "public"."Event"."date", "public"."Event"."time", "public"."Event"."location", "public"."Event"."capacity", "public"."Event"."price", "public"."Event"."speakers", "public"."Event"."requirements", "public"."Event"."agenda", "public"."Event"."image", "public"."Event"."category", "public"."Event"."status", "public"."Event"."registrationsCount", "public"."Event"."actualParticipants", "public"."Event"."createdAt", "public"."Event"."updatedAt" FROM "public"."Event" WHERE 1=1 ORDER BY "public"."Event"."createdAt" ASC OFFSET $1
prisma:query SELECT "public"."Registration"."id", "public"."Registration"."eventId" FROM "public"."Registration" WHERE ("public"."Registration"."status" <> $1 AND "public"."Registration"."eventId" IN ($2)) OFFSET $3
 GET /api/events 200 in 304ms
prisma:query SELECT 1
prisma:query SELECT "public"."User"."id", "public"."User"."name", "public"."User"."email", "public"."User"."phone", "public"."User"."company", "public"."User"."role", "public"."User"."status", "public"."User"."joinDate", "public"."User"."lastActive" FROM "public"."User" WHERE ("public"."User"."email" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query INSERT INTO "public"."User" ("id","name","email","phone","company","role","status","joinDate","lastActive") VALUES ($1,$2,$3,$4,$5,$6,$7,$8,$9) RETURNING "public"."User"."id", "public"."User"."name", "public"."User"."email", "public"."User"."phone", "public"."User"."company", "public"."User"."role", "public"."User"."status", "public"."User"."joinDate", "public"."User"."lastActive"
 POST /api/users 201 in 271ms
prisma:query SELECT "public"."User"."id", "public"."User"."name", "public"."User"."email", "public"."User"."phone", "public"."User"."company", "public"."User"."role", "public"."User"."status", "public"."User"."joinDate", "public"."User"."lastActive" FROM "public"."User" WHERE 1=1 ORDER BY "public"."User"."name" ASC OFFSET $1
 GET /api/users 200 in 248ms
prisma:query SELECT "public"."User"."id", "public"."User"."name", "public"."User"."email", "public"."User"."phone", "public"."User"."company", "public"."User"."role", "public"."User"."status", "public"."User"."joinDate", "public"."User"."lastActive" FROM "public"."User" WHERE 1=1 ORDER BY "public"."User"."name" ASC OFFSET $1
 GET /api/users 200 in 248ms
 ✓ Compiled in 162ms
prisma:query SELECT 1
prisma:query SELECT "public"."Registration"."id", "public"."Registration"."eventId", "public"."Registration"."fullName", "public"."Registration"."email", "public"."Registration"."phone", "public"."Registration"."organization", "public"."Registration"."experience", "public"."Registration"."expectation", "public"."Registration"."status", "public"."Registration"."createdAt", "public"."Registration"."updatedAt" FROM "public"."Registration" WHERE 1=1 ORDER BY "public"."Registration"."createdAt" DESC OFFSET $1
 GET /api/registrations 200 in 272ms
 GET /api/events 200 in 272ms
prisma:query SELECT "public"."Event"."id", "public"."Event"."title", "public"."Event"."description", "public"."Event"."date", "public"."Event"."time", "public"."Event"."location", "public"."Event"."capacity", "public"."Event"."price", "public"."Event"."speakers", "public"."Event"."requirements", "public"."Event"."agenda", "public"."Event"."image", "public"."Event"."category", "public"."Event"."status", "public"."Event"."registrationsCount", "public"."Event"."actualParticipants", "public"."Event"."createdAt", "public"."Event"."updatedAt" FROM "public"."Event" WHERE 1=1 ORDER BY "public"."Event"."createdAt" ASC OFFSET $1
prisma:query SELECT "public"."Registration"."id", "public"."Registration"."eventId" FROM "public"."Registration" WHERE ("public"."Registration"."status" <> $1 AND "public"."Registration"."eventId" IN ($2)) OFFSET $3
prisma:query SELECT "public"."Registration"."id", "public"."Registration"."eventId", "public"."Registration"."fullName", "public"."Registration"."email", "public"."Registration"."phone", "public"."Registration"."organization", "public"."Registration"."experience", "public"."Registration"."expectation", "public"."Registration"."status", "public"."Registration"."createdAt", "public"."Registration"."updatedAt" FROM "public"."Registration" WHERE 1=1 ORDER BY "public"."Registration"."createdAt" DESC OFFSET $1
 GET /api/registrations 200 in 266ms
 GET /api/events 200 in 267ms
prisma:query SELECT "public"."Event"."id", "public"."Event"."title", "public"."Event"."description", "public"."Event"."date", "public"."Event"."time", "public"."Event"."location", "public"."Event"."capacity", "public"."Event"."price", "public"."Event"."speakers", "public"."Event"."requirements", "public"."Event"."agenda", "public"."Event"."image", "public"."Event"."category", "public"."Event"."status", "public"."Event"."registrationsCount", "public"."Event"."actualParticipants", "public"."Event"."createdAt", "public"."Event"."updatedAt" FROM "public"."Event" WHERE 1=1 ORDER BY "public"."Event"."createdAt" ASC OFFSET $1
prisma:query SELECT "public"."Registration"."id", "public"."Registration"."eventId" FROM "public"."Registration" WHERE ("public"."Registration"."status" <> $1 AND "public"."Registration"."eventId" IN ($2)) OFFSET $3
prisma:query SELECT "public"."Event"."id", "public"."Event"."title", "public"."Event"."description", "public"."Event"."date", "public"."Event"."time", "public"."Event"."location", "public"."Event"."capacity", "public"."Event"."price", "public"."Event"."speakers", "public"."Event"."requirements", "public"."Event"."agenda", "public"."Event"."image", "public"."Event"."category", "public"."Event"."status", "public"."Event"."registrationsCount", "public"."Event"."actualParticipants", "public"."Event"."createdAt", "public"."Event"."updatedAt" FROM "public"."Event" WHERE 1=1 ORDER BY "public"."Event"."createdAt" ASC OFFSET $1
prisma:query SELECT "public"."Registration"."id", "public"."Registration"."eventId" FROM "public"."Registration" WHERE ("public"."Registration"."status" <> $1 AND "public"."Registration"."eventId" IN ($2)) OFFSET $3
 GET /api/events 200 in 249ms
prisma:query SELECT "public"."Event"."id", "public"."Event"."title", "public"."Event"."description", "public"."Event"."date", "public"."Event"."time", "public"."Event"."location", "public"."Event"."capacity", "public"."Event"."price", "public"."Event"."speakers", "public"."Event"."requirements", "public"."Event"."agenda", "public"."Event"."image", "public"."Event"."category", "public"."Event"."status", "public"."Event"."registrationsCount", "public"."Event"."actualParticipants", "public"."Event"."createdAt", "public"."Event"."updatedAt" FROM "public"."Event" WHERE 1=1 ORDER BY "public"."Event"."createdAt" ASC OFFSET $1
prisma:query SELECT "public"."Registration"."id", "public"."Registration"."eventId" FROM "public"."Registration" WHERE ("public"."Registration"."status" <> $1 AND "public"."Registration"."eventId" IN ($2)) OFFSET $3
 GET /api/events 200 in 253ms
prisma:query SELECT "public"."Registration"."id", "public"."Registration"."eventId", "public"."Registration"."fullName", "public"."Registration"."email", "public"."Registration"."phone", "public"."Registration"."organization", "public"."Registration"."experience", "public"."Registration"."expectation", "public"."Registration"."status", "public"."Registration"."createdAt", "public"."Registration"."updatedAt" FROM "public"."Registration" WHERE 1=1 ORDER BY "public"."Registration"."createdAt" DESC OFFSET $1
 GET /api/registrations 200 in 259ms
 GET /api/events 200 in 261ms
prisma:query SELECT "public"."Event"."id", "public"."Event"."title", "public"."Event"."description", "public"."Event"."date", "public"."Event"."time", "public"."Event"."location", "public"."Event"."capacity", "public"."Event"."price", "public"."Event"."speakers", "public"."Event"."requirements", "public"."Event"."agenda", "public"."Event"."image", "public"."Event"."category", "public"."Event"."status", "public"."Event"."registrationsCount", "public"."Event"."actualParticipants", "public"."Event"."createdAt", "public"."Event"."updatedAt" FROM "public"."Event" WHERE 1=1 ORDER BY "public"."Event"."createdAt" ASC OFFSET $1
prisma:query SELECT "public"."Registration"."id", "public"."Registration"."eventId" FROM "public"."Registration" WHERE ("public"."Registration"."status" <> $1 AND "public"."Registration"."eventId" IN ($2)) OFFSET $3
prisma:query SELECT "public"."Registration"."id", "public"."Registration"."eventId", "public"."Registration"."fullName", "public"."Registration"."email", "public"."Registration"."phone", "public"."Registration"."organization", "public"."Registration"."experience", "public"."Registration"."expectation", "public"."Registration"."status", "public"."Registration"."createdAt", "public"."Registration"."updatedAt" FROM "public"."Registration" WHERE 1=1 ORDER BY "public"."Registration"."createdAt" DESC OFFSET $1
 GET /api/registrations 200 in 262ms
 GET /api/events 200 in 264ms
prisma:query SELECT "public"."Event"."id", "public"."Event"."title", "public"."Event"."description", "public"."Event"."date", "public"."Event"."time", "public"."Event"."location", "public"."Event"."capacity", "public"."Event"."price", "public"."Event"."speakers", "public"."Event"."requirements", "public"."Event"."agenda", "public"."Event"."image", "public"."Event"."category", "public"."Event"."status", "public"."Event"."registrationsCount", "public"."Event"."actualParticipants", "public"."Event"."createdAt", "public"."Event"."updatedAt" FROM "public"."Event" WHERE 1=1 ORDER BY "public"."Event"."createdAt" ASC OFFSET $1
prisma:query SELECT "public"."Registration"."id", "public"."Registration"."eventId" FROM "public"."Registration" WHERE ("public"."Registration"."status" <> $1 AND "public"."Registration"."eventId" IN ($2)) OFFSET $3
 ✓ Compiled in 168ms
prisma:query SELECT "public"."Event"."id", "public"."Event"."title", "public"."Event"."description", "public"."Event"."date", "public"."Event"."time", "public"."Event"."location", "public"."Event"."capacity", "public"."Event"."price", "public"."Event"."speakers", "public"."Event"."requirements", "public"."Event"."agenda", "public"."Event"."image", "public"."Event"."category", "public"."Event"."status", "public"."Event"."registrationsCount", "public"."Event"."actualParticipants", "public"."Event"."createdAt", "public"."Event"."updatedAt" FROM "public"."Event" WHERE 1=1 ORDER BY "public"."Event"."createdAt" ASC OFFSET $1
prisma:query SELECT "public"."Registration"."id", "public"."Registration"."eventId" FROM "public"."Registration" WHERE ("public"."Registration"."status" <> $1 AND "public"."Registration"."eventId" IN ($2)) OFFSET $3
 GET /api/events 200 in 280ms
prisma:query SELECT "public"."Event"."id", "public"."Event"."title", "public"."Event"."description", "public"."Event"."date", "public"."Event"."time", "public"."Event"."location", "public"."Event"."capacity", "public"."Event"."price", "public"."Event"."speakers", "public"."Event"."requirements", "public"."Event"."agenda", "public"."Event"."image", "public"."Event"."category", "public"."Event"."status", "public"."Event"."registrationsCount", "public"."Event"."actualParticipants", "public"."Event"."createdAt", "public"."Event"."updatedAt" FROM "public"."Event" WHERE 1=1 ORDER BY "public"."Event"."createdAt" ASC OFFSET $1
prisma:query SELECT "public"."Registration"."id", "public"."Registration"."eventId" FROM "public"."Registration" WHERE ("public"."Registration"."status" <> $1 AND "public"."Registration"."eventId" IN ($2)) OFFSET $3
 GET /api/events 200 in 255ms
prisma:query SELECT "public"."Registration"."id", "public"."Registration"."eventId", "public"."Registration"."fullName", "public"."Registration"."email", "public"."Registration"."phone", "public"."Registration"."organization", "public"."Registration"."experience", "public"."Registration"."expectation", "public"."Registration"."status", "public"."Registration"."createdAt", "public"."Registration"."updatedAt" FROM "public"."Registration" WHERE 1=1 ORDER BY "public"."Registration"."createdAt" DESC OFFSET $1
 GET /api/registrations 200 in 259ms
 GET /api/events 200 in 260ms
prisma:query SELECT "public"."Event"."id", "public"."Event"."title", "public"."Event"."description", "public"."Event"."date", "public"."Event"."time", "public"."Event"."location", "public"."Event"."capacity", "public"."Event"."price", "public"."Event"."speakers", "public"."Event"."requirements", "public"."Event"."agenda", "public"."Event"."image", "public"."Event"."category", "public"."Event"."status", "public"."Event"."registrationsCount", "public"."Event"."actualParticipants", "public"."Event"."createdAt", "public"."Event"."updatedAt" FROM "public"."Event" WHERE 1=1 ORDER BY "public"."Event"."createdAt" ASC OFFSET $1
prisma:query SELECT "public"."Registration"."id", "public"."Registration"."eventId" FROM "public"."Registration" WHERE ("public"."Registration"."status" <> $1 AND "public"."Registration"."eventId" IN ($2)) OFFSET $3
prisma:query SELECT "public"."Registration"."id", "public"."Registration"."eventId", "public"."Registration"."fullName", "public"."Registration"."email", "public"."Registration"."phone", "public"."Registration"."organization", "public"."Registration"."experience", "public"."Registration"."expectation", "public"."Registration"."status", "public"."Registration"."createdAt", "public"."Registration"."updatedAt" FROM "public"."Registration" WHERE 1=1 ORDER BY "public"."Registration"."createdAt" DESC OFFSET $1
 GET /api/registrations 200 in 251ms
 GET /api/events 200 in 252ms
prisma:query SELECT "public"."Event"."id", "public"."Event"."title", "public"."Event"."description", "public"."Event"."date", "public"."Event"."time", "public"."Event"."location", "public"."Event"."capacity", "public"."Event"."price", "public"."Event"."speakers", "public"."Event"."requirements", "public"."Event"."agenda", "public"."Event"."image", "public"."Event"."category", "public"."Event"."status", "public"."Event"."registrationsCount", "public"."Event"."actualParticipants", "public"."Event"."createdAt", "public"."Event"."updatedAt" FROM "public"."Event" WHERE 1=1 ORDER BY "public"."Event"."createdAt" ASC OFFSET $1
prisma:query SELECT "public"."Registration"."id", "public"."Registration"."eventId" FROM "public"."Registration" WHERE ("public"."Registration"."status" <> $1 AND "public"."Registration"."eventId" IN ($2)) OFFSET $3
prisma:query SELECT 1
prisma:query SELECT "public"."Contact"."id", "public"."Contact"."name", "public"."Contact"."email", "public"."Contact"."phone", "public"."Contact"."company", "public"."Contact"."role", "public"."Contact"."message", "public"."Contact"."type", "public"."Contact"."status", "public"."Contact"."priority", "public"."Contact"."notes", "public"."Contact"."createdAt", "public"."Contact"."updatedAt" FROM "public"."Contact" WHERE 1=1 ORDER BY "public"."Contact"."createdAt" DESC OFFSET $1
 GET /api/contacts 200 in 263ms
prisma:query SELECT "public"."Contact"."id", "public"."Contact"."name", "public"."Contact"."email", "public"."Contact"."phone", "public"."Contact"."company", "public"."Contact"."role", "public"."Contact"."message", "public"."Contact"."type", "public"."Contact"."status", "public"."Contact"."priority", "public"."Contact"."notes", "public"."Contact"."createdAt", "public"."Contact"."updatedAt" FROM "public"."Contact" WHERE 1=1 ORDER BY "public"."Contact"."createdAt" DESC OFFSET $1
 GET /api/contacts 200 in 284ms
prisma:query SELECT "public"."User"."id", "public"."User"."name", "public"."User"."email", "public"."User"."phone", "public"."User"."company", "public"."User"."role", "public"."User"."status", "public"."User"."joinDate", "public"."User"."lastActive" FROM "public"."User" WHERE 1=1 ORDER BY "public"."User"."name" ASC OFFSET $1
 GET /api/users 200 in 269ms
prisma:query SELECT "public"."User"."id", "public"."User"."name", "public"."User"."email", "public"."User"."phone", "public"."User"."company", "public"."User"."role", "public"."User"."status", "public"."User"."joinDate", "public"."User"."lastActive" FROM "public"."User" WHERE 1=1 ORDER BY "public"."User"."name" ASC OFFSET $1
 GET /api/users 200 in 284ms
prisma:query SELECT 1
prisma:query SELECT "public"."Contact"."id", "public"."Contact"."name", "public"."Contact"."email", "public"."Contact"."phone", "public"."Contact"."company", "public"."Contact"."role", "public"."Contact"."message", "public"."Contact"."type", "public"."Contact"."status", "public"."Contact"."priority", "public"."Contact"."notes", "public"."Contact"."createdAt", "public"."Contact"."updatedAt" FROM "public"."Contact" WHERE 1=1 ORDER BY "public"."Contact"."createdAt" DESC OFFSET $1
 GET /api/contacts 200 in 261ms
prisma:query SELECT "public"."Contact"."id", "public"."Contact"."name", "public"."Contact"."email", "public"."Contact"."phone", "public"."Contact"."company", "public"."Contact"."role", "public"."Contact"."message", "public"."Contact"."type", "public"."Contact"."status", "public"."Contact"."priority", "public"."Contact"."notes", "public"."Contact"."createdAt", "public"."Contact"."updatedAt" FROM "public"."Contact" WHERE 1=1 ORDER BY "public"."Contact"."createdAt" DESC OFFSET $1
 GET /api/contacts 200 in 255ms
prisma:query SELECT "public"."Registration"."id", "public"."Registration"."eventId", "public"."Registration"."fullName", "public"."Registration"."email", "public"."Registration"."phone", "public"."Registration"."organization", "public"."Registration"."experience", "public"."Registration"."expectation", "public"."Registration"."status", "public"."Registration"."createdAt", "public"."Registration"."updatedAt" FROM "public"."Registration" WHERE 1=1 ORDER BY "public"."Registration"."createdAt" DESC OFFSET $1
 GET /api/registrations 200 in 276ms
 GET /api/events 200 in 276ms
prisma:query SELECT "public"."Event"."id", "public"."Event"."title", "public"."Event"."description", "public"."Event"."date", "public"."Event"."time", "public"."Event"."location", "public"."Event"."capacity", "public"."Event"."price", "public"."Event"."speakers", "public"."Event"."requirements", "public"."Event"."agenda", "public"."Event"."image", "public"."Event"."category", "public"."Event"."status", "public"."Event"."registrationsCount", "public"."Event"."actualParticipants", "public"."Event"."createdAt", "public"."Event"."updatedAt" FROM "public"."Event" WHERE 1=1 ORDER BY "public"."Event"."createdAt" ASC OFFSET $1
prisma:query SELECT "public"."Registration"."id", "public"."Registration"."eventId" FROM "public"."Registration" WHERE ("public"."Registration"."status" <> $1 AND "public"."Registration"."eventId" IN ($2)) OFFSET $3
prisma:query SELECT "public"."Event"."id", "public"."Event"."title", "public"."Event"."description", "public"."Event"."date", "public"."Event"."time", "public"."Event"."location", "public"."Event"."capacity", "public"."Event"."price", "public"."Event"."speakers", "public"."Event"."requirements", "public"."Event"."agenda", "public"."Event"."image", "public"."Event"."category", "public"."Event"."status", "public"."Event"."registrationsCount", "public"."Event"."actualParticipants", "public"."Event"."createdAt", "public"."Event"."updatedAt" FROM "public"."Event" WHERE 1=1 ORDER BY "public"."Event"."createdAt" ASC OFFSET $1
prisma:query SELECT "public"."Registration"."id", "public"."Registration"."eventId" FROM "public"."Registration" WHERE ("public"."Registration"."status" <> $1 AND "public"."Registration"."eventId" IN ($2)) OFFSET $3
 GET /api/events 200 in 270ms
 GET /api/registrations 200 in 271ms
prisma:query SELECT "public"."Registration"."id", "public"."Registration"."eventId", "public"."Registration"."fullName", "public"."Registration"."email", "public"."Registration"."phone", "public"."Registration"."organization", "public"."Registration"."experience", "public"."Registration"."expectation", "public"."Registration"."status", "public"."Registration"."createdAt", "public"."Registration"."updatedAt" FROM "public"."Registration" WHERE 1=1 ORDER BY "public"."Registration"."createdAt" DESC OFFSET $1
prisma:query SELECT "public"."Event"."id", "public"."Event"."title", "public"."Event"."description", "public"."Event"."date", "public"."Event"."time", "public"."Event"."location", "public"."Event"."capacity", "public"."Event"."price", "public"."Event"."speakers", "public"."Event"."requirements", "public"."Event"."agenda", "public"."Event"."image", "public"."Event"."category", "public"."Event"."status", "public"."Event"."registrationsCount", "public"."Event"."actualParticipants", "public"."Event"."createdAt", "public"."Event"."updatedAt" FROM "public"."Event" WHERE 1=1 ORDER BY "public"."Event"."createdAt" ASC OFFSET $1
prisma:query SELECT "public"."Registration"."id", "public"."Registration"."eventId" FROM "public"."Registration" WHERE ("public"."Registration"."status" <> $1 AND "public"."Registration"."eventId" IN ($2)) OFFSET $3
 GET /api/events 200 in 275ms
prisma:query SELECT "public"."Event"."id", "public"."Event"."title", "public"."Event"."description", "public"."Event"."date", "public"."Event"."time", "public"."Event"."location", "public"."Event"."capacity", "public"."Event"."price", "public"."Event"."speakers", "public"."Event"."requirements", "public"."Event"."agenda", "public"."Event"."image", "public"."Event"."category", "public"."Event"."status", "public"."Event"."registrationsCount", "public"."Event"."actualParticipants", "public"."Event"."createdAt", "public"."Event"."updatedAt" FROM "public"."Event" WHERE 1=1 ORDER BY "public"."Event"."createdAt" ASC OFFSET $1
prisma:query SELECT "public"."Registration"."id", "public"."Registration"."eventId" FROM "public"."Registration" WHERE ("public"."Registration"."status" <> $1 AND "public"."Registration"."eventId" IN ($2)) OFFSET $3
 GET /api/events 200 in 261ms
 ✓ Compiled in 143ms
prisma:query SELECT "public"."Registration"."id", "public"."Registration"."eventId", "public"."Registration"."fullName", "public"."Registration"."email", "public"."Registration"."phone", "public"."Registration"."organization", "public"."Registration"."experience", "public"."Registration"."expectation", "public"."Registration"."status", "public"."Registration"."createdAt", "public"."Registration"."updatedAt" FROM "public"."Registration" WHERE 1=1 ORDER BY "public"."Registration"."createdAt" DESC OFFSET $1
 GET /api/registrations 200 in 254ms
 GET /api/events 200 in 254ms
prisma:query SELECT "public"."Event"."id", "public"."Event"."title", "public"."Event"."description", "public"."Event"."date", "public"."Event"."time", "public"."Event"."location", "public"."Event"."capacity", "public"."Event"."price", "public"."Event"."speakers", "public"."Event"."requirements", "public"."Event"."agenda", "public"."Event"."image", "public"."Event"."category", "public"."Event"."status", "public"."Event"."registrationsCount", "public"."Event"."actualParticipants", "public"."Event"."createdAt", "public"."Event"."updatedAt" FROM "public"."Event" WHERE 1=1 ORDER BY "public"."Event"."createdAt" ASC OFFSET $1
prisma:query SELECT "public"."Registration"."id", "public"."Registration"."eventId" FROM "public"."Registration" WHERE ("public"."Registration"."status" <> $1 AND "public"."Registration"."eventId" IN ($2)) OFFSET $3
prisma:query SELECT "public"."Registration"."id", "public"."Registration"."eventId", "public"."Registration"."fullName", "public"."Registration"."email", "public"."Registration"."phone", "public"."Registration"."organization", "public"."Registration"."experience", "public"."Registration"."expectation", "public"."Registration"."status", "public"."Registration"."createdAt", "public"."Registration"."updatedAt" FROM "public"."Registration" WHERE 1=1 ORDER BY "public"."Registration"."createdAt" DESC OFFSET $1
 GET /api/registrations 200 in 251ms
prisma:query SELECT "public"."Event"."id", "public"."Event"."title", "public"."Event"."description", "public"."Event"."date", "public"."Event"."time", "public"."Event"."location", "public"."Event"."capacity", "public"."Event"."price", "public"."Event"."speakers", "public"."Event"."requirements", "public"."Event"."agenda", "public"."Event"."image", "public"."Event"."category", "public"."Event"."status", "public"."Event"."registrationsCount", "public"."Event"."actualParticipants", "public"."Event"."createdAt", "public"."Event"."updatedAt" FROM "public"."Event" WHERE 1=1 ORDER BY "public"."Event"."createdAt" ASC OFFSET $1
prisma:query SELECT "public"."Registration"."id", "public"."Registration"."eventId" FROM "public"."Registration" WHERE ("public"."Registration"."status" <> $1 AND "public"."Registration"."eventId" IN ($2)) OFFSET $3
 GET /api/events 200 in 250ms
prisma:query SELECT "public"."Event"."id", "public"."Event"."title", "public"."Event"."description", "public"."Event"."date", "public"."Event"."time", "public"."Event"."location", "public"."Event"."capacity", "public"."Event"."price", "public"."Event"."speakers", "public"."Event"."requirements", "public"."Event"."agenda", "public"."Event"."image", "public"."Event"."category", "public"."Event"."status", "public"."Event"."registrationsCount", "public"."Event"."actualParticipants", "public"."Event"."createdAt", "public"."Event"."updatedAt" FROM "public"."Event" WHERE 1=1 ORDER BY "public"."Event"."createdAt" ASC OFFSET $1
prisma:query SELECT "public"."Registration"."id", "public"."Registration"."eventId" FROM "public"."Registration" WHERE ("public"."Registration"."status" <> $1 AND "public"."Registration"."eventId" IN ($2)) OFFSET $3
 GET /api/events 200 in 240ms
prisma:query SELECT "public"."Event"."id", "public"."Event"."title", "public"."Event"."description", "public"."Event"."date", "public"."Event"."time", "public"."Event"."location", "public"."Event"."capacity", "public"."Event"."price", "public"."Event"."speakers", "public"."Event"."requirements", "public"."Event"."agenda", "public"."Event"."image", "public"."Event"."category", "public"."Event"."status", "public"."Event"."registrationsCount", "public"."Event"."actualParticipants", "public"."Event"."createdAt", "public"."Event"."updatedAt" FROM "public"."Event" WHERE 1=1 ORDER BY "public"."Event"."createdAt" ASC OFFSET $1
prisma:query SELECT "public"."Registration"."id", "public"."Registration"."eventId" FROM "public"."Registration" WHERE ("public"."Registration"."status" <> $1 AND "public"."Registration"."eventId" IN ($2)) OFFSET $3
 GET /api/events 200 in 240ms
prisma:query SELECT 1
prisma:query UPDATE "public"."Event" SET "title" = $1, "description" = $2, "time" = $3, "location" = $4, "capacity" = $5, "price" = $6, "speakers" = $7, "requirements" = $8, "agenda" = $9, "image" = $10, "category" = $11, "status" = $12, "updatedAt" = $13 WHERE ("public"."Event"."id" = $14 AND 1=1) RETURNING "public"."Event"."id", "public"."Event"."title", "public"."Event"."description", "public"."Event"."date", "public"."Event"."time", "public"."Event"."location", "public"."Event"."capacity", "public"."Event"."price", "public"."Event"."speakers", "public"."Event"."requirements", "public"."Event"."agenda", "public"."Event"."image", "public"."Event"."category", "public"."Event"."status", "public"."Event"."registrationsCount", "public"."Event"."actualParticipants", "public"."Event"."createdAt", "public"."Event"."updatedAt"
 PUT /api/events/1758699207887 200 in 253ms
prisma:query SELECT "public"."Registration"."id", "public"."Registration"."eventId", "public"."Registration"."fullName", "public"."Registration"."email", "public"."Registration"."phone", "public"."Registration"."organization", "public"."Registration"."experience", "public"."Registration"."expectation", "public"."Registration"."status", "public"."Registration"."createdAt", "public"."Registration"."updatedAt" FROM "public"."Registration" WHERE 1=1 ORDER BY "public"."Registration"."createdAt" DESC OFFSET $1
 GET /api/registrations 200 in 255ms
 GET /api/events 200 in 259ms
prisma:query SELECT "public"."Event"."id", "public"."Event"."title", "public"."Event"."description", "public"."Event"."date", "public"."Event"."time", "public"."Event"."location", "public"."Event"."capacity", "public"."Event"."price", "public"."Event"."speakers", "public"."Event"."requirements", "public"."Event"."agenda", "public"."Event"."image", "public"."Event"."category", "public"."Event"."status", "public"."Event"."registrationsCount", "public"."Event"."actualParticipants", "public"."Event"."createdAt", "public"."Event"."updatedAt" FROM "public"."Event" WHERE 1=1 ORDER BY "public"."Event"."createdAt" ASC OFFSET $1
prisma:query SELECT "public"."Registration"."id", "public"."Registration"."eventId" FROM "public"."Registration" WHERE ("public"."Registration"."status" <> $1 AND "public"."Registration"."eventId" IN ($2)) OFFSET $3
prisma:query SELECT "public"."Event"."id", "public"."Event"."title", "public"."Event"."description", "public"."Event"."date", "public"."Event"."time", "public"."Event"."location", "public"."Event"."capacity", "public"."Event"."price", "public"."Event"."speakers", "public"."Event"."requirements", "public"."Event"."agenda", "public"."Event"."image", "public"."Event"."category", "public"."Event"."status", "public"."Event"."registrationsCount", "public"."Event"."actualParticipants", "public"."Event"."createdAt", "public"."Event"."updatedAt" FROM "public"."Event" WHERE 1=1 ORDER BY "public"."Event"."createdAt" ASC OFFSET $1
prisma:query SELECT "public"."Registration"."id", "public"."Registration"."eventId" FROM "public"."Registration" WHERE ("public"."Registration"."status" <> $1 AND "public"."Registration"."eventId" IN ($2)) OFFSET $3
 GET /api/events 200 in 265ms
prisma:query SELECT 1
prisma:query SELECT "public"."Registration"."id", "public"."Registration"."eventId", "public"."Registration"."fullName", "public"."Registration"."email", "public"."Registration"."phone", "public"."Registration"."organization", "public"."Registration"."experience", "public"."Registration"."expectation", "public"."Registration"."status", "public"."Registration"."createdAt", "public"."Registration"."updatedAt" FROM "public"."Registration" WHERE 1=1 ORDER BY "public"."Registration"."createdAt" DESC OFFSET $1
 GET /api/registrations 200 in 265ms
prisma:query SELECT "public"."Event"."id", "public"."Event"."title", "public"."Event"."description", "public"."Event"."date", "public"."Event"."time", "public"."Event"."location", "public"."Event"."capacity", "public"."Event"."price", "public"."Event"."speakers", "public"."Event"."requirements", "public"."Event"."agenda", "public"."Event"."image", "public"."Event"."category", "public"."Event"."status", "public"."Event"."registrationsCount", "public"."Event"."actualParticipants", "public"."Event"."createdAt", "public"."Event"."updatedAt" FROM "public"."Event" WHERE 1=1 ORDER BY "public"."Event"."createdAt" ASC OFFSET $1
prisma:query SELECT "public"."Registration"."id", "public"."Registration"."eventId" FROM "public"."Registration" WHERE ("public"."Registration"."status" <> $1 AND "public"."Registration"."eventId" IN ($2)) OFFSET $3
 GET /api/events 200 in 275ms
prisma:query SELECT "public"."Event"."id", "public"."Event"."title", "public"."Event"."description", "public"."Event"."date", "public"."Event"."time", "public"."Event"."location", "public"."Event"."capacity", "public"."Event"."price", "public"."Event"."speakers", "public"."Event"."requirements", "public"."Event"."agenda", "public"."Event"."image", "public"."Event"."category", "public"."Event"."status", "public"."Event"."registrationsCount", "public"."Event"."actualParticipants", "public"."Event"."createdAt", "public"."Event"."updatedAt" FROM "public"."Event" WHERE 1=1 ORDER BY "public"."Event"."createdAt" ASC OFFSET $1
prisma:query SELECT "public"."Registration"."id", "public"."Registration"."eventId" FROM "public"."Registration" WHERE ("public"."Registration"."status" <> $1 AND "public"."Registration"."eventId" IN ($2)) OFFSET $3
 GET /api/events 200 in 251ms
prisma:query UPDATE "public"."Event" SET "title" = $1, "description" = $2, "time" = $3, "location" = $4, "capacity" = $5, "price" = $6, "speakers" = $7, "requirements" = $8, "agenda" = $9, "image" = $10, "category" = $11, "status" = $12, "updatedAt" = $13 WHERE ("public"."Event"."id" = $14 AND 1=1) RETURNING "public"."Event"."id", "public"."Event"."title", "public"."Event"."description", "public"."Event"."date", "public"."Event"."time", "public"."Event"."location", "public"."Event"."capacity", "public"."Event"."price", "public"."Event"."speakers", "public"."Event"."requirements", "public"."Event"."agenda", "public"."Event"."image", "public"."Event"."category", "public"."Event"."status", "public"."Event"."registrationsCount", "public"."Event"."actualParticipants", "public"."Event"."createdAt", "public"."Event"."updatedAt"
 PUT /api/events/1758699207887 200 in 264ms
prisma:query SELECT "public"."Registration"."id", "public"."Registration"."eventId", "public"."Registration"."fullName", "public"."Registration"."email", "public"."Registration"."phone", "public"."Registration"."organization", "public"."Registration"."experience", "public"."Registration"."expectation", "public"."Registration"."status", "public"."Registration"."createdAt", "public"."Registration"."updatedAt" FROM "public"."Registration" WHERE 1=1 ORDER BY "public"."Registration"."createdAt" DESC OFFSET $1
 GET /api/registrations 200 in 249ms
prisma:query SELECT "public"."Event"."id", "public"."Event"."title", "public"."Event"."description", "public"."Event"."date", "public"."Event"."time", "public"."Event"."location", "public"."Event"."capacity", "public"."Event"."price", "public"."Event"."speakers", "public"."Event"."requirements", "public"."Event"."agenda", "public"."Event"."image", "public"."Event"."category", "public"."Event"."status", "public"."Event"."registrationsCount", "public"."Event"."actualParticipants", "public"."Event"."createdAt", "public"."Event"."updatedAt" FROM "public"."Event" WHERE 1=1 ORDER BY "public"."Event"."createdAt" ASC OFFSET $1
prisma:query SELECT "public"."Registration"."id", "public"."Registration"."eventId" FROM "public"."Registration" WHERE ("public"."Registration"."status" <> $1 AND "public"."Registration"."eventId" IN ($2)) OFFSET $3
 GET /api/events 200 in 252ms
prisma:query SELECT 1
prisma:query SELECT "public"."Registration"."id", "public"."Registration"."eventId", "public"."Registration"."fullName", "public"."Registration"."email", "public"."Registration"."phone", "public"."Registration"."organization", "public"."Registration"."experience", "public"."Registration"."expectation", "public"."Registration"."status", "public"."Registration"."createdAt", "public"."Registration"."updatedAt" FROM "public"."Registration" WHERE 1=1 ORDER BY "public"."Registration"."createdAt" DESC OFFSET $1
 GET /api/registrations 200 in 255ms
prisma:query SELECT "public"."Event"."id", "public"."Event"."title", "public"."Event"."description", "public"."Event"."date", "public"."Event"."time", "public"."Event"."location", "public"."Event"."capacity", "public"."Event"."price", "public"."Event"."speakers", "public"."Event"."requirements", "public"."Event"."agenda", "public"."Event"."image", "public"."Event"."category", "public"."Event"."status", "public"."Event"."registrationsCount", "public"."Event"."actualParticipants", "public"."Event"."createdAt", "public"."Event"."updatedAt" FROM "public"."Event" WHERE 1=1 ORDER BY "public"."Event"."createdAt" ASC OFFSET $1
prisma:query SELECT "public"."Registration"."id", "public"."Registration"."eventId" FROM "public"."Registration" WHERE ("public"."Registration"."status" <> $1 AND "public"."Registration"."eventId" IN ($2)) OFFSET $3
 GET /api/events 200 in 254ms
prisma:query SELECT "public"."Contact"."id", "public"."Contact"."name", "public"."Contact"."email", "public"."Contact"."phone", "public"."Contact"."company", "public"."Contact"."role", "public"."Contact"."message", "public"."Contact"."type", "public"."Contact"."status", "public"."Contact"."priority", "public"."Contact"."notes", "public"."Contact"."createdAt", "public"."Contact"."updatedAt" FROM "public"."Contact" WHERE 1=1 ORDER BY "public"."Contact"."createdAt" DESC OFFSET $1
 GET /api/contacts 200 in 241ms
prisma:query SELECT "public"."Contact"."id", "public"."Contact"."name", "public"."Contact"."email", "public"."Contact"."phone", "public"."Contact"."company", "public"."Contact"."role", "public"."Contact"."message", "public"."Contact"."type", "public"."Contact"."status", "public"."Contact"."priority", "public"."Contact"."notes", "public"."Contact"."createdAt", "public"."Contact"."updatedAt" FROM "public"."Contact" WHERE 1=1 ORDER BY "public"."Contact"."createdAt" DESC OFFSET $1
 GET /api/contacts 200 in 244ms
prisma:query SELECT "public"."User"."id", "public"."User"."name", "public"."User"."email", "public"."User"."phone", "public"."User"."company", "public"."User"."role", "public"."User"."status", "public"."User"."joinDate", "public"."User"."lastActive" FROM "public"."User" WHERE 1=1 ORDER BY "public"."User"."name" ASC OFFSET $1
 GET /api/users 200 in 286ms
prisma:query SELECT "public"."User"."id", "public"."User"."name", "public"."User"."email", "public"."User"."phone", "public"."User"."company", "public"."User"."role", "public"."User"."status", "public"."User"."joinDate", "public"."User"."lastActive" FROM "public"."User" WHERE 1=1 ORDER BY "public"."User"."name" ASC OFFSET $1
 GET /api/users 200 in 299ms
prisma:query SELECT "public"."Contact"."id", "public"."Contact"."name", "public"."Contact"."email", "public"."Contact"."phone", "public"."Contact"."company", "public"."Contact"."role", "public"."Contact"."message", "public"."Contact"."type", "public"."Contact"."status", "public"."Contact"."priority", "public"."Contact"."notes", "public"."Contact"."createdAt", "public"."Contact"."updatedAt" FROM "public"."Contact" WHERE 1=1 ORDER BY "public"."Contact"."createdAt" DESC OFFSET $1
 GET /api/contacts 200 in 235ms
prisma:query SELECT "public"."Contact"."id", "public"."Contact"."name", "public"."Contact"."email", "public"."Contact"."phone", "public"."Contact"."company", "public"."Contact"."role", "public"."Contact"."message", "public"."Contact"."type", "public"."Contact"."status", "public"."Contact"."priority", "public"."Contact"."notes", "public"."Contact"."createdAt", "public"."Contact"."updatedAt" FROM "public"."Contact" WHERE 1=1 ORDER BY "public"."Contact"."createdAt" DESC OFFSET $1
 GET /api/contacts 200 in 236ms
prisma:query SELECT "public"."Registration"."id", "public"."Registration"."eventId", "public"."Registration"."fullName", "public"."Registration"."email", "public"."Registration"."phone", "public"."Registration"."organization", "public"."Registration"."experience", "public"."Registration"."expectation", "public"."Registration"."status", "public"."Registration"."createdAt", "public"."Registration"."updatedAt" FROM "public"."Registration" WHERE 1=1 ORDER BY "public"."Registration"."createdAt" DESC OFFSET $1
 GET /api/registrations 200 in 250ms
 GET /api/events 200 in 251ms
prisma:query SELECT "public"."Event"."id", "public"."Event"."title", "public"."Event"."description", "public"."Event"."date", "public"."Event"."time", "public"."Event"."location", "public"."Event"."capacity", "public"."Event"."price", "public"."Event"."speakers", "public"."Event"."requirements", "public"."Event"."agenda", "public"."Event"."image", "public"."Event"."category", "public"."Event"."status", "public"."Event"."registrationsCount", "public"."Event"."actualParticipants", "public"."Event"."createdAt", "public"."Event"."updatedAt" FROM "public"."Event" WHERE 1=1 ORDER BY "public"."Event"."createdAt" ASC OFFSET $1
prisma:query SELECT "public"."Registration"."id", "public"."Registration"."eventId" FROM "public"."Registration" WHERE ("public"."Registration"."status" <> $1 AND "public"."Registration"."eventId" IN ($2)) OFFSET $3
prisma:query SELECT "public"."Event"."id", "public"."Event"."title", "public"."Event"."description", "public"."Event"."date", "public"."Event"."time", "public"."Event"."location", "public"."Event"."capacity", "public"."Event"."price", "public"."Event"."speakers", "public"."Event"."requirements", "public"."Event"."agenda", "public"."Event"."image", "public"."Event"."category", "public"."Event"."status", "public"."Event"."registrationsCount", "public"."Event"."actualParticipants", "public"."Event"."createdAt", "public"."Event"."updatedAt" FROM "public"."Event" WHERE 1=1 ORDER BY "public"."Event"."createdAt" ASC OFFSET $1
prisma:query SELECT "public"."Registration"."id", "public"."Registration"."eventId" FROM "public"."Registration" WHERE ("public"."Registration"."status" <> $1 AND "public"."Registration"."eventId" IN ($2)) OFFSET $3
 GET /api/events 200 in 252ms
 GET /api/registrations 200 in 250ms
prisma:query SELECT 1
prisma:query SELECT "public"."Registration"."id", "public"."Registration"."eventId", "public"."Registration"."fullName", "public"."Registration"."email", "public"."Registration"."phone", "public"."Registration"."organization", "public"."Registration"."experience", "public"."Registration"."expectation", "public"."Registration"."status", "public"."Registration"."createdAt", "public"."Registration"."updatedAt" FROM "public"."Registration" WHERE 1=1 ORDER BY "public"."Registration"."createdAt" DESC OFFSET $1
prisma:query SELECT "public"."Event"."id", "public"."Event"."title", "public"."Event"."description", "public"."Event"."date", "public"."Event"."time", "public"."Event"."location", "public"."Event"."capacity", "public"."Event"."price", "public"."Event"."speakers", "public"."Event"."requirements", "public"."Event"."agenda", "public"."Event"."image", "public"."Event"."category", "public"."Event"."status", "public"."Event"."registrationsCount", "public"."Event"."actualParticipants", "public"."Event"."createdAt", "public"."Event"."updatedAt" FROM "public"."Event" WHERE 1=1 ORDER BY "public"."Event"."createdAt" ASC OFFSET $1
prisma:query SELECT "public"."Registration"."id", "public"."Registration"."eventId" FROM "public"."Registration" WHERE ("public"."Registration"."status" <> $1 AND "public"."Registration"."eventId" IN ($2)) OFFSET $3
 GET /api/events 200 in 239ms
prisma:query SELECT "public"."Event"."id", "public"."Event"."title", "public"."Event"."description", "public"."Event"."date", "public"."Event"."time", "public"."Event"."location", "public"."Event"."capacity", "public"."Event"."price", "public"."Event"."speakers", "public"."Event"."requirements", "public"."Event"."agenda", "public"."Event"."image", "public"."Event"."category", "public"."Event"."status", "public"."Event"."registrationsCount", "public"."Event"."actualParticipants", "public"."Event"."createdAt", "public"."Event"."updatedAt" FROM "public"."Event" WHERE 1=1 ORDER BY "public"."Event"."createdAt" ASC OFFSET $1
prisma:query SELECT "public"."Registration"."id", "public"."Registration"."eventId" FROM "public"."Registration" WHERE ("public"."Registration"."status" <> $1 AND "public"."Registration"."eventId" IN ($2)) OFFSET $3
 GET /api/events 200 in 247ms
prisma:query SELECT "public"."Registration"."id", "public"."Registration"."eventId", "public"."Registration"."fullName", "public"."Registration"."email", "public"."Registration"."phone", "public"."Registration"."organization", "public"."Registration"."experience", "public"."Registration"."expectation", "public"."Registration"."status", "public"."Registration"."createdAt", "public"."Registration"."updatedAt" FROM "public"."Registration" WHERE 1=1 ORDER BY "public"."Registration"."createdAt" DESC OFFSET $1
 GET /api/registrations 200 in 249ms
 GET /api/events 200 in 243ms
prisma:query SELECT "public"."Event"."id", "public"."Event"."title", "public"."Event"."description", "public"."Event"."date", "public"."Event"."time", "public"."Event"."location", "public"."Event"."capacity", "public"."Event"."price", "public"."Event"."speakers", "public"."Event"."requirements", "public"."Event"."agenda", "public"."Event"."image", "public"."Event"."category", "public"."Event"."status", "public"."Event"."registrationsCount", "public"."Event"."actualParticipants", "public"."Event"."createdAt", "public"."Event"."updatedAt" FROM "public"."Event" WHERE 1=1 ORDER BY "public"."Event"."createdAt" ASC OFFSET $1
prisma:query SELECT "public"."Registration"."id", "public"."Registration"."eventId" FROM "public"."Registration" WHERE ("public"."Registration"."status" <> $1 AND "public"."Registration"."eventId" IN ($2)) OFFSET $3
prisma:query SELECT "public"."Registration"."id", "public"."Registration"."eventId", "public"."Registration"."fullName", "public"."Registration"."email", "public"."Registration"."phone", "public"."Registration"."organization", "public"."Registration"."experience", "public"."Registration"."expectation", "public"."Registration"."status", "public"."Registration"."createdAt", "public"."Registration"."updatedAt" FROM "public"."Registration" WHERE 1=1 ORDER BY "public"."Registration"."createdAt" DESC OFFSET $1
 GET /api/registrations 200 in 256ms
prisma:query SELECT "public"."Event"."id", "public"."Event"."title", "public"."Event"."description", "public"."Event"."date", "public"."Event"."time", "public"."Event"."location", "public"."Event"."capacity", "public"."Event"."price", "public"."Event"."speakers", "public"."Event"."requirements", "public"."Event"."agenda", "public"."Event"."image", "public"."Event"."category", "public"."Event"."status", "public"."Event"."registrationsCount", "public"."Event"."actualParticipants", "public"."Event"."createdAt", "public"."Event"."updatedAt" FROM "public"."Event" WHERE 1=1 ORDER BY "public"."Event"."createdAt" ASC OFFSET $1
prisma:query SELECT "public"."Registration"."id", "public"."Registration"."eventId" FROM "public"."Registration" WHERE ("public"."Registration"."status" <> $1 AND "public"."Registration"."eventId" IN ($2)) OFFSET $3
 GET /api/events 200 in 256ms
prisma:query SELECT "public"."Contact"."id", "public"."Contact"."name", "public"."Contact"."email", "public"."Contact"."phone", "public"."Contact"."company", "public"."Contact"."role", "public"."Contact"."message", "public"."Contact"."type", "public"."Contact"."status", "public"."Contact"."priority", "public"."Contact"."notes", "public"."Contact"."createdAt", "public"."Contact"."updatedAt" FROM "public"."Contact" WHERE 1=1 ORDER BY "public"."Contact"."createdAt" DESC OFFSET $1
 GET /api/contacts 200 in 238ms
prisma:query SELECT "public"."Contact"."id", "public"."Contact"."name", "public"."Contact"."email", "public"."Contact"."phone", "public"."Contact"."company", "public"."Contact"."role", "public"."Contact"."message", "public"."Contact"."type", "public"."Contact"."status", "public"."Contact"."priority", "public"."Contact"."notes", "public"."Contact"."createdAt", "public"."Contact"."updatedAt" FROM "public"."Contact" WHERE 1=1 ORDER BY "public"."Contact"."createdAt" DESC OFFSET $1
 GET /api/contacts 200 in 241ms
prisma:query SELECT "public"."Event"."id", "public"."Event"."title", "public"."Event"."description", "public"."Event"."date", "public"."Event"."time", "public"."Event"."location", "public"."Event"."capacity", "public"."Event"."price", "public"."Event"."speakers", "public"."Event"."requirements", "public"."Event"."agenda", "public"."Event"."image", "public"."Event"."category", "public"."Event"."status", "public"."Event"."registrationsCount", "public"."Event"."actualParticipants", "public"."Event"."createdAt", "public"."Event"."updatedAt" FROM "public"."Event" WHERE 1=1 ORDER BY "public"."Event"."createdAt" ASC OFFSET $1
prisma:query SELECT "public"."Registration"."id", "public"."Registration"."eventId" FROM "public"."Registration" WHERE ("public"."Registration"."status" <> $1 AND "public"."Registration"."eventId" IN ($2)) OFFSET $3
 GET /api/events 200 in 249ms
prisma:query SELECT "public"."Event"."id", "public"."Event"."title", "public"."Event"."description", "public"."Event"."date", "public"."Event"."time", "public"."Event"."location", "public"."Event"."capacity", "public"."Event"."price", "public"."Event"."speakers", "public"."Event"."requirements", "public"."Event"."agenda", "public"."Event"."image", "public"."Event"."category", "public"."Event"."status", "public"."Event"."registrationsCount", "public"."Event"."actualParticipants", "public"."Event"."createdAt", "public"."Event"."updatedAt" FROM "public"."Event" WHERE 1=1 ORDER BY "public"."Event"."createdAt" ASC OFFSET $1
prisma:query SELECT "public"."Registration"."id", "public"."Registration"."eventId" FROM "public"."Registration" WHERE ("public"."Registration"."status" <> $1 AND "public"."Registration"."eventId" IN ($2)) OFFSET $3
 GET /api/events 200 in 249ms
prisma:query SELECT 1
prisma:query SELECT "public"."Event"."id", "public"."Event"."title", "public"."Event"."description", "public"."Event"."date", "public"."Event"."time", "public"."Event"."location", "public"."Event"."capacity", "public"."Event"."price", "public"."Event"."speakers", "public"."Event"."requirements", "public"."Event"."agenda", "public"."Event"."image", "public"."Event"."category", "public"."Event"."status", "public"."Event"."registrationsCount", "public"."Event"."actualParticipants", "public"."Event"."createdAt", "public"."Event"."updatedAt" FROM "public"."Event" WHERE ("public"."Event"."id" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query INSERT INTO "public"."Registration" ("id","eventId","fullName","email","phone","organization","experience","expectation","status","createdAt","updatedAt") VALUES ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11) RETURNING "public"."Registration"."id", "public"."Registration"."eventId", "public"."Registration"."fullName", "public"."Registration"."email", "public"."Registration"."phone", "public"."Registration"."organization", "public"."Registration"."experience", "public"."Registration"."expectation", "public"."Registration"."status", "public"."Registration"."createdAt", "public"."Registration"."updatedAt"
prisma:query SELECT COUNT(*) FROM (SELECT "public"."Registration"."id" FROM "public"."Registration" WHERE ("public"."Registration"."eventId" = $1 AND (NOT "public"."Registration"."status" = $2)) OFFSET $3) AS "sub"
prisma:query UPDATE "public"."Event" SET "registrationsCount" = $1, "updatedAt" = $2 WHERE ("public"."Event"."id" = $3 AND 1=1) RETURNING "public"."Event"."id", "public"."Event"."title", "public"."Event"."description", "public"."Event"."date", "public"."Event"."time", "public"."Event"."location", "public"."Event"."capacity", "public"."Event"."price", "public"."Event"."speakers", "public"."Event"."requirements", "public"."Event"."agenda", "public"."Event"."image", "public"."Event"."category", "public"."Event"."status", "public"."Event"."registrationsCount", "public"."Event"."actualParticipants", "public"."Event"."createdAt", "public"."Event"."updatedAt"
 POST /api/registrations 201 in 258ms
prisma:query SELECT "public"."Event"."id", "public"."Event"."title", "public"."Event"."description", "public"."Event"."date", "public"."Event"."time", "public"."Event"."location", "public"."Event"."capacity", "public"."Event"."price", "public"."Event"."speakers", "public"."Event"."requirements", "public"."Event"."agenda", "public"."Event"."image", "public"."Event"."category", "public"."Event"."status", "public"."Event"."registrationsCount", "public"."Event"."actualParticipants", "public"."Event"."createdAt", "public"."Event"."updatedAt" FROM "public"."Event" WHERE 1=1 ORDER BY "public"."Event"."createdAt" ASC OFFSET $1
prisma:query SELECT "public"."Registration"."id", "public"."Registration"."eventId" FROM "public"."Registration" WHERE ("public"."Registration"."status" <> $1 AND "public"."Registration"."eventId" IN ($2)) OFFSET $3
 GET /api/events 200 in 248ms
 GET /admin 200 in 227ms
prisma:query SELECT 1
prisma:query SELECT 1
prisma:query SELECT 1
prisma:query SELECT 1
prisma:query SELECT 1
prisma:query SELECT COUNT(*) FROM (SELECT "public"."User"."id" FROM "public"."User" WHERE 1=1 OFFSET $1) AS "sub"
prisma:query SELECT COUNT(*) FROM (SELECT "public"."News"."id" FROM "public"."News" WHERE 1=1 OFFSET $1) AS "sub"
prisma:query SELECT COUNT(*) FROM (SELECT "public"."Event"."id" FROM "public"."Event" WHERE 1=1 OFFSET $1) AS "sub"
prisma:query SELECT COUNT(*) FROM (SELECT "public"."Registration"."id" FROM "public"."Registration" WHERE "public"."Registration"."status" <> $1 OFFSET $2) AS "sub"
prisma:query SELECT COUNT(*) FROM (SELECT "public"."Event"."id" FROM "public"."Event" WHERE "public"."Event"."status" = $1 OFFSET $2) AS "sub"
prisma:query SELECT COUNT(*) FROM (SELECT "public"."User"."id" FROM "public"."User" WHERE "public"."User"."status" = $1 OFFSET $2) AS "sub"
prisma:query SELECT "public"."Event"."id", "public"."Event"."title", "public"."Event"."description", "public"."Event"."date", "public"."Event"."time", "public"."Event"."location", "public"."Event"."capacity", "public"."Event"."price", "public"."Event"."speakers", "public"."Event"."requirements", "public"."Event"."agenda", "public"."Event"."image", "public"."Event"."category", "public"."Event"."status", "public"."Event"."registrationsCount", "public"."Event"."actualParticipants", "public"."Event"."createdAt", "public"."Event"."updatedAt" FROM "public"."Event" WHERE 1=1 ORDER BY "public"."Event"."createdAt" ASC OFFSET $1
prisma:query SELECT "public"."Registration"."id", "public"."Registration"."eventId" FROM "public"."Registration" WHERE ("public"."Registration"."status" <> $1 AND "public"."Registration"."eventId" IN ($2)) OFFSET $3
prisma:query SELECT COUNT(*) FROM (SELECT "public"."Contact"."id" FROM "public"."Contact" WHERE 1=1 OFFSET $1) AS "sub"
prisma:query SELECT COUNT(*) FROM (SELECT "public"."Contact"."id" FROM "public"."Contact" WHERE "public"."Contact"."status" = $1 OFFSET $2) AS "sub"
prisma:query SELECT COUNT(*) FROM (SELECT "public"."News"."id" FROM "public"."News" WHERE "public"."News"."published" = $1 OFFSET $2) AS "sub"
prisma:query SELECT "public"."News"."id", "public"."News"."title", "public"."News"."content", "public"."News"."excerpt", "public"."News"."author", "public"."News"."source", "public"."News"."category", "public"."News"."importance", "public"."News"."published", "public"."News"."publishedAt", "public"."News"."image", "public"."News"."tags", "public"."News"."link", "public"."News"."createdAt", "public"."News"."updatedAt" FROM "public"."News" WHERE 1=1 ORDER BY "public"."News"."createdAt" DESC OFFSET $1
 GET /api/stats 200 in 344ms
 GET /api/events 200 in 341ms
 GET /api/news 200 in 342ms
 GET /api/contacts 200 in 343ms
prisma:query SELECT "public"."Contact"."id", "public"."Contact"."name", "public"."Contact"."email", "public"."Contact"."phone", "public"."Contact"."company", "public"."Contact"."role", "public"."Contact"."message", "public"."Contact"."type", "public"."Contact"."status", "public"."Contact"."priority", "public"."Contact"."notes", "public"."Contact"."createdAt", "public"."Contact"."updatedAt" FROM "public"."Contact" WHERE 1=1 ORDER BY "public"."Contact"."createdAt" DESC OFFSET $1
prisma:query SELECT COUNT(*) FROM (SELECT "public"."News"."id" FROM "public"."News" WHERE 1=1 OFFSET $1) AS "sub"
prisma:query SELECT COUNT(*) FROM (SELECT "public"."Contact"."id" FROM "public"."Contact" WHERE "public"."Contact"."status" = $1 OFFSET $2) AS "sub"
prisma:query SELECT COUNT(*) FROM (SELECT "public"."News"."id" FROM "public"."News" WHERE "public"."News"."published" = $1 OFFSET $2) AS "sub"
prisma:query SELECT COUNT(*) FROM (SELECT "public"."Contact"."id" FROM "public"."Contact" WHERE 1=1 OFFSET $1) AS "sub"
prisma:query SELECT COUNT(*) FROM (SELECT "public"."Event"."id" FROM "public"."Event" WHERE "public"."Event"."status" = $1 OFFSET $2) AS "sub"
prisma:query SELECT COUNT(*) FROM (SELECT "public"."Event"."id" FROM "public"."Event" WHERE 1=1 OFFSET $1) AS "sub"
prisma:query SELECT COUNT(*) FROM (SELECT "public"."Registration"."id" FROM "public"."Registration" WHERE "public"."Registration"."status" <> $1 OFFSET $2) AS "sub"
prisma:query SELECT COUNT(*) FROM (SELECT "public"."User"."id" FROM "public"."User" WHERE "public"."User"."status" = $1 OFFSET $2) AS "sub"
prisma:query SELECT COUNT(*) FROM (SELECT "public"."User"."id" FROM "public"."User" WHERE 1=1 OFFSET $1) AS "sub"
prisma:query SELECT "public"."Event"."id", "public"."Event"."title", "public"."Event"."description", "public"."Event"."date", "public"."Event"."time", "public"."Event"."location", "public"."Event"."capacity", "public"."Event"."price", "public"."Event"."speakers", "public"."Event"."requirements", "public"."Event"."agenda", "public"."Event"."image", "public"."Event"."category", "public"."Event"."status", "public"."Event"."registrationsCount", "public"."Event"."actualParticipants", "public"."Event"."createdAt", "public"."Event"."updatedAt" FROM "public"."Event" WHERE 1=1 ORDER BY "public"."Event"."createdAt" ASC OFFSET $1
prisma:query SELECT "public"."Registration"."id", "public"."Registration"."eventId" FROM "public"."Registration" WHERE ("public"."Registration"."status" <> $1 AND "public"."Registration"."eventId" IN ($2)) OFFSET $3
prisma:query SELECT "public"."News"."id", "public"."News"."title", "public"."News"."content", "public"."News"."excerpt", "public"."News"."author", "public"."News"."source", "public"."News"."category", "public"."News"."importance", "public"."News"."published", "public"."News"."publishedAt", "public"."News"."image", "public"."News"."tags", "public"."News"."link", "public"."News"."createdAt", "public"."News"."updatedAt" FROM "public"."News" WHERE 1=1 ORDER BY "public"."News"."createdAt" DESC OFFSET $1
 GET /api/stats 200 in 294ms
 GET /api/events 200 in 295ms
 GET /api/news 200 in 296ms
 GET /api/contacts 200 in 299ms
prisma:query SELECT "public"."Contact"."id", "public"."Contact"."name", "public"."Contact"."email", "public"."Contact"."phone", "public"."Contact"."company", "public"."Contact"."role", "public"."Contact"."message", "public"."Contact"."type", "public"."Contact"."status", "public"."Contact"."priority", "public"."Contact"."notes", "public"."Contact"."createdAt", "public"."Contact"."updatedAt" FROM "public"."Contact" WHERE 1=1 ORDER BY "public"."Contact"."createdAt" DESC OFFSET $1
 GET /favicon.ico?favicon.0b3bf435.ico 200 in 251ms
prisma:query SELECT "public"."Event"."id", "public"."Event"."title", "public"."Event"."description", "public"."Event"."date", "public"."Event"."time", "public"."Event"."location", "public"."Event"."capacity", "public"."Event"."price", "public"."Event"."speakers", "public"."Event"."requirements", "public"."Event"."agenda", "public"."Event"."image", "public"."Event"."category", "public"."Event"."status", "public"."Event"."registrationsCount", "public"."Event"."actualParticipants", "public"."Event"."createdAt", "public"."Event"."updatedAt" FROM "public"."Event" WHERE 1=1 ORDER BY "public"."Event"."createdAt" ASC OFFSET $1
prisma:query SELECT "public"."Registration"."id", "public"."Registration"."eventId" FROM "public"."Registration" WHERE ("public"."Registration"."status" <> $1 AND "public"."Registration"."eventId" IN ($2)) OFFSET $3
 GET /api/events 200 in 239ms
prisma:query SELECT "public"."Event"."id", "public"."Event"."title", "public"."Event"."description", "public"."Event"."date", "public"."Event"."time", "public"."Event"."location", "public"."Event"."capacity", "public"."Event"."price", "public"."Event"."speakers", "public"."Event"."requirements", "public"."Event"."agenda", "public"."Event"."image", "public"."Event"."category", "public"."Event"."status", "public"."Event"."registrationsCount", "public"."Event"."actualParticipants", "public"."Event"."createdAt", "public"."Event"."updatedAt" FROM "public"."Event" WHERE 1=1 ORDER BY "public"."Event"."createdAt" ASC OFFSET $1
prisma:query SELECT "public"."Registration"."id", "public"."Registration"."eventId" FROM "public"."Registration" WHERE ("public"."Registration"."status" <> $1 AND "public"."Registration"."eventId" IN ($2)) OFFSET $3
 GET /api/events 200 in 245ms
prisma:query SELECT "public"."Registration"."id", "public"."Registration"."eventId", "public"."Registration"."fullName", "public"."Registration"."email", "public"."Registration"."phone", "public"."Registration"."organization", "public"."Registration"."experience", "public"."Registration"."expectation", "public"."Registration"."status", "public"."Registration"."createdAt", "public"."Registration"."updatedAt" FROM "public"."Registration" WHERE 1=1 ORDER BY "public"."Registration"."createdAt" DESC OFFSET $1
 GET /api/registrations 200 in 285ms
 GET /api/events 200 in 286ms
prisma:query SELECT "public"."Event"."id", "public"."Event"."title", "public"."Event"."description", "public"."Event"."date", "public"."Event"."time", "public"."Event"."location", "public"."Event"."capacity", "public"."Event"."price", "public"."Event"."speakers", "public"."Event"."requirements", "public"."Event"."agenda", "public"."Event"."image", "public"."Event"."category", "public"."Event"."status", "public"."Event"."registrationsCount", "public"."Event"."actualParticipants", "public"."Event"."createdAt", "public"."Event"."updatedAt" FROM "public"."Event" WHERE 1=1 ORDER BY "public"."Event"."createdAt" ASC OFFSET $1
prisma:query SELECT "public"."Registration"."id", "public"."Registration"."eventId" FROM "public"."Registration" WHERE ("public"."Registration"."status" <> $1 AND "public"."Registration"."eventId" IN ($2)) OFFSET $3
prisma:query SELECT "public"."Registration"."id", "public"."Registration"."eventId", "public"."Registration"."fullName", "public"."Registration"."email", "public"."Registration"."phone", "public"."Registration"."organization", "public"."Registration"."experience", "public"."Registration"."expectation", "public"."Registration"."status", "public"."Registration"."createdAt", "public"."Registration"."updatedAt" FROM "public"."Registration" WHERE 1=1 ORDER BY "public"."Registration"."createdAt" DESC OFFSET $1
 GET /api/registrations 200 in 278ms
 GET /api/events 200 in 280ms
prisma:query SELECT "public"."Event"."id", "public"."Event"."title", "public"."Event"."description", "public"."Event"."date", "public"."Event"."time", "public"."Event"."location", "public"."Event"."capacity", "public"."Event"."price", "public"."Event"."speakers", "public"."Event"."requirements", "public"."Event"."agenda", "public"."Event"."image", "public"."Event"."category", "public"."Event"."status", "public"."Event"."registrationsCount", "public"."Event"."actualParticipants", "public"."Event"."createdAt", "public"."Event"."updatedAt" FROM "public"."Event" WHERE 1=1 ORDER BY "public"."Event"."createdAt" ASC OFFSET $1
prisma:query SELECT "public"."Registration"."id", "public"."Registration"."eventId" FROM "public"."Registration" WHERE ("public"."Registration"."status" <> $1 AND "public"."Registration"."eventId" IN ($2)) OFFSET $3
 GET /api/contacts 200 in 248ms
prisma:query SELECT "public"."Contact"."id", "public"."Contact"."name", "public"."Contact"."email", "public"."Contact"."phone", "public"."Contact"."company", "public"."Contact"."role", "public"."Contact"."message", "public"."Contact"."type", "public"."Contact"."status", "public"."Contact"."priority", "public"."Contact"."notes", "public"."Contact"."createdAt", "public"."Contact"."updatedAt" FROM "public"."Contact" WHERE 1=1 ORDER BY "public"."Contact"."createdAt" DESC OFFSET $1
prisma:query SELECT "public"."Contact"."id", "public"."Contact"."name", "public"."Contact"."email", "public"."Contact"."phone", "public"."Contact"."company", "public"."Contact"."role", "public"."Contact"."message", "public"."Contact"."type", "public"."Contact"."status", "public"."Contact"."priority", "public"."Contact"."notes", "public"."Contact"."createdAt", "public"."Contact"."updatedAt" FROM "public"."Contact" WHERE 1=1 ORDER BY "public"."Contact"."createdAt" DESC OFFSET $1
 GET /api/contacts 200 in 244ms
prisma:query SELECT "public"."User"."id", "public"."User"."name", "public"."User"."email", "public"."User"."phone", "public"."User"."company", "public"."User"."role", "public"."User"."status", "public"."User"."joinDate", "public"."User"."lastActive" FROM "public"."User" WHERE 1=1 ORDER BY "public"."User"."name" ASC OFFSET $1
 GET /api/users 200 in 245ms
 GET /api/users 200 in 246ms
prisma:query SELECT "public"."User"."id", "public"."User"."name", "public"."User"."email", "public"."User"."phone", "public"."User"."company", "public"."User"."role", "public"."User"."status", "public"."User"."joinDate", "public"."User"."lastActive" FROM "public"."User" WHERE 1=1 ORDER BY "public"."User"."name" ASC OFFSET $1
prisma:query SELECT "public"."Registration"."id", "public"."Registration"."eventId", "public"."Registration"."fullName", "public"."Registration"."email", "public"."Registration"."phone", "public"."Registration"."organization", "public"."Registration"."experience", "public"."Registration"."expectation", "public"."Registration"."status", "public"."Registration"."createdAt", "public"."Registration"."updatedAt" FROM "public"."Registration" WHERE 1=1 ORDER BY "public"."Registration"."createdAt" DESC OFFSET $1
 GET /api/registrations 200 in 249ms
 GET /api/events 200 in 250ms
prisma:query SELECT "public"."Event"."id", "public"."Event"."title", "public"."Event"."description", "public"."Event"."date", "public"."Event"."time", "public"."Event"."location", "public"."Event"."capacity", "public"."Event"."price", "public"."Event"."speakers", "public"."Event"."requirements", "public"."Event"."agenda", "public"."Event"."image", "public"."Event"."category", "public"."Event"."status", "public"."Event"."registrationsCount", "public"."Event"."actualParticipants", "public"."Event"."createdAt", "public"."Event"."updatedAt" FROM "public"."Event" WHERE 1=1 ORDER BY "public"."Event"."createdAt" ASC OFFSET $1
prisma:query SELECT "public"."Registration"."id", "public"."Registration"."eventId" FROM "public"."Registration" WHERE ("public"."Registration"."status" <> $1 AND "public"."Registration"."eventId" IN ($2)) OFFSET $3
prisma:query SELECT "public"."Event"."id", "public"."Event"."title", "public"."Event"."description", "public"."Event"."date", "public"."Event"."time", "public"."Event"."location", "public"."Event"."capacity", "public"."Event"."price", "public"."Event"."speakers", "public"."Event"."requirements", "public"."Event"."agenda", "public"."Event"."image", "public"."Event"."category", "public"."Event"."status", "public"."Event"."registrationsCount", "public"."Event"."actualParticipants", "public"."Event"."createdAt", "public"."Event"."updatedAt" FROM "public"."Event" WHERE 1=1 ORDER BY "public"."Event"."createdAt" ASC OFFSET $1
prisma:query SELECT "public"."Registration"."id", "public"."Registration"."eventId" FROM "public"."Registration" WHERE ("public"."Registration"."status" <> $1 AND "public"."Registration"."eventId" IN ($2)) OFFSET $3
 GET /api/events 200 in 256ms
 GET /api/registrations 200 in 257ms
prisma:query SELECT "public"."Registration"."id", "public"."Registration"."eventId", "public"."Registration"."fullName", "public"."Registration"."email", "public"."Registration"."phone", "public"."Registration"."organization", "public"."Registration"."experience", "public"."Registration"."expectation", "public"."Registration"."status", "public"."Registration"."createdAt", "public"."Registration"."updatedAt" FROM "public"."Registration" WHERE 1=1 ORDER BY "public"."Registration"."createdAt" DESC OFFSET $1
prisma:query SELECT 1
prisma:query SELECT "public"."Registration"."id", "public"."Registration"."eventId", "public"."Registration"."fullName", "public"."Registration"."email", "public"."Registration"."phone", "public"."Registration"."organization", "public"."Registration"."experience", "public"."Registration"."expectation", "public"."Registration"."status", "public"."Registration"."createdAt", "public"."Registration"."updatedAt" FROM "public"."Registration" WHERE ("public"."Registration"."id" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query DELETE FROM "public"."Registration" WHERE ("public"."Registration"."id" = $1 AND 1=1) RETURNING "public"."Registration"."id", "public"."Registration"."eventId", "public"."Registration"."fullName", "public"."Registration"."email", "public"."Registration"."phone", "public"."Registration"."organization", "public"."Registration"."experience", "public"."Registration"."expectation", "public"."Registration"."status", "public"."Registration"."createdAt", "public"."Registration"."updatedAt"
prisma:query SELECT COUNT(*) FROM (SELECT "public"."Registration"."id" FROM "public"."Registration" WHERE ("public"."Registration"."eventId" = $1 AND (NOT "public"."Registration"."status" = $2)) OFFSET $3) AS "sub"
prisma:query UPDATE "public"."Event" SET "registrationsCount" = $1, "updatedAt" = $2 WHERE ("public"."Event"."id" = $3 AND 1=1) RETURNING "public"."Event"."id", "public"."Event"."title", "public"."Event"."description", "public"."Event"."date", "public"."Event"."time", "public"."Event"."location", "public"."Event"."capacity", "public"."Event"."price", "public"."Event"."speakers", "public"."Event"."requirements", "public"."Event"."agenda", "public"."Event"."image", "public"."Event"."category", "public"."Event"."status", "public"."Event"."registrationsCount", "public"."Event"."actualParticipants", "public"."Event"."createdAt", "public"."Event"."updatedAt"
 DELETE /api/registrations/cmfxoa58g000b562orkyhat25 200 in 307ms
prisma:query SELECT "public"."Registration"."id", "public"."Registration"."eventId", "public"."Registration"."fullName", "public"."Registration"."email", "public"."Registration"."phone", "public"."Registration"."organization", "public"."Registration"."experience", "public"."Registration"."expectation", "public"."Registration"."status", "public"."Registration"."createdAt", "public"."Registration"."updatedAt" FROM "public"."Registration" WHERE ("public"."Registration"."id" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query DELETE FROM "public"."Registration" WHERE ("public"."Registration"."id" = $1 AND 1=1) RETURNING "public"."Registration"."id", "public"."Registration"."eventId", "public"."Registration"."fullName", "public"."Registration"."email", "public"."Registration"."phone", "public"."Registration"."organization", "public"."Registration"."experience", "public"."Registration"."expectation", "public"."Registration"."status", "public"."Registration"."createdAt", "public"."Registration"."updatedAt"
prisma:query SELECT COUNT(*) FROM (SELECT "public"."Registration"."id" FROM "public"."Registration" WHERE ("public"."Registration"."eventId" = $1 AND (NOT "public"."Registration"."status" = $2)) OFFSET $3) AS "sub"
prisma:query UPDATE "public"."Event" SET "registrationsCount" = $1, "updatedAt" = $2 WHERE ("public"."Event"."id" = $3 AND 1=1) RETURNING "public"."Event"."id", "public"."Event"."title", "public"."Event"."description", "public"."Event"."date", "public"."Event"."time", "public"."Event"."location", "public"."Event"."capacity", "public"."Event"."price", "public"."Event"."speakers", "public"."Event"."requirements", "public"."Event"."agenda", "public"."Event"."image", "public"."Event"."category", "public"."Event"."status", "public"."Event"."registrationsCount", "public"."Event"."actualParticipants", "public"."Event"."createdAt", "public"."Event"."updatedAt"
 DELETE /api/registrations/cmfxo4bt60007562okx836mxf 200 in 279ms
prisma:query SELECT "public"."Event"."id", "public"."Event"."title", "public"."Event"."description", "public"."Event"."date", "public"."Event"."time", "public"."Event"."location", "public"."Event"."capacity", "public"."Event"."price", "public"."Event"."speakers", "public"."Event"."requirements", "public"."Event"."agenda", "public"."Event"."image", "public"."Event"."category", "public"."Event"."status", "public"."Event"."registrationsCount", "public"."Event"."actualParticipants", "public"."Event"."createdAt", "public"."Event"."updatedAt" FROM "public"."Event" WHERE 1=1 ORDER BY "public"."Event"."createdAt" ASC OFFSET $1
prisma:query SELECT "public"."Registration"."id", "public"."Registration"."eventId" FROM "public"."Registration" WHERE ("public"."Registration"."status" <> $1 AND "public"."Registration"."eventId" IN ($2)) OFFSET $3
 GET /api/events 200 in 240ms
prisma:query SELECT "public"."Event"."id", "public"."Event"."title", "public"."Event"."description", "public"."Event"."date", "public"."Event"."time", "public"."Event"."location", "public"."Event"."capacity", "public"."Event"."price", "public"."Event"."speakers", "public"."Event"."requirements", "public"."Event"."agenda", "public"."Event"."image", "public"."Event"."category", "public"."Event"."status", "public"."Event"."registrationsCount", "public"."Event"."actualParticipants", "public"."Event"."createdAt", "public"."Event"."updatedAt" FROM "public"."Event" WHERE 1=1 ORDER BY "public"."Event"."createdAt" ASC OFFSET $1
prisma:query SELECT "public"."Registration"."id", "public"."Registration"."eventId" FROM "public"."Registration" WHERE ("public"."Registration"."status" <> $1 AND "public"."Registration"."eventId" IN ($2)) OFFSET $3
 GET /api/events 200 in 245ms
prisma:query SELECT "public"."Contact"."id", "public"."Contact"."name", "public"."Contact"."email", "public"."Contact"."phone", "public"."Contact"."company", "public"."Contact"."role", "public"."Contact"."message", "public"."Contact"."type", "public"."Contact"."status", "public"."Contact"."priority", "public"."Contact"."notes", "public"."Contact"."createdAt", "public"."Contact"."updatedAt" FROM "public"."Contact" WHERE 1=1 ORDER BY "public"."Contact"."createdAt" DESC OFFSET $1
 GET /api/contacts 200 in 240ms
prisma:query SELECT "public"."Contact"."id", "public"."Contact"."name", "public"."Contact"."email", "public"."Contact"."phone", "public"."Contact"."company", "public"."Contact"."role", "public"."Contact"."message", "public"."Contact"."type", "public"."Contact"."status", "public"."Contact"."priority", "public"."Contact"."notes", "public"."Contact"."createdAt", "public"."Contact"."updatedAt" FROM "public"."Contact" WHERE 1=1 ORDER BY "public"."Contact"."createdAt" DESC OFFSET $1
 GET /api/contacts 200 in 240ms
prisma:query DELETE FROM "public"."Contact" WHERE ("public"."Contact"."id" = $1 AND 1=1) RETURNING "public"."Contact"."id", "public"."Contact"."name", "public"."Contact"."email", "public"."Contact"."phone", "public"."Contact"."company", "public"."Contact"."role", "public"."Contact"."message", "public"."Contact"."type", "public"."Contact"."status", "public"."Contact"."priority", "public"."Contact"."notes", "public"."Contact"."createdAt", "public"."Contact"."updatedAt"
 DELETE /api/contacts/cmfxnxdc20005562ox067xz65 200 in 245ms
prisma:query SELECT "public"."User"."id", "public"."User"."name", "public"."User"."email", "public"."User"."phone", "public"."User"."company", "public"."User"."role", "public"."User"."status", "public"."User"."joinDate", "public"."User"."lastActive" FROM "public"."User" WHERE 1=1 ORDER BY "public"."User"."name" ASC OFFSET $1
 GET /api/users 200 in 234ms
prisma:query SELECT "public"."User"."id", "public"."User"."name", "public"."User"."email", "public"."User"."phone", "public"."User"."company", "public"."User"."role", "public"."User"."status", "public"."User"."joinDate", "public"."User"."lastActive" FROM "public"."User" WHERE 1=1 ORDER BY "public"."User"."name" ASC OFFSET $1
 GET /api/users 200 in 248ms
 ✓ Compiled /api/users/[id] in 119ms
prisma:query DELETE FROM "public"."User" WHERE ("public"."User"."id" = $1 AND 1=1) RETURNING "public"."User"."id", "public"."User"."name", "public"."User"."email", "public"."User"."phone", "public"."User"."company", "public"."User"."role", "public"."User"."status", "public"."User"."joinDate", "public"."User"."lastActive"
 DELETE /api/users/cmfxo6shs0009562ompu1jryt 200 in 857ms
prisma:query SELECT "public"."User"."id", "public"."User"."name", "public"."User"."email", "public"."User"."phone", "public"."User"."company", "public"."User"."role", "public"."User"."status", "public"."User"."joinDate", "public"."User"."lastActive" FROM "public"."User" WHERE 1=1 ORDER BY "public"."User"."name" ASC OFFSET $1
 GET /api/users 200 in 259ms
prisma:query DELETE FROM "public"."User" WHERE ("public"."User"."id" = $1 AND 1=1) RETURNING "public"."User"."id", "public"."User"."name", "public"."User"."email", "public"."User"."phone", "public"."User"."company", "public"."User"."role", "public"."User"."status", "public"."User"."joinDate", "public"."User"."lastActive"
 DELETE /api/users/cmfxo51th0008562ox6icj7zu 200 in 289ms
prisma:query SELECT "public"."User"."id", "public"."User"."name", "public"."User"."email", "public"."User"."phone", "public"."User"."company", "public"."User"."role", "public"."User"."status", "public"."User"."joinDate", "public"."User"."lastActive" FROM "public"."User" WHERE 1=1 ORDER BY "public"."User"."name" ASC OFFSET $1
 GET /api/users 200 in 250ms
prisma:query SELECT "public"."Contact"."id", "public"."Contact"."name", "public"."Contact"."email", "public"."Contact"."phone", "public"."Contact"."company", "public"."Contact"."role", "public"."Contact"."message", "public"."Contact"."type", "public"."Contact"."status", "public"."Contact"."priority", "public"."Contact"."notes", "public"."Contact"."createdAt", "public"."Contact"."updatedAt" FROM "public"."Contact" WHERE 1=1 ORDER BY "public"."Contact"."createdAt" DESC OFFSET $1
 GET /api/contacts 200 in 255ms
prisma:query SELECT "public"."Contact"."id", "public"."Contact"."name", "public"."Contact"."email", "public"."Contact"."phone", "public"."Contact"."company", "public"."Contact"."role", "public"."Contact"."message", "public"."Contact"."type", "public"."Contact"."status", "public"."Contact"."priority", "public"."Contact"."notes", "public"."Contact"."createdAt", "public"."Contact"."updatedAt" FROM "public"."Contact" WHERE 1=1 ORDER BY "public"."Contact"."createdAt" DESC OFFSET $1
 GET /api/contacts 200 in 233ms
prisma:query SELECT "public"."Registration"."id", "public"."Registration"."eventId", "public"."Registration"."fullName", "public"."Registration"."email", "public"."Registration"."phone", "public"."Registration"."organization", "public"."Registration"."experience", "public"."Registration"."expectation", "public"."Registration"."status", "public"."Registration"."createdAt", "public"."Registration"."updatedAt" FROM "public"."Registration" WHERE 1=1 ORDER BY "public"."Registration"."createdAt" DESC OFFSET $1
 GET /api/registrations 200 in 254ms
prisma:query SELECT "public"."Event"."id", "public"."Event"."title", "public"."Event"."description", "public"."Event"."date", "public"."Event"."time", "public"."Event"."location", "public"."Event"."capacity", "public"."Event"."price", "public"."Event"."speakers", "public"."Event"."requirements", "public"."Event"."agenda", "public"."Event"."image", "public"."Event"."category", "public"."Event"."status", "public"."Event"."registrationsCount", "public"."Event"."actualParticipants", "public"."Event"."createdAt", "public"."Event"."updatedAt" FROM "public"."Event" WHERE 1=1 ORDER BY "public"."Event"."createdAt" ASC OFFSET $1
prisma:query SELECT "public"."Registration"."id", "public"."Registration"."eventId" FROM "public"."Registration" WHERE ("public"."Registration"."status" <> $1 AND "public"."Registration"."eventId" IN ($2)) OFFSET $3
 GET /api/events 200 in 252ms
prisma:query SELECT "public"."Registration"."id", "public"."Registration"."eventId", "public"."Registration"."fullName", "public"."Registration"."email", "public"."Registration"."phone", "public"."Registration"."organization", "public"."Registration"."experience", "public"."Registration"."expectation", "public"."Registration"."status", "public"."Registration"."createdAt", "public"."Registration"."updatedAt" FROM "public"."Registration" WHERE 1=1 ORDER BY "public"."Registration"."createdAt" DESC OFFSET $1
 GET /api/registrations 200 in 257ms
 GET /api/events 200 in 257ms
prisma:query SELECT "public"."Event"."id", "public"."Event"."title", "public"."Event"."description", "public"."Event"."date", "public"."Event"."time", "public"."Event"."location", "public"."Event"."capacity", "public"."Event"."price", "public"."Event"."speakers", "public"."Event"."requirements", "public"."Event"."agenda", "public"."Event"."image", "public"."Event"."category", "public"."Event"."status", "public"."Event"."registrationsCount", "public"."Event"."actualParticipants", "public"."Event"."createdAt", "public"."Event"."updatedAt" FROM "public"."Event" WHERE 1=1 ORDER BY "public"."Event"."createdAt" ASC OFFSET $1
prisma:query SELECT "public"."Registration"."id", "public"."Registration"."eventId" FROM "public"."Registration" WHERE ("public"."Registration"."status" <> $1 AND "public"."Registration"."eventId" IN ($2)) OFFSET $3
prisma:query SELECT 1
prisma:query SELECT "public"."Event"."id", "public"."Event"."title", "public"."Event"."description", "public"."Event"."date", "public"."Event"."time", "public"."Event"."location", "public"."Event"."capacity", "public"."Event"."price", "public"."Event"."speakers", "public"."Event"."requirements", "public"."Event"."agenda", "public"."Event"."image", "public"."Event"."category", "public"."Event"."status", "public"."Event"."registrationsCount", "public"."Event"."actualParticipants", "public"."Event"."createdAt", "public"."Event"."updatedAt" FROM "public"."Event" WHERE 1=1 ORDER BY "public"."Event"."createdAt" ASC OFFSET $1
prisma:query SELECT "public"."Registration"."id", "public"."Registration"."eventId" FROM "public"."Registration" WHERE ("public"."Registration"."status" <> $1 AND "public"."Registration"."eventId" IN ($2)) OFFSET $3
 GET /api/events 200 in 259ms
prisma:query SELECT "public"."Event"."id", "public"."Event"."title", "public"."Event"."description", "public"."Event"."date", "public"."Event"."time", "public"."Event"."location", "public"."Event"."capacity", "public"."Event"."price", "public"."Event"."speakers", "public"."Event"."requirements", "public"."Event"."agenda", "public"."Event"."image", "public"."Event"."category", "public"."Event"."status", "public"."Event"."registrationsCount", "public"."Event"."actualParticipants", "public"."Event"."createdAt", "public"."Event"."updatedAt" FROM "public"."Event" WHERE 1=1 ORDER BY "public"."Event"."createdAt" ASC OFFSET $1
prisma:query SELECT "public"."Registration"."id", "public"."Registration"."eventId" FROM "public"."Registration" WHERE ("public"."Registration"."status" <> $1 AND "public"."Registration"."eventId" IN ($2)) OFFSET $3
 GET /api/events 200 in 260ms
prisma:query SELECT COUNT(*) FROM (SELECT "public"."Registration"."id" FROM "public"."Registration" WHERE "public"."Registration"."status" <> $1 OFFSET $2) AS "sub"
prisma:query SELECT "public"."Event"."id", "public"."Event"."title", "public"."Event"."description", "public"."Event"."date", "public"."Event"."time", "public"."Event"."location", "public"."Event"."capacity", "public"."Event"."price", "public"."Event"."speakers", "public"."Event"."requirements", "public"."Event"."agenda", "public"."Event"."image", "public"."Event"."category", "public"."Event"."status", "public"."Event"."registrationsCount", "public"."Event"."actualParticipants", "public"."Event"."createdAt", "public"."Event"."updatedAt" FROM "public"."Event" WHERE 1=1 ORDER BY "public"."Event"."createdAt" ASC OFFSET $1
prisma:query SELECT "public"."Registration"."id", "public"."Registration"."eventId" FROM "public"."Registration" WHERE ("public"."Registration"."status" <> $1 AND "public"."Registration"."eventId" IN ($2)) OFFSET $3
prisma:query SELECT COUNT(*) FROM (SELECT "public"."News"."id" FROM "public"."News" WHERE 1=1 OFFSET $1) AS "sub"
prisma:query SELECT COUNT(*) FROM (SELECT "public"."Contact"."id" FROM "public"."Contact" WHERE 1=1 OFFSET $1) AS "sub"
prisma:query SELECT COUNT(*) FROM (SELECT "public"."Event"."id" FROM "public"."Event" WHERE 1=1 OFFSET $1) AS "sub"
prisma:query SELECT COUNT(*) FROM (SELECT "public"."User"."id" FROM "public"."User" WHERE 1=1 OFFSET $1) AS "sub"
prisma:query SELECT COUNT(*) FROM (SELECT "public"."News"."id" FROM "public"."News" WHERE "public"."News"."published" = $1 OFFSET $2) AS "sub"
prisma:query SELECT COUNT(*) FROM (SELECT "public"."User"."id" FROM "public"."User" WHERE "public"."User"."status" = $1 OFFSET $2) AS "sub"
prisma:query SELECT COUNT(*) FROM (SELECT "public"."Event"."id" FROM "public"."Event" WHERE "public"."Event"."status" = $1 OFFSET $2) AS "sub"
prisma:query SELECT COUNT(*) FROM (SELECT "public"."Contact"."id" FROM "public"."Contact" WHERE "public"."Contact"."status" = $1 OFFSET $2) AS "sub"
prisma:query SELECT "public"."News"."id", "public"."News"."title", "public"."News"."content", "public"."News"."excerpt", "public"."News"."author", "public"."News"."source", "public"."News"."category", "public"."News"."importance", "public"."News"."published", "public"."News"."publishedAt", "public"."News"."image", "public"."News"."tags", "public"."News"."link", "public"."News"."createdAt", "public"."News"."updatedAt" FROM "public"."News" WHERE 1=1 ORDER BY "public"."News"."createdAt" DESC OFFSET $1
prisma:query SELECT "public"."Contact"."id", "public"."Contact"."name", "public"."Contact"."email", "public"."Contact"."phone", "public"."Contact"."company", "public"."Contact"."role", "public"."Contact"."message", "public"."Contact"."type", "public"."Contact"."status", "public"."Contact"."priority", "public"."Contact"."notes", "public"."Contact"."createdAt", "public"."Contact"."updatedAt" FROM "public"."Contact" WHERE 1=1 ORDER BY "public"."Contact"."createdAt" DESC OFFSET $1
 GET /api/stats 200 in 418ms
 GET /api/events 200 in 418ms
 GET /api/news 200 in 414ms
 GET /api/contacts 200 in 415ms
prisma:query SELECT "public"."Event"."id", "public"."Event"."title", "public"."Event"."description", "public"."Event"."date", "public"."Event"."time", "public"."Event"."location", "public"."Event"."capacity", "public"."Event"."price", "public"."Event"."speakers", "public"."Event"."requirements", "public"."Event"."agenda", "public"."Event"."image", "public"."Event"."category", "public"."Event"."status", "public"."Event"."registrationsCount", "public"."Event"."actualParticipants", "public"."Event"."createdAt", "public"."Event"."updatedAt" FROM "public"."Event" WHERE 1=1 ORDER BY "public"."Event"."createdAt" ASC OFFSET $1
prisma:query SELECT "public"."Registration"."id", "public"."Registration"."eventId" FROM "public"."Registration" WHERE ("public"."Registration"."status" <> $1 AND "public"."Registration"."eventId" IN ($2)) OFFSET $3
 GET /api/events 200 in 420ms
 GET /api/news 200 in 422ms
prisma:query SELECT "public"."News"."id", "public"."News"."title", "public"."News"."content", "public"."News"."excerpt", "public"."News"."author", "public"."News"."source", "public"."News"."category", "public"."News"."importance", "public"."News"."published", "public"."News"."publishedAt", "public"."News"."image", "public"."News"."tags", "public"."News"."link", "public"."News"."createdAt", "public"."News"."updatedAt" FROM "public"."News" WHERE 1=1 ORDER BY "public"."News"."createdAt" DESC OFFSET $1
prisma:query SELECT "public"."Contact"."id", "public"."Contact"."name", "public"."Contact"."email", "public"."Contact"."phone", "public"."Contact"."company", "public"."Contact"."role", "public"."Contact"."message", "public"."Contact"."type", "public"."Contact"."status", "public"."Contact"."priority", "public"."Contact"."notes", "public"."Contact"."createdAt", "public"."Contact"."updatedAt" FROM "public"."Contact" WHERE 1=1 ORDER BY "public"."Contact"."createdAt" DESC OFFSET $1
prisma:query SELECT COUNT(*) FROM (SELECT "public"."Event"."id" FROM "public"."Event" WHERE 1=1 OFFSET $1) AS "sub"
prisma:query SELECT COUNT(*) FROM (SELECT "public"."News"."id" FROM "public"."News" WHERE 1=1 OFFSET $1) AS "sub"
prisma:query SELECT COUNT(*) FROM (SELECT "public"."Contact"."id" FROM "public"."Contact" WHERE 1=1 OFFSET $1) AS "sub"
prisma:query SELECT COUNT(*) FROM (SELECT "public"."Registration"."id" FROM "public"."Registration" WHERE "public"."Registration"."status" <> $1 OFFSET $2) AS "sub"
prisma:query SELECT COUNT(*) FROM (SELECT "public"."User"."id" FROM "public"."User" WHERE "public"."User"."status" = $1 OFFSET $2) AS "sub"
prisma:query SELECT COUNT(*) FROM (SELECT "public"."Event"."id" FROM "public"."Event" WHERE "public"."Event"."status" = $1 OFFSET $2) AS "sub"
prisma:query SELECT COUNT(*) FROM (SELECT "public"."News"."id" FROM "public"."News" WHERE "public"."News"."published" = $1 OFFSET $2) AS "sub"
prisma:query SELECT COUNT(*) FROM (SELECT "public"."User"."id" FROM "public"."User" WHERE 1=1 OFFSET $1) AS "sub"
prisma:query SELECT COUNT(*) FROM (SELECT "public"."Contact"."id" FROM "public"."Contact" WHERE "public"."Contact"."status" = $1 OFFSET $2) AS "sub"
 GET /api/contacts 200 in 451ms
 GET /api/stats 200 in 455ms
prisma:query SELECT 1
prisma:query SELECT "public"."Event"."id", "public"."Event"."title", "public"."Event"."description", "public"."Event"."date", "public"."Event"."time", "public"."Event"."location", "public"."Event"."capacity", "public"."Event"."price", "public"."Event"."speakers", "public"."Event"."requirements", "public"."Event"."agenda", "public"."Event"."image", "public"."Event"."category", "public"."Event"."status", "public"."Event"."registrationsCount", "public"."Event"."actualParticipants", "public"."Event"."createdAt", "public"."Event"."updatedAt" FROM "public"."Event" WHERE 1=1 ORDER BY "public"."Event"."createdAt" ASC OFFSET $1
prisma:query SELECT "public"."Registration"."id", "public"."Registration"."eventId" FROM "public"."Registration" WHERE ("public"."Registration"."status" <> $1 AND "public"."Registration"."eventId" IN ($2)) OFFSET $3
prisma:query SELECT 1
prisma:query SELECT 1
prisma:query SELECT 1
prisma:query SELECT 1
prisma:query SELECT 1
prisma:query SELECT COUNT(*) FROM (SELECT "public"."Event"."id" FROM "public"."Event" WHERE 1=1 OFFSET $1) AS "sub"
prisma:query SELECT 1
prisma:query SELECT 1
prisma:query SELECT COUNT(*) FROM (SELECT "public"."Event"."id" FROM "public"."Event" WHERE "public"."Event"."status" = $1 OFFSET $2) AS "sub"
prisma:query SELECT COUNT(*) FROM (SELECT "public"."Registration"."id" FROM "public"."Registration" WHERE "public"."Registration"."status" <> $1 OFFSET $2) AS "sub"
prisma:query SELECT COUNT(*) FROM (SELECT "public"."Contact"."id" FROM "public"."Contact" WHERE 1=1 OFFSET $1) AS "sub"
prisma:query SELECT 1
prisma:query SELECT COUNT(*) FROM (SELECT "public"."News"."id" FROM "public"."News" WHERE 1=1 OFFSET $1) AS "sub"
prisma:query SELECT COUNT(*) FROM (SELECT "public"."Contact"."id" FROM "public"."Contact" WHERE "public"."Contact"."status" = $1 OFFSET $2) AS "sub"
prisma:query SELECT COUNT(*) FROM (SELECT "public"."News"."id" FROM "public"."News" WHERE "public"."News"."published" = $1 OFFSET $2) AS "sub"
prisma:query SELECT COUNT(*) FROM (SELECT "public"."User"."id" FROM "public"."User" WHERE 1=1 OFFSET $1) AS "sub"
prisma:query SELECT COUNT(*) FROM (SELECT "public"."User"."id" FROM "public"."User" WHERE "public"."User"."status" = $1 OFFSET $2) AS "sub"
prisma:query SELECT "public"."Contact"."id", "public"."Contact"."name", "public"."Contact"."email", "public"."Contact"."phone", "public"."Contact"."company", "public"."Contact"."role", "public"."Contact"."message", "public"."Contact"."type", "public"."Contact"."status", "public"."Contact"."priority", "public"."Contact"."notes", "public"."Contact"."createdAt", "public"."Contact"."updatedAt" FROM "public"."Contact" WHERE 1=1 ORDER BY "public"."Contact"."createdAt" DESC OFFSET $1
 GET /api/events 200 in 340ms
 GET /api/stats 200 in 342ms
 GET /api/contacts 200 in 342ms
 GET /api/news 200 in 341ms
prisma:query SELECT "public"."News"."id", "public"."News"."title", "public"."News"."content", "public"."News"."excerpt", "public"."News"."author", "public"."News"."source", "public"."News"."category", "public"."News"."importance", "public"."News"."published", "public"."News"."publishedAt", "public"."News"."image", "public"."News"."tags", "public"."News"."link", "public"."News"."createdAt", "public"."News"."updatedAt" FROM "public"."News" WHERE 1=1 ORDER BY "public"."News"."createdAt" DESC OFFSET $1
prisma:query SELECT COUNT(*) FROM (SELECT "public"."Registration"."id" FROM "public"."Registration" WHERE "public"."Registration"."status" <> $1 OFFSET $2) AS "sub"
prisma:query SELECT COUNT(*) FROM (SELECT "public"."User"."id" FROM "public"."User" WHERE 1=1 OFFSET $1) AS "sub"
prisma:query SELECT COUNT(*) FROM (SELECT "public"."Contact"."id" FROM "public"."Contact" WHERE 1=1 OFFSET $1) AS "sub"
prisma:query SELECT COUNT(*) FROM (SELECT "public"."Event"."id" FROM "public"."Event" WHERE "public"."Event"."status" = $1 OFFSET $2) AS "sub"
prisma:query SELECT COUNT(*) FROM (SELECT "public"."Event"."id" FROM "public"."Event" WHERE 1=1 OFFSET $1) AS "sub"
prisma:query SELECT COUNT(*) FROM (SELECT "public"."News"."id" FROM "public"."News" WHERE "public"."News"."published" = $1 OFFSET $2) AS "sub"
prisma:query SELECT COUNT(*) FROM (SELECT "public"."Contact"."id" FROM "public"."Contact" WHERE "public"."Contact"."status" = $1 OFFSET $2) AS "sub"
prisma:query SELECT COUNT(*) FROM (SELECT "public"."User"."id" FROM "public"."User" WHERE "public"."User"."status" = $1 OFFSET $2) AS "sub"
prisma:query SELECT COUNT(*) FROM (SELECT "public"."News"."id" FROM "public"."News" WHERE 1=1 OFFSET $1) AS "sub"
 GET /api/stats 200 in 344ms
prisma:query SELECT "public"."Contact"."id", "public"."Contact"."name", "public"."Contact"."email", "public"."Contact"."phone", "public"."Contact"."company", "public"."Contact"."role", "public"."Contact"."message", "public"."Contact"."type", "public"."Contact"."status", "public"."Contact"."priority", "public"."Contact"."notes", "public"."Contact"."createdAt", "public"."Contact"."updatedAt" FROM "public"."Contact" WHERE 1=1 ORDER BY "public"."Contact"."createdAt" DESC OFFSET $1
 GET /api/contacts 200 in 353ms
 GET /api/news 200 in 356ms
prisma:query SELECT "public"."News"."id", "public"."News"."title", "public"."News"."content", "public"."News"."excerpt", "public"."News"."author", "public"."News"."source", "public"."News"."category", "public"."News"."importance", "public"."News"."published", "public"."News"."publishedAt", "public"."News"."image", "public"."News"."tags", "public"."News"."link", "public"."News"."createdAt", "public"."News"."updatedAt" FROM "public"."News" WHERE 1=1 ORDER BY "public"."News"."createdAt" DESC OFFSET $1
prisma:query SELECT "public"."Event"."id", "public"."Event"."title", "public"."Event"."description", "public"."Event"."date", "public"."Event"."time", "public"."Event"."location", "public"."Event"."capacity", "public"."Event"."price", "public"."Event"."speakers", "public"."Event"."requirements", "public"."Event"."agenda", "public"."Event"."image", "public"."Event"."category", "public"."Event"."status", "public"."Event"."registrationsCount", "public"."Event"."actualParticipants", "public"."Event"."createdAt", "public"."Event"."updatedAt" FROM "public"."Event" WHERE 1=1 ORDER BY "public"."Event"."createdAt" ASC OFFSET $1
prisma:query SELECT "public"."Registration"."id", "public"."Registration"."eventId" FROM "public"."Registration" WHERE ("public"."Registration"."status" <> $1 AND "public"."Registration"."eventId" IN ($2)) OFFSET $3
 GET /api/events 200 in 365ms
 ✓ Compiled in 168ms
 ⨯ [Error: ENOENT: no such file or directory, open '/home/phuongnam/web/.next/static/development/_buildManifest.js.tmp.os1qiimc51'] {
  errno: -2,
  code: 'ENOENT',
  syscall: 'open',
  path: '/home/phuongnam/web/.next/static/development/_buildManifest.js.tmp.os1qiimc51'
}
 ⨯ [Error: ENOENT: no such file or directory, open '/home/phuongnam/web/.next/static/development/_buildManifest.js.tmp.tve63ioah28'] {
  errno: -2,
  code: 'ENOENT',
  syscall: 'open',
  path: '/home/phuongnam/web/.next/static/development/_buildManifest.js.tmp.tve63ioah28'
}
 ○ Compiling /_error ...
 ✓ Compiled /_error in 1320ms
 ⨯ [Error: ENOENT: no such file or directory, open '/home/phuongnam/web/.next/static/development/_buildManifest.js.tmp.kbv070vw3de'] {
  errno: -2,
  code: 'ENOENT',
  syscall: 'open',
  path: '/home/phuongnam/web/.next/static/development/_buildManifest.js.tmp.kbv070vw3de'
}
 ⨯ [Error: ENOENT: no such file or directory, open '/home/phuongnam/web/.next/static/development/_buildManifest.js.tmp.b5tap9cc8yb'] {
  errno: -2,
  code: 'ENOENT',
  syscall: 'open',
  path: '/home/phuongnam/web/.next/static/development/_buildManifest.js.tmp.b5tap9cc8yb'
}
[Error: ENOENT: no such file or directory, open '/home/phuongnam/web/.next/static/development/_buildManifest.js.tmp.os1qiimc51'] {
  errno: -2,
  code: 'ENOENT',
  syscall: 'open',
  path: '/home/phuongnam/web/.next/static/development/_buildManifest.js.tmp.os1qiimc51'
}
[Error: ENOENT: no such file or directory, open '/home/phuongnam/web/.next/static/development/_buildManifest.js.tmp.tve63ioah28'] {
  errno: -2,
  code: 'ENOENT',
  syscall: 'open',
  path: '/home/phuongnam/web/.next/static/development/_buildManifest.js.tmp.tve63ioah28'
}
 ⨯ [Error: ENOENT: no such file or directory, open '/home/phuongnam/web/.next/static/development/_buildManifest.js.tmp.br6uhoj5gj'] {
  errno: -2,
  code: 'ENOENT',
  syscall: 'open',
  path: '/home/phuongnam/web/.next/static/development/_buildManifest.js.tmp.br6uhoj5gj'
}
 ⨯ [Error: ENOENT: no such file or directory, open '/home/phuongnam/web/.next/static/development/_buildManifest.js.tmp.tds6gxme86d'] {
  errno: -2,
  code: 'ENOENT',
  syscall: 'open',
  path: '/home/phuongnam/web/.next/static/development/_buildManifest.js.tmp.tds6gxme86d'
}
[Error: ENOENT: no such file or directory, open '/home/phuongnam/web/.next/static/development/_buildManifest.js.tmp.g33n7ycqt77'] {
  errno: -2,
  code: 'ENOENT',
  syscall: 'open',
  path: '/home/phuongnam/web/.next/static/development/_buildManifest.js.tmp.g33n7ycqt77'
}
[Error: ENOENT: no such file or directory, open '/home/phuongnam/web/.next/static/development/_buildManifest.js.tmp.8udzbp433ei'] {
  errno: -2,
  code: 'ENOENT',
  syscall: 'open',
  path: '/home/phuongnam/web/.next/static/development/_buildManifest.js.tmp.8udzbp433ei'
}
 ⨯ [Error: ENOENT: no such file or directory, open '/home/phuongnam/web/.next/static/development/_buildManifest.js.tmp.72xxrx24pmw'] {
  errno: -2,
  code: 'ENOENT',
  syscall: 'open',
  path: '/home/phuongnam/web/.next/static/development/_buildManifest.js.tmp.72xxrx24pmw'
}
 ⨯ [Error: ENOENT: no such file or directory, open '/home/phuongnam/web/.next/static/development/_buildManifest.js.tmp.x2a2ept6rv'] {
  errno: -2,
  code: 'ENOENT',
  syscall: 'open',
  path: '/home/phuongnam/web/.next/static/development/_buildManifest.js.tmp.x2a2ept6rv'
}
 ⨯ [Error: ENOENT: no such file or directory, open '/home/phuongnam/web/.next/static/development/_buildManifest.js.tmp.06lxltxxo35a'] {
  errno: -2,
  code: 'ENOENT',
  syscall: 'open',
  path: '/home/phuongnam/web/.next/static/development/_buildManifest.js.tmp.06lxltxxo35a'
}
 ⨯ [Error: ENOENT: no such file or directory, open '/home/phuongnam/web/.next/static/development/_buildManifest.js.tmp.wx9egoayz1s'] {
  errno: -2,
  code: 'ENOENT',
  syscall: 'open',
  path: '/home/phuongnam/web/.next/static/development/_buildManifest.js.tmp.wx9egoayz1s'
}
[Error: ENOENT: no such file or directory, open '/home/phuongnam/web/.next/static/development/_buildManifest.js.tmp.72xxrx24pmw'] {
  errno: -2,
  code: 'ENOENT',
  syscall: 'open',
  path: '/home/phuongnam/web/.next/static/development/_buildManifest.js.tmp.72xxrx24pmw'
}
[Error: ENOENT: no such file or directory, open '/home/phuongnam/web/.next/static/development/_buildManifest.js.tmp.x2a2ept6rv'] {
  errno: -2,
  code: 'ENOENT',
  syscall: 'open',
  path: '/home/phuongnam/web/.next/static/development/_buildManifest.js.tmp.x2a2ept6rv'
}
 ⨯ [Error: ENOENT: no such file or directory, open '/home/phuongnam/web/.next/static/development/_buildManifest.js.tmp.0n2hrdzdvmd'] {
  errno: -2,
  code: 'ENOENT',
  syscall: 'open',
  path: '/home/phuongnam/web/.next/static/development/_buildManifest.js.tmp.0n2hrdzdvmd'
}
 ⨯ [Error: ENOENT: no such file or directory, open '/home/phuongnam/web/.next/static/development/_buildManifest.js.tmp.5jvws26kido'] {
  errno: -2,
  code: 'ENOENT',
  syscall: 'open',
  path: '/home/phuongnam/web/.next/static/development/_buildManifest.js.tmp.5jvws26kido'
}
[Error: ENOENT: no such file or directory, open '/home/phuongnam/web/.next/static/development/_buildManifest.js.tmp.d42diy1po3'] {
  errno: -2,
  code: 'ENOENT',
  syscall: 'open',
  path: '/home/phuongnam/web/.next/static/development/_buildManifest.js.tmp.d42diy1po3'
}
[Error: ENOENT: no such file or directory, open '/home/phuongnam/web/.next/static/development/_buildManifest.js.tmp.ceoka63b8em'] {
  errno: -2,
  code: 'ENOENT',
  syscall: 'open',
  path: '/home/phuongnam/web/.next/static/development/_buildManifest.js.tmp.ceoka63b8em'
}
 ⨯ [Error: ENOENT: no such file or directory, open '/home/phuongnam/web/.next/static/development/_buildManifest.js.tmp.gpuvo4sm4gb'] {
  errno: -2,
  code: 'ENOENT',
  syscall: 'open',
  path: '/home/phuongnam/web/.next/static/development/_buildManifest.js.tmp.gpuvo4sm4gb'
}
 ⨯ [Error: ENOENT: no such file or directory, open '/home/phuongnam/web/.next/static/development/_buildManifest.js.tmp.abtbjkyows'] {
  errno: -2,
  code: 'ENOENT',
  syscall: 'open',
  path: '/home/phuongnam/web/.next/static/development/_buildManifest.js.tmp.abtbjkyows'
}
[Error: ENOENT: no such file or directory, open '/home/phuongnam/web/.next/static/development/_buildManifest.js.tmp.gpuvo4sm4gb'] {
  errno: -2,
  code: 'ENOENT',
  syscall: 'open',
  path: '/home/phuongnam/web/.next/static/development/_buildManifest.js.tmp.gpuvo4sm4gb'
}
 ⨯ [Error: ENOENT: no such file or directory, open '/home/phuongnam/web/.next/static/development/_buildManifest.js.tmp.6ia59u7k2mv'] {
  errno: -2,
  code: 'ENOENT',
  syscall: 'open',
  path: '/home/phuongnam/web/.next/static/development/_buildManifest.js.tmp.6ia59u7k2mv'
}
[Error: ENOENT: no such file or directory, open '/home/phuongnam/web/.next/static/development/_buildManifest.js.tmp.uwj0xyjts9p'] {
  errno: -2,
  code: 'ENOENT',
  syscall: 'open',
  path: '/home/phuongnam/web/.next/static/development/_buildManifest.js.tmp.uwj0xyjts9p'
}
 ⨯ [Error: ENOENT: no such file or directory, open '/home/phuongnam/web/.next/static/development/_buildManifest.js.tmp.cibe3sptmoh'] {
  errno: -2,
  code: 'ENOENT',
  syscall: 'open',
  path: '/home/phuongnam/web/.next/static/development/_buildManifest.js.tmp.cibe3sptmoh'
}
 ⨯ [Error: ENOENT: no such file or directory, open '/home/phuongnam/web/.next/static/development/_buildManifest.js.tmp.9wcj4zvkcud'] {
  errno: -2,
  code: 'ENOENT',
  syscall: 'open',
  path: '/home/phuongnam/web/.next/static/development/_buildManifest.js.tmp.9wcj4zvkcud'
}
[Error: ENOENT: no such file or directory, open '/home/phuongnam/web/.next/static/development/_buildManifest.js.tmp.cibe3sptmoh'] {
  errno: -2,
  code: 'ENOENT',
  syscall: 'open',
  path: '/home/phuongnam/web/.next/static/development/_buildManifest.js.tmp.cibe3sptmoh'
}
 ⨯ [Error: ENOENT: no such file or directory, open '/home/phuongnam/web/.next/static/development/_buildManifest.js.tmp.g7yysbe9qwg'] {
  errno: -2,
  code: 'ENOENT',
  syscall: 'open',
  path: '/home/phuongnam/web/.next/static/development/_buildManifest.js.tmp.g7yysbe9qwg'
}
[Error: ENOENT: no such file or directory, open '/home/phuongnam/web/.next/static/development/_buildManifest.js.tmp.gxuynkb86pw'] {
  errno: -2,
  code: 'ENOENT',
  syscall: 'open',
  path: '/home/phuongnam/web/.next/static/development/_buildManifest.js.tmp.gxuynkb86pw'
}
 ⨯ [Error: ENOENT: no such file or directory, open '/home/phuongnam/web/.next/static/development/_buildManifest.js.tmp.yoa7i3wnbvr'] {
  errno: -2,
  code: 'ENOENT',
  syscall: 'open',
  path: '/home/phuongnam/web/.next/static/development/_buildManifest.js.tmp.yoa7i3wnbvr'
}
 ⨯ [Error: ENOENT: no such file or directory, open '/home/phuongnam/web/.next/static/development/_buildManifest.js.tmp.8oog6geudr9'] {
  errno: -2,
  code: 'ENOENT',
  syscall: 'open',
  path: '/home/phuongnam/web/.next/static/development/_buildManifest.js.tmp.8oog6geudr9'
}
[Error: ENOENT: no such file or directory, open '/home/phuongnam/web/.next/static/development/_buildManifest.js.tmp.yoa7i3wnbvr'] {
  errno: -2,
  code: 'ENOENT',
  syscall: 'open',
  path: '/home/phuongnam/web/.next/static/development/_buildManifest.js.tmp.yoa7i3wnbvr'
}
 ⨯ [Error: ENOENT: no such file or directory, open '/home/phuongnam/web/.next/static/development/_buildManifest.js.tmp.iu9qy3c1ue'] {
  errno: -2,
  code: 'ENOENT',
  syscall: 'open',
  path: '/home/phuongnam/web/.next/static/development/_buildManifest.js.tmp.iu9qy3c1ue'
}
[Error: ENOENT: no such file or directory, open '/home/phuongnam/web/.next/static/development/_buildManifest.js.tmp.ejc2m497lvr'] {
  errno: -2,
  code: 'ENOENT',
  syscall: 'open',
  path: '/home/phuongnam/web/.next/static/development/_buildManifest.js.tmp.ejc2m497lvr'
}
 ⨯ [Error: ENOENT: no such file or directory, open '/home/phuongnam/web/.next/static/development/_buildManifest.js.tmp.5fzib0xqjhn'] {
  errno: -2,
  code: 'ENOENT',
  syscall: 'open',
  path: '/home/phuongnam/web/.next/static/development/_buildManifest.js.tmp.5fzib0xqjhn'
}
 ⨯ [Error: ENOENT: no such file or directory, open '/home/phuongnam/web/.next/static/development/_buildManifest.js.tmp.9es6bjvg7yj'] {
  errno: -2,
  code: 'ENOENT',
  syscall: 'open',
  path: '/home/phuongnam/web/.next/static/development/_buildManifest.js.tmp.9es6bjvg7yj'
}
[Error: ENOENT: no such file or directory, open '/home/phuongnam/web/.next/static/development/_buildManifest.js.tmp.5fzib0xqjhn'] {
  errno: -2,
  code: 'ENOENT',
  syscall: 'open',
  path: '/home/phuongnam/web/.next/static/development/_buildManifest.js.tmp.5fzib0xqjhn'
}
 ⨯ [Error: ENOENT: no such file or directory, open '/home/phuongnam/web/.next/static/development/_buildManifest.js.tmp.07p71bod0w1x'] {
  errno: -2,
  code: 'ENOENT',
  syscall: 'open',
  path: '/home/phuongnam/web/.next/static/development/_buildManifest.js.tmp.07p71bod0w1x'
}
[Error: ENOENT: no such file or directory, open '/home/phuongnam/web/.next/static/development/_buildManifest.js.tmp.ni7jaav7zol'] {
  errno: -2,
  code: 'ENOENT',
  syscall: 'open',
  path: '/home/phuongnam/web/.next/static/development/_buildManifest.js.tmp.ni7jaav7zol'
}
 ⨯ [Error: ENOENT: no such file or directory, open '/home/phuongnam/web/.next/static/development/_buildManifest.js.tmp.f9p8cjsfv7p'] {
  errno: -2,
  code: 'ENOENT',
  syscall: 'open',
  path: '/home/phuongnam/web/.next/static/development/_buildManifest.js.tmp.f9p8cjsfv7p'
}
 ⨯ [Error: ENOENT: no such file or directory, open '/home/phuongnam/web/.next/static/development/_buildManifest.js.tmp.tjc0yubawf'] {
  errno: -2,
  code: 'ENOENT',
  syscall: 'open',
  path: '/home/phuongnam/web/.next/static/development/_buildManifest.js.tmp.tjc0yubawf'
}
[Error: ENOENT: no such file or directory, open '/home/phuongnam/web/.next/static/development/_buildManifest.js.tmp.f9p8cjsfv7p'] {
  errno: -2,
  code: 'ENOENT',
  syscall: 'open',
  path: '/home/phuongnam/web/.next/static/development/_buildManifest.js.tmp.f9p8cjsfv7p'
}
 ⨯ [Error: ENOENT: no such file or directory, open '/home/phuongnam/web/.next/static/development/_buildManifest.js.tmp.yxrsnp7ejz'] {
  errno: -2,
  code: 'ENOENT',
  syscall: 'open',
  path: '/home/phuongnam/web/.next/static/development/_buildManifest.js.tmp.yxrsnp7ejz'
}
[Error: ENOENT: no such file or directory, open '/home/phuongnam/web/.next/static/development/_buildManifest.js.tmp.herg1lymlom'] {
  errno: -2,
  code: 'ENOENT',
  syscall: 'open',
  path: '/home/phuongnam/web/.next/static/development/_buildManifest.js.tmp.herg1lymlom'
}
 ⨯ [Error: ENOENT: no such file or directory, open '/home/phuongnam/web/.next/static/development/_buildManifest.js.tmp.mqsgr72spj'] {
  errno: -2,
  code: 'ENOENT',
  syscall: 'open',
  path: '/home/phuongnam/web/.next/static/development/_buildManifest.js.tmp.mqsgr72spj'
}
 ⨯ [Error: ENOENT: no such file or directory, open '/home/phuongnam/web/.next/static/development/_buildManifest.js.tmp.h9w50cer9in'] {
  errno: -2,
  code: 'ENOENT',
  syscall: 'open',
  path: '/home/phuongnam/web/.next/static/development/_buildManifest.js.tmp.h9w50cer9in'
}
[Error: ENOENT: no such file or directory, open '/home/phuongnam/web/.next/static/development/_buildManifest.js.tmp.mqsgr72spj'] {
  errno: -2,
  code: 'ENOENT',
  syscall: 'open',
  path: '/home/phuongnam/web/.next/static/development/_buildManifest.js.tmp.mqsgr72spj'
}
 ⨯ [Error: ENOENT: no such file or directory, open '/home/phuongnam/web/.next/static/development/_buildManifest.js.tmp.bk2uazkuuof'] {
  errno: -2,
  code: 'ENOENT',
  syscall: 'open',
  path: '/home/phuongnam/web/.next/static/development/_buildManifest.js.tmp.bk2uazkuuof'
}
[Error: ENOENT: no such file or directory, open '/home/phuongnam/web/.next/static/development/_buildManifest.js.tmp.a2ozo5ec994'] {
  errno: -2,
  code: 'ENOENT',
  syscall: 'open',
  path: '/home/phuongnam/web/.next/static/development/_buildManifest.js.tmp.a2ozo5ec994'
}
 ⨯ [Error: ENOENT: no such file or directory, open '/home/phuongnam/web/.next/static/development/_buildManifest.js.tmp.052g9hwd47bl'] {
  errno: -2,
  code: 'ENOENT',
  syscall: 'open',
  path: '/home/phuongnam/web/.next/static/development/_buildManifest.js.tmp.052g9hwd47bl'
}
 ⨯ [Error: ENOENT: no such file or directory, open '/home/phuongnam/web/.next/static/development/_buildManifest.js.tmp.qeam0bhnr3'] {
  errno: -2,
  code: 'ENOENT',
  syscall: 'open',
  path: '/home/phuongnam/web/.next/static/development/_buildManifest.js.tmp.qeam0bhnr3'
}
[Error: ENOENT: no such file or directory, open '/home/phuongnam/web/.next/static/development/_buildManifest.js.tmp.052g9hwd47bl'] {
  errno: -2,
  code: 'ENOENT',
  syscall: 'open',
  path: '/home/phuongnam/web/.next/static/development/_buildManifest.js.tmp.052g9hwd47bl'
}
 ⨯ [Error: ENOENT: no such file or directory, open '/home/phuongnam/web/.next/static/development/_buildManifest.js.tmp.fausem5eov'] {
  errno: -2,
  code: 'ENOENT',
  syscall: 'open',
  path: '/home/phuongnam/web/.next/static/development/_buildManifest.js.tmp.fausem5eov'
}
[Error: ENOENT: no such file or directory, open '/home/phuongnam/web/.next/static/development/_buildManifest.js.tmp.tt0qq4uuse'] {
  errno: -2,
  code: 'ENOENT',
  syscall: 'open',
  path: '/home/phuongnam/web/.next/static/development/_buildManifest.js.tmp.tt0qq4uuse'
}
 ⨯ [Error: ENOENT: no such file or directory, open '/home/phuongnam/web/.next/static/development/_buildManifest.js.tmp.i3gdt4oc7qg'] {
  errno: -2,
  code: 'ENOENT',
  syscall: 'open',
  path: '/home/phuongnam/web/.next/static/development/_buildManifest.js.tmp.i3gdt4oc7qg'
}
 ⨯ [Error: ENOENT: no such file or directory, open '/home/phuongnam/web/.next/static/development/_buildManifest.js.tmp.el4hzvc4xz'] {
  errno: -2,
  code: 'ENOENT',
  syscall: 'open',
  path: '/home/phuongnam/web/.next/static/development/_buildManifest.js.tmp.el4hzvc4xz'
}
 ⨯ [Error: ENOENT: no such file or directory, open '/home/phuongnam/web/.next/static/development/_buildManifest.js.tmp.ctplbtoben7'] {
  errno: -2,
  code: 'ENOENT',
  syscall: 'open',
  path: '/home/phuongnam/web/.next/static/development/_buildManifest.js.tmp.ctplbtoben7'
}
[Error: ENOENT: no such file or directory, open '/home/phuongnam/web/.next/static/development/_buildManifest.js.tmp.el4hzvc4xz'] {
  errno: -2,
  code: 'ENOENT',
  syscall: 'open',
  path: '/home/phuongnam/web/.next/static/development/_buildManifest.js.tmp.el4hzvc4xz'
}
 ⨯ [Error: ENOENT: no such file or directory, open '/home/phuongnam/web/.next/static/development/_buildManifest.js.tmp.k36wzajowg'] {
  errno: -2,
  code: 'ENOENT',
  syscall: 'open',
  path: '/home/phuongnam/web/.next/static/development/_buildManifest.js.tmp.k36wzajowg'
}
[Error: ENOENT: no such file or directory, open '/home/phuongnam/web/.next/static/development/_buildManifest.js.tmp.mslzar5gvb'] {
  errno: -2,
  code: 'ENOENT',
  syscall: 'open',
  path: '/home/phuongnam/web/.next/static/development/_buildManifest.js.tmp.mslzar5gvb'
}
 ⨯ [Error: ENOENT: no such file or directory, open '/home/phuongnam/web/.next/static/development/_buildManifest.js.tmp.lnnl0mc2l9n'] {
  errno: -2,
  code: 'ENOENT',
  syscall: 'open',
  path: '/home/phuongnam/web/.next/static/development/_buildManifest.js.tmp.lnnl0mc2l9n'
}
 ⨯ ./app/page.tsx:10:1
Module not found: Can't resolve '@/data/events'
[0m [90m  8 |[39m [36mimport[39m [33mLoginTab[39m [36mfrom[39m [32m"./tabs/LoginTab"[39m[33m;[39m
 [90m  9 |[39m [36mimport[39m { jwtDecode } [36mfrom[39m [32m"jwt-decode"[39m[33m;[39m
[31m[1m>[22m[39m[90m 10 |[39m [36mimport[39m { eventsData [36mas[39m eventsDataStatic } [36mfrom[39m [32m"@/data/events"[39m[33m;[39m
 [90m    |[39m [31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m
 [90m 11 |[39m [36mimport[39m { newsData [36mas[39m newsDataStatic } [36mfrom[39m [32m"@/data/news"[39m[33m;[39m
 [90m 12 |[39m [36mimport[39m [33mLink[39m [36mfrom[39m [32m"next/link"[39m[33m;[39m
 [90m 13 |[39m[0m

Import map: aliased to relative './data/events' inside of [project]/


Import traces:
  Client Component Browser:
    ./app/page.tsx [Client Component Browser]
    ./app/page.tsx [Server Component]

  Client Component SSR:
    ./app/page.tsx [Client Component SSR]
    ./app/page.tsx [Server Component]

https://nextjs.org/docs/messages/module-not-found


 ⨯ ./app/page.tsx:10:1
Module not found: Can't resolve '@/data/events'
[0m [90m  8 |[39m [36mimport[39m [33mLoginTab[39m [36mfrom[39m [32m"./tabs/LoginTab"[39m[33m;[39m
 [90m  9 |[39m [36mimport[39m { jwtDecode } [36mfrom[39m [32m"jwt-decode"[39m[33m;[39m
[31m[1m>[22m[39m[90m 10 |[39m [36mimport[39m { eventsData [36mas[39m eventsDataStatic } [36mfrom[39m [32m"@/data/events"[39m[33m;[39m
 [90m    |[39m [31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m
 [90m 11 |[39m [36mimport[39m { newsData [36mas[39m newsDataStatic } [36mfrom[39m [32m"@/data/news"[39m[33m;[39m
 [90m 12 |[39m [36mimport[39m [33mLink[39m [36mfrom[39m [32m"next/link"[39m[33m;[39m
 [90m 13 |[39m[0m

Import map: aliased to relative './data/events' inside of [project]/


Import traces:
  Client Component Browser:
    ./app/page.tsx [Client Component Browser]
    ./app/page.tsx [Server Component]

  Client Component SSR:
    ./app/page.tsx [Client Component SSR]
    ./app/page.tsx [Server Component]

https://nextjs.org/docs/messages/module-not-found


 ⨯ ./app/page.tsx:10:1
Module not found: Can't resolve '@/data/events'
[0m [90m  8 |[39m [36mimport[39m [33mLoginTab[39m [36mfrom[39m [32m"./tabs/LoginTab"[39m[33m;[39m
 [90m  9 |[39m [36mimport[39m { jwtDecode } [36mfrom[39m [32m"jwt-decode"[39m[33m;[39m
[31m[1m>[22m[39m[90m 10 |[39m [36mimport[39m { eventsData [36mas[39m eventsDataStatic } [36mfrom[39m [32m"@/data/events"[39m[33m;[39m
 [90m    |[39m [31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m
 [90m 11 |[39m [36mimport[39m { newsData [36mas[39m newsDataStatic } [36mfrom[39m [32m"@/data/news"[39m[33m;[39m
 [90m 12 |[39m [36mimport[39m [33mLink[39m [36mfrom[39m [32m"next/link"[39m[33m;[39m
 [90m 13 |[39m[0m

Import map: aliased to relative './data/events' inside of [project]/


Import traces:
  Client Component Browser:
    ./app/page.tsx [Client Component Browser]
    ./app/page.tsx [Server Component]

  Client Component SSR:
    ./app/page.tsx [Client Component SSR]
    ./app/page.tsx [Server Component]

https://nextjs.org/docs/messages/module-not-found


 ⨯ ./app/page.tsx:10:1
Module not found: Can't resolve '@/data/events'
[0m [90m  8 |[39m [36mimport[39m [33mLoginTab[39m [36mfrom[39m [32m"./tabs/LoginTab"[39m[33m;[39m
 [90m  9 |[39m [36mimport[39m { jwtDecode } [36mfrom[39m [32m"jwt-decode"[39m[33m;[39m
[31m[1m>[22m[39m[90m 10 |[39m [36mimport[39m { eventsData [36mas[39m eventsDataStatic } [36mfrom[39m [32m"@/data/events"[39m[33m;[39m
 [90m    |[39m [31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m
 [90m 11 |[39m [36mimport[39m { newsData [36mas[39m newsDataStatic } [36mfrom[39m [32m"@/data/news"[39m[33m;[39m
 [90m 12 |[39m [36mimport[39m [33mLink[39m [36mfrom[39m [32m"next/link"[39m[33m;[39m
 [90m 13 |[39m[0m

Import map: aliased to relative './data/events' inside of [project]/


Import traces:
  Client Component Browser:
    ./app/page.tsx [Client Component Browser]
    ./app/page.tsx [Server Component]

  Client Component SSR:
    ./app/page.tsx [Client Component SSR]
    ./app/page.tsx [Server Component]

https://nextjs.org/docs/messages/module-not-found


 ⨯ ./app/page.tsx:10:1
Module not found: Can't resolve '@/data/events'
[0m [90m  8 |[39m [36mimport[39m [33mLoginTab[39m [36mfrom[39m [32m"./tabs/LoginTab"[39m[33m;[39m
 [90m  9 |[39m [36mimport[39m { jwtDecode } [36mfrom[39m [32m"jwt-decode"[39m[33m;[39m
[31m[1m>[22m[39m[90m 10 |[39m [36mimport[39m { eventsData [36mas[39m eventsDataStatic } [36mfrom[39m [32m"@/data/events"[39m[33m;[39m
 [90m    |[39m [31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m
 [90m 11 |[39m [36mimport[39m { newsData [36mas[39m newsDataStatic } [36mfrom[39m [32m"@/data/news"[39m[33m;[39m
 [90m 12 |[39m [36mimport[39m [33mLink[39m [36mfrom[39m [32m"next/link"[39m[33m;[39m
 [90m 13 |[39m[0m

Import map: aliased to relative './data/events' inside of [project]/


Import traces:
  Client Component Browser:
    ./app/page.tsx [Client Component Browser]
    ./app/page.tsx [Server Component]

  Client Component SSR:
    ./app/page.tsx [Client Component SSR]
    ./app/page.tsx [Server Component]

https://nextjs.org/docs/messages/module-not-found


 ⨯ ./app/page.tsx:10:1
Module not found: Can't resolve '@/data/events'
[0m [90m  8 |[39m [36mimport[39m [33mLoginTab[39m [36mfrom[39m [32m"./tabs/LoginTab"[39m[33m;[39m
 [90m  9 |[39m [36mimport[39m { jwtDecode } [36mfrom[39m [32m"jwt-decode"[39m[33m;[39m
[31m[1m>[22m[39m[90m 10 |[39m [36mimport[39m { eventsData [36mas[39m eventsDataStatic } [36mfrom[39m [32m"@/data/events"[39m[33m;[39m
 [90m    |[39m [31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m
 [90m 11 |[39m [36mimport[39m { newsData [36mas[39m newsDataStatic } [36mfrom[39m [32m"@/data/news"[39m[33m;[39m
 [90m 12 |[39m [36mimport[39m [33mLink[39m [36mfrom[39m [32m"next/link"[39m[33m;[39m
 [90m 13 |[39m[0m

Import map: aliased to relative './data/events' inside of [project]/


Import traces:
  Client Component Browser:
    ./app/page.tsx [Client Component Browser]
    ./app/page.tsx [Server Component]

  Client Component SSR:
    ./app/page.tsx [Client Component SSR]
    ./app/page.tsx [Server Component]

https://nextjs.org/docs/messages/module-not-found


 ⨯ ./app/page.tsx:10:1
Module not found: Can't resolve '@/data/events'
[0m [90m  8 |[39m [36mimport[39m [33mLoginTab[39m [36mfrom[39m [32m"./tabs/LoginTab"[39m[33m;[39m
 [90m  9 |[39m [36mimport[39m { jwtDecode } [36mfrom[39m [32m"jwt-decode"[39m[33m;[39m
[31m[1m>[22m[39m[90m 10 |[39m [36mimport[39m { eventsData [36mas[39m eventsDataStatic } [36mfrom[39m [32m"@/data/events"[39m[33m;[39m
 [90m    |[39m [31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m
 [90m 11 |[39m [36mimport[39m { newsData [36mas[39m newsDataStatic } [36mfrom[39m [32m"@/data/news"[39m[33m;[39m
 [90m 12 |[39m [36mimport[39m [33mLink[39m [36mfrom[39m [32m"next/link"[39m[33m;[39m
 [90m 13 |[39m[0m

Import map: aliased to relative './data/events' inside of [project]/


Import traces:
  Client Component Browser:
    ./app/page.tsx [Client Component Browser]
    ./app/page.tsx [Server Component]

  Client Component SSR:
    ./app/page.tsx [Client Component SSR]
    ./app/page.tsx [Server Component]

https://nextjs.org/docs/messages/module-not-found


 ⨯ ./app/page.tsx:10:1
Module not found: Can't resolve '@/data/events'
[0m [90m  8 |[39m [36mimport[39m [33mLoginTab[39m [36mfrom[39m [32m"./tabs/LoginTab"[39m[33m;[39m
 [90m  9 |[39m [36mimport[39m { jwtDecode } [36mfrom[39m [32m"jwt-decode"[39m[33m;[39m
[31m[1m>[22m[39m[90m 10 |[39m [36mimport[39m { eventsData [36mas[39m eventsDataStatic } [36mfrom[39m [32m"@/data/events"[39m[33m;[39m
 [90m    |[39m [31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m
 [90m 11 |[39m [36mimport[39m { newsData [36mas[39m newsDataStatic } [36mfrom[39m [32m"@/data/news"[39m[33m;[39m
 [90m 12 |[39m [36mimport[39m [33mLink[39m [36mfrom[39m [32m"next/link"[39m[33m;[39m
 [90m 13 |[39m[0m

Import map: aliased to relative './data/events' inside of [project]/


Import traces:
  Client Component Browser:
    ./app/page.tsx [Client Component Browser]
    ./app/page.tsx [Server Component]

  Client Component SSR:
    ./app/page.tsx [Client Component SSR]
    ./app/page.tsx [Server Component]

https://nextjs.org/docs/messages/module-not-found


 ⨯ ./app/page.tsx:11:1
Module not found: Can't resolve '@/data/news'
[0m [90m  9 |[39m [36mimport[39m { jwtDecode } [36mfrom[39m [32m"jwt-decode"[39m[33m;[39m
 [90m 10 |[39m [36mimport[39m { eventsData [36mas[39m eventsDataStatic } [36mfrom[39m [32m"@/data/events"[39m[33m;[39m
[31m[1m>[22m[39m[90m 11 |[39m [36mimport[39m { newsData [36mas[39m newsDataStatic } [36mfrom[39m [32m"@/data/news"[39m[33m;[39m
 [90m    |[39m [31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m
 [90m 12 |[39m [36mimport[39m [33mLink[39m [36mfrom[39m [32m"next/link"[39m[33m;[39m
 [90m 13 |[39m
 [90m 14 |[39m type [33mGoogleJwt[39m [33m=[39m {[0m

Import map: aliased to relative './data/news' inside of [project]/


Import traces:
  Client Component Browser:
    ./app/page.tsx [Client Component Browser]
    ./app/page.tsx [Server Component]

  Client Component SSR:
    ./app/page.tsx [Client Component SSR]
    ./app/page.tsx [Server Component]

https://nextjs.org/docs/messages/module-not-found


 ⨯ ./app/page.tsx:11:1
Module not found: Can't resolve '@/data/news'
[0m [90m  9 |[39m [36mimport[39m { jwtDecode } [36mfrom[39m [32m"jwt-decode"[39m[33m;[39m
 [90m 10 |[39m [36mimport[39m { eventsData [36mas[39m eventsDataStatic } [36mfrom[39m [32m"@/data/events"[39m[33m;[39m
[31m[1m>[22m[39m[90m 11 |[39m [36mimport[39m { newsData [36mas[39m newsDataStatic } [36mfrom[39m [32m"@/data/news"[39m[33m;[39m
 [90m    |[39m [31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m
 [90m 12 |[39m [36mimport[39m [33mLink[39m [36mfrom[39m [32m"next/link"[39m[33m;[39m
 [90m 13 |[39m
 [90m 14 |[39m type [33mGoogleJwt[39m [33m=[39m {[0m

Import map: aliased to relative './data/news' inside of [project]/


Import traces:
  Client Component Browser:
    ./app/page.tsx [Client Component Browser]
    ./app/page.tsx [Server Component]

  Client Component SSR:
    ./app/page.tsx [Client Component SSR]
    ./app/page.tsx [Server Component]

https://nextjs.org/docs/messages/module-not-found


 ⨯ ./app/page.tsx:11:1
Module not found: Can't resolve '@/data/news'
[0m [90m  9 |[39m [36mimport[39m { jwtDecode } [36mfrom[39m [32m"jwt-decode"[39m[33m;[39m
 [90m 10 |[39m [36mimport[39m { eventsData [36mas[39m eventsDataStatic } [36mfrom[39m [32m"@/data/events"[39m[33m;[39m
[31m[1m>[22m[39m[90m 11 |[39m [36mimport[39m { newsData [36mas[39m newsDataStatic } [36mfrom[39m [32m"@/data/news"[39m[33m;[39m
 [90m    |[39m [31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m
 [90m 12 |[39m [36mimport[39m [33mLink[39m [36mfrom[39m [32m"next/link"[39m[33m;[39m
 [90m 13 |[39m
 [90m 14 |[39m type [33mGoogleJwt[39m [33m=[39m {[0m

Import map: aliased to relative './data/news' inside of [project]/


Import traces:
  Client Component Browser:
    ./app/page.tsx [Client Component Browser]
    ./app/page.tsx [Server Component]

  Client Component SSR:
    ./app/page.tsx [Client Component SSR]
    ./app/page.tsx [Server Component]

https://nextjs.org/docs/messages/module-not-found


 ⨯ ./app/page.tsx:11:1
Module not found: Can't resolve '@/data/news'
[0m [90m  9 |[39m [36mimport[39m { jwtDecode } [36mfrom[39m [32m"jwt-decode"[39m[33m;[39m
 [90m 10 |[39m [36mimport[39m { eventsData [36mas[39m eventsDataStatic } [36mfrom[39m [32m"@/data/events"[39m[33m;[39m
[31m[1m>[22m[39m[90m 11 |[39m [36mimport[39m { newsData [36mas[39m newsDataStatic } [36mfrom[39m [32m"@/data/news"[39m[33m;[39m
 [90m    |[39m [31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m
 [90m 12 |[39m [36mimport[39m [33mLink[39m [36mfrom[39m [32m"next/link"[39m[33m;[39m
 [90m 13 |[39m
 [90m 14 |[39m type [33mGoogleJwt[39m [33m=[39m {[0m

Import map: aliased to relative './data/news' inside of [project]/


Import traces:
  Client Component Browser:
    ./app/page.tsx [Client Component Browser]
    ./app/page.tsx [Server Component]

  Client Component SSR:
    ./app/page.tsx [Client Component SSR]
    ./app/page.tsx [Server Component]

https://nextjs.org/docs/messages/module-not-found


 ⚠ Found a change in next.config.ts. Restarting the server to apply the changes...
   ▲ Next.js 15.5.3 (Turbopack)
   - Local:        http://localhost:3000
   - Network:      http://172.27.240.86:3000
   - Environments: .env.local

 ✓ Starting...
 ✓ Ready in 931ms
 ⚠ Found a change in next.config.ts. Restarting the server to apply the changes...
   ▲ Next.js 15.5.3 (Turbopack)
   - Local:        http://localhost:3000
   - Network:      http://172.27.240.86:3000
   - Environments: .env.local

 ✓ Starting...
 ✓ Ready in 815ms
 ○ Compiling / ...
 ✓ Compiled / in 2.1s
   Reload env: .env.local
 ✓ Compiled /api/events in 179ms
 ⨯ [Error: ENOENT: no such file or directory, open '/home/phuongnam/web/.next/static/development/_buildManifest.js.tmp.qau68etj6z'] {
  errno: -2,
  code: 'ENOENT',
  syscall: 'open',
  path: '/home/phuongnam/web/.next/static/development/_buildManifest.js.tmp.qau68etj6z'
}
 ○ Compiling /_error ...
 ✓ Compiled /_error in 1045ms
 ⨯ [Error: ENOENT: no such file or directory, open '/home/phuongnam/web/.next/static/development/_buildManifest.js.tmp.uejnnerjpgd'] {
  errno: -2,
  code: 'ENOENT',
  syscall: 'open',
  path: '/home/phuongnam/web/.next/static/development/_buildManifest.js.tmp.uejnnerjpgd'
}
[Error: ENOENT: no such file or directory, open '/home/phuongnam/web/.next/static/development/_buildManifest.js.tmp.qau68etj6z'] {
  errno: -2,
  code: 'ENOENT',
  syscall: 'open',
  path: '/home/phuongnam/web/.next/static/development/_buildManifest.js.tmp.qau68etj6z'
}
 ⨯ [Error: ENOENT: no such file or directory, open '/home/phuongnam/web/.next/static/development/_buildManifest.js.tmp.iqluo0hnqrq'] {
  errno: -2,
  code: 'ENOENT',
  syscall: 'open',
  path: '/home/phuongnam/web/.next/static/development/_buildManifest.js.tmp.iqluo0hnqrq'
}
[Error: ENOENT: no such file or directory, open '/home/phuongnam/web/.next/static/development/_buildManifest.js.tmp.xxjmkwtxsbo'] {
  errno: -2,
  code: 'ENOENT',
  syscall: 'open',
  path: '/home/phuongnam/web/.next/static/development/_buildManifest.js.tmp.xxjmkwtxsbo'
}
 ✓ Compiled /api/news in 115ms
 ⨯ [Error: ENOENT: no such file or directory, open '/home/phuongnam/web/.next/static/development/_buildManifest.js.tmp.nkelvbvidqm'] {
  errno: -2,
  code: 'ENOENT',
  syscall: 'open',
  path: '/home/phuongnam/web/.next/static/development/_buildManifest.js.tmp.nkelvbvidqm'
}
 ⨯ [Error: ENOENT: no such file or directory, open '/home/phuongnam/web/.next/static/development/_buildManifest.js.tmp.r8zwgogf54d'] {
  errno: -2,
  code: 'ENOENT',
  syscall: 'open',
  path: '/home/phuongnam/web/.next/static/development/_buildManifest.js.tmp.r8zwgogf54d'
}
[Error: ENOENT: no such file or directory, open '/home/phuongnam/web/.next/static/development/_buildManifest.js.tmp.nkelvbvidqm'] {
  errno: -2,
  code: 'ENOENT',
  syscall: 'open',
  path: '/home/phuongnam/web/.next/static/development/_buildManifest.js.tmp.nkelvbvidqm'
}
 ⨯ [Error: ENOENT: no such file or directory, open '/home/phuongnam/web/.next/static/development/_buildManifest.js.tmp.3sgymme4hom'] {
  errno: -2,
  code: 'ENOENT',
  syscall: 'open',
  path: '/home/phuongnam/web/.next/static/development/_buildManifest.js.tmp.3sgymme4hom'
}
[Error: ENOENT: no such file or directory, open '/home/phuongnam/web/.next/static/development/_buildManifest.js.tmp.ixctj74mdvi'] {
  errno: -2,
  code: 'ENOENT',
  syscall: 'open',
  path: '/home/phuongnam/web/.next/static/development/_buildManifest.js.tmp.ixctj74mdvi'
}
 ✓ Compiled /api/contacts in 90ms
 ⨯ [Error: ENOENT: no such file or directory, open '/home/phuongnam/web/.next/static/development/_buildManifest.js.tmp.ui1vnwyyqtl'] {
  errno: -2,
  code: 'ENOENT',
  syscall: 'open',
  path: '/home/phuongnam/web/.next/static/development/_buildManifest.js.tmp.ui1vnwyyqtl'
}
 ⨯ [Error: ENOENT: no such file or directory, open '/home/phuongnam/web/.next/static/development/_buildManifest.js.tmp.mbixfs5xx2'] {
  errno: -2,
  code: 'ENOENT',
  syscall: 'open',
  path: '/home/phuongnam/web/.next/static/development/_buildManifest.js.tmp.mbixfs5xx2'
}
[Error: ENOENT: no such file or directory, open '/home/phuongnam/web/.next/static/development/_buildManifest.js.tmp.ui1vnwyyqtl'] {
  errno: -2,
  code: 'ENOENT',
  syscall: 'open',
  path: '/home/phuongnam/web/.next/static/development/_buildManifest.js.tmp.ui1vnwyyqtl'
}
 ⨯ [Error: ENOENT: no such file or directory, open '/home/phuongnam/web/.next/static/development/_buildManifest.js.tmp.t4nw0tkxsk'] {
  errno: -2,
  code: 'ENOENT',
  syscall: 'open',
  path: '/home/phuongnam/web/.next/static/development/_buildManifest.js.tmp.t4nw0tkxsk'
}
[Error: ENOENT: no such file or directory, open '/home/phuongnam/web/.next/static/development/_buildManifest.js.tmp.t2t0fgym00h'] {
  errno: -2,
  code: 'ENOENT',
  syscall: 'open',
  path: '/home/phuongnam/web/.next/static/development/_buildManifest.js.tmp.t2t0fgym00h'
}
 ✓ Compiled /api/registrations in 87ms
 ⨯ [Error: ENOENT: no such file or directory, open '/home/phuongnam/web/.next/static/development/_buildManifest.js.tmp.yzn5it22kzc'] {
  errno: -2,
  code: 'ENOENT',
  syscall: 'open',
  path: '/home/phuongnam/web/.next/static/development/_buildManifest.js.tmp.yzn5it22kzc'
}
 ⨯ [Error: ENOENT: no such file or directory, open '/home/phuongnam/web/.next/static/development/_buildManifest.js.tmp.arqmriqbubh'] {
  errno: -2,
  code: 'ENOENT',
  syscall: 'open',
  path: '/home/phuongnam/web/.next/static/development/_buildManifest.js.tmp.arqmriqbubh'
}
[Error: ENOENT: no such file or directory, open '/home/phuongnam/web/.next/static/development/_buildManifest.js.tmp.yzn5it22kzc'] {
  errno: -2,
  code: 'ENOENT',
  syscall: 'open',
  path: '/home/phuongnam/web/.next/static/development/_buildManifest.js.tmp.yzn5it22kzc'
}
 ⨯ [Error: ENOENT: no such file or directory, open '/home/phuongnam/web/.next/static/development/_buildManifest.js.tmp.o3kadpywmzl'] {
  errno: -2,
  code: 'ENOENT',
  syscall: 'open',
  path: '/home/phuongnam/web/.next/static/development/_buildManifest.js.tmp.o3kadpywmzl'
}
[Error: ENOENT: no such file or directory, open '/home/phuongnam/web/.next/static/development/_buildManifest.js.tmp.ss2utpt8ngb'] {
  errno: -2,
  code: 'ENOENT',
  syscall: 'open',
  path: '/home/phuongnam/web/.next/static/development/_buildManifest.js.tmp.ss2utpt8ngb'
}
 ✓ Compiled /api/users in 82ms
 ⨯ [Error: ENOENT: no such file or directory, open '/home/phuongnam/web/.next/static/development/_buildManifest.js.tmp.0q1rki3guqh'] {
  errno: -2,
  code: 'ENOENT',
  syscall: 'open',
  path: '/home/phuongnam/web/.next/static/development/_buildManifest.js.tmp.0q1rki3guqh'
}
 ⨯ [Error: ENOENT: no such file or directory, open '/home/phuongnam/web/.next/static/development/_buildManifest.js.tmp.35adbw9u27k'] {
  errno: -2,
  code: 'ENOENT',
  syscall: 'open',
  path: '/home/phuongnam/web/.next/static/development/_buildManifest.js.tmp.35adbw9u27k'
}
[Error: ENOENT: no such file or directory, open '/home/phuongnam/web/.next/static/development/_buildManifest.js.tmp.0q1rki3guqh'] {
  errno: -2,
  code: 'ENOENT',
  syscall: 'open',
  path: '/home/phuongnam/web/.next/static/development/_buildManifest.js.tmp.0q1rki3guqh'
}
 ⨯ [Error: ENOENT: no such file or directory, open '/home/phuongnam/web/.next/static/development/_buildManifest.js.tmp.lxtkj1l2ycb'] {
  errno: -2,
  code: 'ENOENT',
  syscall: 'open',
  path: '/home/phuongnam/web/.next/static/development/_buildManifest.js.tmp.lxtkj1l2ycb'
}
[Error: ENOENT: no such file or directory, open '/home/phuongnam/web/.next/static/development/_buildManifest.js.tmp.8x121rxper'] {
  errno: -2,
  code: 'ENOENT',
  syscall: 'open',
  path: '/home/phuongnam/web/.next/static/development/_buildManifest.js.tmp.8x121rxper'
}
 ✓ Compiled /api/stats in 88ms
 ⨯ [Error: ENOENT: no such file or directory, open '/home/phuongnam/web/.next/static/development/_buildManifest.js.tmp.t9vl8z81awg'] {
  errno: -2,
  code: 'ENOENT',
  syscall: 'open',
  path: '/home/phuongnam/web/.next/static/development/_buildManifest.js.tmp.t9vl8z81awg'
}
 ⨯ [Error: ENOENT: no such file or directory, open '/home/phuongnam/web/.next/static/development/_buildManifest.js.tmp.jn3tft70iq'] {
  errno: -2,
  code: 'ENOENT',
  syscall: 'open',
  path: '/home/phuongnam/web/.next/static/development/_buildManifest.js.tmp.jn3tft70iq'
}
[Error: ENOENT: no such file or directory, open '/home/phuongnam/web/.next/static/development/_buildManifest.js.tmp.t9vl8z81awg'] {
  errno: -2,
  code: 'ENOENT',
  syscall: 'open',
  path: '/home/phuongnam/web/.next/static/development/_buildManifest.js.tmp.t9vl8z81awg'
}
 ⨯ [Error: ENOENT: no such file or directory, open '/home/phuongnam/web/.next/static/development/_buildManifest.js.tmp.1s7ih2qt9gj'] {
  errno: -2,
  code: 'ENOENT',
  syscall: 'open',
  path: '/home/phuongnam/web/.next/static/development/_buildManifest.js.tmp.1s7ih2qt9gj'
}
[Error: ENOENT: no such file or directory, open '/home/phuongnam/web/.next/static/development/_buildManifest.js.tmp.0zjf9vrkuot'] {
  errno: -2,
  code: 'ENOENT',
  syscall: 'open',
  path: '/home/phuongnam/web/.next/static/development/_buildManifest.js.tmp.0zjf9vrkuot'
}
 ⚠ Found a change in next.config.ts. Restarting the server to apply the changes...
   ▲ Next.js 15.5.3 (Turbopack)
   - Local:        http://localhost:3000
   - Network:      http://172.27.240.86:3000
   - Environments: .env.local
   - Experiments (use with caution):
     · turbo

 ✓ Starting...
 ✓ Ready in 1114ms
 ⚠ Found a change in next.config.ts. Restarting the server to apply the changes...
   ▲ Next.js 15.5.3 (Turbopack)
   - Local:        http://localhost:3000
   - Network:      http://172.27.240.86:3000
   - Environments: .env.local

 ✓ Starting...
 ✓ Ready in 957ms
 ○ Compiling /api/events ...
 ✓ Compiled /api/events in 1106ms
prisma:query SELECT "public"."Event"."id", "public"."Event"."title", "public"."Event"."description", "public"."Event"."date", "public"."Event"."time", "public"."Event"."location", "public"."Event"."capacity", "public"."Event"."price", "public"."Event"."speakers", "public"."Event"."requirements", "public"."Event"."agenda", "public"."Event"."image", "public"."Event"."category", "public"."Event"."status", "public"."Event"."registrationsCount", "public"."Event"."actualParticipants", "public"."Event"."createdAt", "public"."Event"."updatedAt" FROM "public"."Event" WHERE 1=1 ORDER BY "public"."Event"."createdAt" ASC OFFSET $1
prisma:query SELECT "public"."Registration"."id", "public"."Registration"."eventId" FROM "public"."Registration" WHERE ("public"."Registration"."status" <> $1 AND "public"."Registration"."eventId" IN ($2)) OFFSET $3
 GET /api/events 200 in 1522ms
prisma:query INSERT INTO "public"."Event" ("id","title","description","date","time","location","capacity","price","speakers","requirements","agenda","image","category","status","registrationsCount","actualParticipants","createdAt","updatedAt") VALUES ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18) RETURNING "public"."Event"."id", "public"."Event"."title", "public"."Event"."description", "public"."Event"."date", "public"."Event"."time", "public"."Event"."location", "public"."Event"."capacity", "public"."Event"."price", "public"."Event"."speakers", "public"."Event"."requirements", "public"."Event"."agenda", "public"."Event"."image", "public"."Event"."category", "public"."Event"."status", "public"."Event"."registrationsCount", "public"."Event"."actualParticipants", "public"."Event"."createdAt", "public"."Event"."updatedAt"
 POST /api/events 201 in 260ms
prisma:query SELECT 1
prisma:query SELECT "public"."Event"."id", "public"."Event"."title", "public"."Event"."description", "public"."Event"."date", "public"."Event"."time", "public"."Event"."location", "public"."Event"."capacity", "public"."Event"."price", "public"."Event"."speakers", "public"."Event"."requirements", "public"."Event"."agenda", "public"."Event"."image", "public"."Event"."category", "public"."Event"."status", "public"."Event"."registrationsCount", "public"."Event"."actualParticipants", "public"."Event"."createdAt", "public"."Event"."updatedAt" FROM "public"."Event" WHERE 1=1 ORDER BY "public"."Event"."createdAt" ASC OFFSET $1
prisma:query SELECT "public"."Registration"."id", "public"."Registration"."eventId" FROM "public"."Registration" WHERE ("public"."Registration"."status" <> $1 AND "public"."Registration"."eventId" IN ($2,$3)) OFFSET $4
 GET /api/events 200 in 252ms
 ✓ Compiled /api/contacts in 132ms
prisma:query INSERT INTO "public"."Contact" ("id","name","email","phone","company","role","message","type","status","priority","notes","createdAt","updatedAt") VALUES ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13) RETURNING "public"."Contact"."id", "public"."Contact"."name", "public"."Contact"."email", "public"."Contact"."phone", "public"."Contact"."company", "public"."Contact"."role", "public"."Contact"."message", "public"."Contact"."type", "public"."Contact"."status", "public"."Contact"."priority", "public"."Contact"."notes", "public"."Contact"."createdAt", "public"."Contact"."updatedAt"
 POST /api/contacts 201 in 403ms
 ✓ Compiled /api/users in 104ms
prisma:query SELECT 1
prisma:query SELECT "public"."User"."id", "public"."User"."name", "public"."User"."email", "public"."User"."phone", "public"."User"."company", "public"."User"."role", "public"."User"."status", "public"."User"."joinDate", "public"."User"."lastActive" FROM "public"."User" WHERE ("public"."User"."email" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query INSERT INTO "public"."User" ("id","name","email","phone","company","role","status","joinDate","lastActive") VALUES ($1,$2,$3,$4,$5,$6,$7,$8,$9) RETURNING "public"."User"."id", "public"."User"."name", "public"."User"."email", "public"."User"."phone", "public"."User"."company", "public"."User"."role", "public"."User"."status", "public"."User"."joinDate", "public"."User"."lastActive"
 POST /api/users 201 in 398ms
 ✓ Compiled /api/stats in 95ms
prisma:query SELECT COUNT(*) FROM (SELECT "public"."Event"."id" FROM "public"."Event" WHERE 1=1 OFFSET $1) AS "sub"
prisma:query SELECT COUNT(*) FROM (SELECT "public"."Event"."id" FROM "public"."Event" WHERE "public"."Event"."status" = $1 OFFSET $2) AS "sub"
prisma:query SELECT COUNT(*) FROM (SELECT "public"."Contact"."id" FROM "public"."Contact" WHERE 1=1 OFFSET $1) AS "sub"
prisma:query SELECT COUNT(*) FROM (SELECT "public"."News"."id" FROM "public"."News" WHERE 1=1 OFFSET $1) AS "sub"
prisma:query SELECT COUNT(*) FROM (SELECT "public"."News"."id" FROM "public"."News" WHERE "public"."News"."published" = $1 OFFSET $2) AS "sub"
prisma:query SELECT COUNT(*) FROM (SELECT "public"."User"."id" FROM "public"."User" WHERE 1=1 OFFSET $1) AS "sub"
prisma:query SELECT COUNT(*) FROM (SELECT "public"."User"."id" FROM "public"."User" WHERE "public"."User"."status" = $1 OFFSET $2) AS "sub"
prisma:query SELECT COUNT(*) FROM (SELECT "public"."Registration"."id" FROM "public"."Registration" WHERE "public"."Registration"."status" <> $1 OFFSET $2) AS "sub"
prisma:query SELECT COUNT(*) FROM (SELECT "public"."Contact"."id" FROM "public"."Contact" WHERE "public"."Contact"."status" = $1 OFFSET $2) AS "sub"
 GET /api/stats 200 in 358ms
 ○ Compiling / ...
 ✓ Compiled / in 1857ms
 GET / 200 in 2202ms
 GET / 200 in 142ms
 ✓ Compiled /admin in 346ms
 GET /admin 200 in 430ms
 ✓ Compiled /favicon.ico in 297ms
prisma:query SELECT 1
prisma:query SELECT "public"."Event"."id", "public"."Event"."title", "public"."Event"."description", "public"."Event"."date", "public"."Event"."time", "public"."Event"."location", "public"."Event"."capacity", "public"."Event"."price", "public"."Event"."speakers", "public"."Event"."requirements", "public"."Event"."agenda", "public"."Event"."image", "public"."Event"."category", "public"."Event"."status", "public"."Event"."registrationsCount", "public"."Event"."actualParticipants", "public"."Event"."createdAt", "public"."Event"."updatedAt" FROM "public"."Event" WHERE 1=1 ORDER BY "public"."Event"."createdAt" ASC OFFSET $1
prisma:query SELECT 1
prisma:query SELECT 1
prisma:query SELECT 1
prisma:query SELECT 1
prisma:query SELECT 1
prisma:query SELECT 1
prisma:query SELECT 1
prisma:query SELECT 1
prisma:query SELECT "public"."Registration"."id", "public"."Registration"."eventId" FROM "public"."Registration" WHERE ("public"."Registration"."status" <> $1 AND "public"."Registration"."eventId" IN ($2,$3)) OFFSET $4
 GET /api/events 200 in 397ms
prisma:query SELECT COUNT(*) FROM (SELECT "public"."Event"."id" FROM "public"."Event" WHERE 1=1 OFFSET $1) AS "sub"
prisma:query SELECT COUNT(*) FROM (SELECT "public"."News"."id" FROM "public"."News" WHERE "public"."News"."published" = $1 OFFSET $2) AS "sub"
prisma:query SELECT COUNT(*) FROM (SELECT "public"."Contact"."id" FROM "public"."Contact" WHERE "public"."Contact"."status" = $1 OFFSET $2) AS "sub"
prisma:query SELECT COUNT(*) FROM (SELECT "public"."Event"."id" FROM "public"."Event" WHERE "public"."Event"."status" = $1 OFFSET $2) AS "sub"
prisma:query SELECT COUNT(*) FROM (SELECT "public"."User"."id" FROM "public"."User" WHERE 1=1 OFFSET $1) AS "sub"
prisma:query SELECT COUNT(*) FROM (SELECT "public"."Registration"."id" FROM "public"."Registration" WHERE "public"."Registration"."status" <> $1 OFFSET $2) AS "sub"
prisma:query SELECT COUNT(*) FROM (SELECT "public"."News"."id" FROM "public"."News" WHERE 1=1 OFFSET $1) AS "sub"
prisma:query SELECT COUNT(*) FROM (SELECT "public"."Contact"."id" FROM "public"."Contact" WHERE 1=1 OFFSET $1) AS "sub"
prisma:query SELECT COUNT(*) FROM (SELECT "public"."User"."id" FROM "public"."User" WHERE "public"."User"."status" = $1 OFFSET $2) AS "sub"
 GET /api/stats 200 in 404ms
 GET /api/contacts 200 in 409ms
prisma:query SELECT "public"."Contact"."id", "public"."Contact"."name", "public"."Contact"."email", "public"."Contact"."phone", "public"."Contact"."company", "public"."Contact"."role", "public"."Contact"."message", "public"."Contact"."type", "public"."Contact"."status", "public"."Contact"."priority", "public"."Contact"."notes", "public"."Contact"."createdAt", "public"."Contact"."updatedAt" FROM "public"."Contact" WHERE 1=1 ORDER BY "public"."Contact"."createdAt" DESC OFFSET $1
 GET /favicon.ico?favicon.0b3bf435.ico 200 in 491ms
prisma:query SELECT "public"."News"."id", "public"."News"."title", "public"."News"."content", "public"."News"."excerpt", "public"."News"."author", "public"."News"."source", "public"."News"."category", "public"."News"."importance", "public"."News"."published", "public"."News"."publishedAt", "public"."News"."image", "public"."News"."tags", "public"."News"."link", "public"."News"."createdAt", "public"."News"."updatedAt" FROM "public"."News" WHERE 1=1 ORDER BY "public"."News"."createdAt" DESC OFFSET $1
 GET /api/news 200 in 490ms
prisma:query SELECT "public"."Registration"."id", "public"."Registration"."eventId", "public"."Registration"."fullName", "public"."Registration"."email", "public"."Registration"."phone", "public"."Registration"."organization", "public"."Registration"."experience", "public"."Registration"."expectation", "public"."Registration"."status", "public"."Registration"."createdAt", "public"."Registration"."updatedAt" FROM "public"."Registration" WHERE 1=1 ORDER BY "public"."Registration"."createdAt" DESC OFFSET $1
 GET /api/registrations 200 in 367ms
prisma:query SELECT "public"."Event"."id", "public"."Event"."title", "public"."Event"."description", "public"."Event"."date", "public"."Event"."time", "public"."Event"."location", "public"."Event"."capacity", "public"."Event"."price", "public"."Event"."speakers", "public"."Event"."requirements", "public"."Event"."agenda", "public"."Event"."image", "public"."Event"."category", "public"."Event"."status", "public"."Event"."registrationsCount", "public"."Event"."actualParticipants", "public"."Event"."createdAt", "public"."Event"."updatedAt" FROM "public"."Event" WHERE 1=1 ORDER BY "public"."Event"."createdAt" ASC OFFSET $1
prisma:query SELECT "public"."Registration"."id", "public"."Registration"."eventId" FROM "public"."Registration" WHERE ("public"."Registration"."status" <> $1 AND "public"."Registration"."eventId" IN ($2,$3)) OFFSET $4
prisma:query SELECT COUNT(*) FROM (SELECT "public"."Contact"."id" FROM "public"."Contact" WHERE 1=1 OFFSET $1) AS "sub"
prisma:query SELECT COUNT(*) FROM (SELECT "public"."Event"."id" FROM "public"."Event" WHERE "public"."Event"."status" = $1 OFFSET $2) AS "sub"
prisma:query SELECT COUNT(*) FROM (SELECT "public"."Registration"."id" FROM "public"."Registration" WHERE "public"."Registration"."status" <> $1 OFFSET $2) AS "sub"
prisma:query SELECT COUNT(*) FROM (SELECT "public"."News"."id" FROM "public"."News" WHERE 1=1 OFFSET $1) AS "sub"
prisma:query SELECT COUNT(*) FROM (SELECT "public"."Event"."id" FROM "public"."Event" WHERE 1=1 OFFSET $1) AS "sub"
prisma:query SELECT COUNT(*) FROM (SELECT "public"."News"."id" FROM "public"."News" WHERE "public"."News"."published" = $1 OFFSET $2) AS "sub"
prisma:query SELECT COUNT(*) FROM (SELECT "public"."Contact"."id" FROM "public"."Contact" WHERE "public"."Contact"."status" = $1 OFFSET $2) AS "sub"
prisma:query SELECT COUNT(*) FROM (SELECT "public"."User"."id" FROM "public"."User" WHERE 1=1 OFFSET $1) AS "sub"
prisma:query SELECT COUNT(*) FROM (SELECT "public"."User"."id" FROM "public"."User" WHERE "public"."User"."status" = $1 OFFSET $2) AS "sub"
 GET /api/events 200 in 423ms
 GET /api/stats 200 in 425ms
prisma:query SELECT "public"."Contact"."id", "public"."Contact"."name", "public"."Contact"."email", "public"."Contact"."phone", "public"."Contact"."company", "public"."Contact"."role", "public"."Contact"."message", "public"."Contact"."type", "public"."Contact"."status", "public"."Contact"."priority", "public"."Contact"."notes", "public"."Contact"."createdAt", "public"."Contact"."updatedAt" FROM "public"."Contact" WHERE 1=1 ORDER BY "public"."Contact"."createdAt" DESC OFFSET $1
 GET /api/contacts 200 in 427ms
 GET /api/news 200 in 359ms
prisma:query SELECT "public"."News"."id", "public"."News"."title", "public"."News"."content", "public"."News"."excerpt", "public"."News"."author", "public"."News"."source", "public"."News"."category", "public"."News"."importance", "public"."News"."published", "public"."News"."publishedAt", "public"."News"."image", "public"."News"."tags", "public"."News"."link", "public"."News"."createdAt", "public"."News"."updatedAt" FROM "public"."News" WHERE 1=1 ORDER BY "public"."News"."createdAt" DESC OFFSET $1
prisma:query SELECT "public"."Event"."id", "public"."Event"."title", "public"."Event"."description", "public"."Event"."date", "public"."Event"."time", "public"."Event"."location", "public"."Event"."capacity", "public"."Event"."price", "public"."Event"."speakers", "public"."Event"."requirements", "public"."Event"."agenda", "public"."Event"."image", "public"."Event"."category", "public"."Event"."status", "public"."Event"."registrationsCount", "public"."Event"."actualParticipants", "public"."Event"."createdAt", "public"."Event"."updatedAt" FROM "public"."Event" WHERE 1=1 ORDER BY "public"."Event"."createdAt" ASC OFFSET $1
prisma:query SELECT "public"."Registration"."id", "public"."Registration"."eventId" FROM "public"."Registration" WHERE ("public"."Registration"."status" <> $1 AND "public"."Registration"."eventId" IN ($2,$3)) OFFSET $4
prisma:query SELECT "public"."Contact"."id", "public"."Contact"."name", "public"."Contact"."email", "public"."Contact"."phone", "public"."Contact"."company", "public"."Contact"."role", "public"."Contact"."message", "public"."Contact"."type", "public"."Contact"."status", "public"."Contact"."priority", "public"."Contact"."notes", "public"."Contact"."createdAt", "public"."Contact"."updatedAt" FROM "public"."Contact" WHERE 1=1 ORDER BY "public"."Contact"."createdAt" DESC OFFSET $1
 GET /api/events 200 in 275ms
 GET /api/contacts 200 in 275ms
 GET /api/news 200 in 277ms
prisma:query SELECT "public"."News"."id", "public"."News"."title", "public"."News"."content", "public"."News"."excerpt", "public"."News"."author", "public"."News"."source", "public"."News"."category", "public"."News"."importance", "public"."News"."published", "public"."News"."publishedAt", "public"."News"."image", "public"."News"."tags", "public"."News"."link", "public"."News"."createdAt", "public"."News"."updatedAt" FROM "public"."News" WHERE 1=1 ORDER BY "public"."News"."createdAt" DESC OFFSET $1
 GET /favicon.ico?favicon.0b3bf435.ico 200 in 257ms
prisma:query SELECT "public"."Event"."id", "public"."Event"."title", "public"."Event"."description", "public"."Event"."date", "public"."Event"."time", "public"."Event"."location", "public"."Event"."capacity", "public"."Event"."price", "public"."Event"."speakers", "public"."Event"."requirements", "public"."Event"."agenda", "public"."Event"."image", "public"."Event"."category", "public"."Event"."status", "public"."Event"."registrationsCount", "public"."Event"."actualParticipants", "public"."Event"."createdAt", "public"."Event"."updatedAt" FROM "public"."Event" WHERE 1=1 ORDER BY "public"."Event"."createdAt" ASC OFFSET $1
prisma:query SELECT "public"."Registration"."id", "public"."Registration"."eventId" FROM "public"."Registration" WHERE ("public"."Registration"."status" <> $1 AND "public"."Registration"."eventId" IN ($2,$3)) OFFSET $4
 GET /api/events 200 in 256ms
prisma:query SELECT "public"."Event"."id", "public"."Event"."title", "public"."Event"."description", "public"."Event"."date", "public"."Event"."time", "public"."Event"."location", "public"."Event"."capacity", "public"."Event"."price", "public"."Event"."speakers", "public"."Event"."requirements", "public"."Event"."agenda", "public"."Event"."image", "public"."Event"."category", "public"."Event"."status", "public"."Event"."registrationsCount", "public"."Event"."actualParticipants", "public"."Event"."createdAt", "public"."Event"."updatedAt" FROM "public"."Event" WHERE 1=1 ORDER BY "public"."Event"."createdAt" ASC OFFSET $1
prisma:query SELECT "public"."Registration"."id", "public"."Registration"."eventId" FROM "public"."Registration" WHERE ("public"."Registration"."status" <> $1 AND "public"."Registration"."eventId" IN ($2,$3)) OFFSET $4
 GET /api/events 200 in 238ms
prisma:query SELECT "public"."Contact"."id", "public"."Contact"."name", "public"."Contact"."email", "public"."Contact"."phone", "public"."Contact"."company", "public"."Contact"."role", "public"."Contact"."message", "public"."Contact"."type", "public"."Contact"."status", "public"."Contact"."priority", "public"."Contact"."notes", "public"."Contact"."createdAt", "public"."Contact"."updatedAt" FROM "public"."Contact" WHERE 1=1 ORDER BY "public"."Contact"."createdAt" DESC OFFSET $1
 GET /api/contacts 200 in 241ms
prisma:query SELECT "public"."Contact"."id", "public"."Contact"."name", "public"."Contact"."email", "public"."Contact"."phone", "public"."Contact"."company", "public"."Contact"."role", "public"."Contact"."message", "public"."Contact"."type", "public"."Contact"."status", "public"."Contact"."priority", "public"."Contact"."notes", "public"."Contact"."createdAt", "public"."Contact"."updatedAt" FROM "public"."Contact" WHERE 1=1 ORDER BY "public"."Contact"."createdAt" DESC OFFSET $1
 GET /api/contacts 200 in 241ms
prisma:query SELECT "public"."Registration"."id", "public"."Registration"."eventId", "public"."Registration"."fullName", "public"."Registration"."email", "public"."Registration"."phone", "public"."Registration"."organization", "public"."Registration"."experience", "public"."Registration"."expectation", "public"."Registration"."status", "public"."Registration"."createdAt", "public"."Registration"."updatedAt" FROM "public"."Registration" WHERE 1=1 ORDER BY "public"."Registration"."createdAt" DESC OFFSET $1
 GET /api/registrations 200 in 255ms
 GET /api/events 200 in 256ms
prisma:query SELECT "public"."Event"."id", "public"."Event"."title", "public"."Event"."description", "public"."Event"."date", "public"."Event"."time", "public"."Event"."location", "public"."Event"."capacity", "public"."Event"."price", "public"."Event"."speakers", "public"."Event"."requirements", "public"."Event"."agenda", "public"."Event"."image", "public"."Event"."category", "public"."Event"."status", "public"."Event"."registrationsCount", "public"."Event"."actualParticipants", "public"."Event"."createdAt", "public"."Event"."updatedAt" FROM "public"."Event" WHERE 1=1 ORDER BY "public"."Event"."createdAt" ASC OFFSET $1
prisma:query SELECT "public"."Registration"."id", "public"."Registration"."eventId" FROM "public"."Registration" WHERE ("public"."Registration"."status" <> $1 AND "public"."Registration"."eventId" IN ($2,$3)) OFFSET $4
prisma:query SELECT "public"."Registration"."id", "public"."Registration"."eventId", "public"."Registration"."fullName", "public"."Registration"."email", "public"."Registration"."phone", "public"."Registration"."organization", "public"."Registration"."experience", "public"."Registration"."expectation", "public"."Registration"."status", "public"."Registration"."createdAt", "public"."Registration"."updatedAt" FROM "public"."Registration" WHERE 1=1 ORDER BY "public"."Registration"."createdAt" DESC OFFSET $1
 GET /api/registrations 200 in 250ms
 GET /api/events 200 in 251ms
prisma:query SELECT "public"."Event"."id", "public"."Event"."title", "public"."Event"."description", "public"."Event"."date", "public"."Event"."time", "public"."Event"."location", "public"."Event"."capacity", "public"."Event"."price", "public"."Event"."speakers", "public"."Event"."requirements", "public"."Event"."agenda", "public"."Event"."image", "public"."Event"."category", "public"."Event"."status", "public"."Event"."registrationsCount", "public"."Event"."actualParticipants", "public"."Event"."createdAt", "public"."Event"."updatedAt" FROM "public"."Event" WHERE 1=1 ORDER BY "public"."Event"."createdAt" ASC OFFSET $1
prisma:query SELECT "public"."Registration"."id", "public"."Registration"."eventId" FROM "public"."Registration" WHERE ("public"."Registration"."status" <> $1 AND "public"."Registration"."eventId" IN ($2,$3)) OFFSET $4
prisma:query SELECT "public"."Contact"."id", "public"."Contact"."name", "public"."Contact"."email", "public"."Contact"."phone", "public"."Contact"."company", "public"."Contact"."role", "public"."Contact"."message", "public"."Contact"."type", "public"."Contact"."status", "public"."Contact"."priority", "public"."Contact"."notes", "public"."Contact"."createdAt", "public"."Contact"."updatedAt" FROM "public"."Contact" WHERE 1=1 ORDER BY "public"."Contact"."createdAt" DESC OFFSET $1
 GET /api/contacts 200 in 234ms
prisma:query SELECT "public"."Contact"."id", "public"."Contact"."name", "public"."Contact"."email", "public"."Contact"."phone", "public"."Contact"."company", "public"."Contact"."role", "public"."Contact"."message", "public"."Contact"."type", "public"."Contact"."status", "public"."Contact"."priority", "public"."Contact"."notes", "public"."Contact"."createdAt", "public"."Contact"."updatedAt" FROM "public"."Contact" WHERE 1=1 ORDER BY "public"."Contact"."createdAt" DESC OFFSET $1
 GET /api/contacts 200 in 245ms
 ✓ Compiled /api/contacts/[id] in 101ms
prisma:query DELETE FROM "public"."Contact" WHERE ("public"."Contact"."id" = $1 AND 1=1) RETURNING "public"."Contact"."id", "public"."Contact"."name", "public"."Contact"."email", "public"."Contact"."phone", "public"."Contact"."company", "public"."Contact"."role", "public"."Contact"."message", "public"."Contact"."type", "public"."Contact"."status", "public"."Contact"."priority", "public"."Contact"."notes", "public"."Contact"."createdAt", "public"."Contact"."updatedAt"
 DELETE /api/contacts/cmfxq2z8p0000a74nsdxa8oyf 200 in 917ms
prisma:query SELECT 1
prisma:query SELECT "public"."User"."id", "public"."User"."name", "public"."User"."email", "public"."User"."phone", "public"."User"."company", "public"."User"."role", "public"."User"."status", "public"."User"."joinDate", "public"."User"."lastActive" FROM "public"."User" WHERE ("public"."User"."email" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query INSERT INTO "public"."User" ("id","name","email","phone","company","role","status","joinDate","lastActive") VALUES ($1,$2,$3,$4,$5,$6,$7,$8,$9) RETURNING "public"."User"."id", "public"."User"."name", "public"."User"."email", "public"."User"."phone", "public"."User"."company", "public"."User"."role", "public"."User"."status", "public"."User"."joinDate", "public"."User"."lastActive"
 POST /api/users 201 in 287ms
prisma:query SELECT 1
prisma:query SELECT "public"."Event"."id", "public"."Event"."title", "public"."Event"."description", "public"."Event"."date", "public"."Event"."time", "public"."Event"."location", "public"."Event"."capacity", "public"."Event"."price", "public"."Event"."speakers", "public"."Event"."requirements", "public"."Event"."agenda", "public"."Event"."image", "public"."Event"."category", "public"."Event"."status", "public"."Event"."registrationsCount", "public"."Event"."actualParticipants", "public"."Event"."createdAt", "public"."Event"."updatedAt" FROM "public"."Event" WHERE 1=1 ORDER BY "public"."Event"."createdAt" ASC OFFSET $1
prisma:query SELECT "public"."Registration"."id", "public"."Registration"."eventId" FROM "public"."Registration" WHERE ("public"."Registration"."status" <> $1 AND "public"."Registration"."eventId" IN ($2,$3)) OFFSET $4
 GET /api/events 200 in 250ms
prisma:query SELECT "public"."Event"."id", "public"."Event"."title", "public"."Event"."description", "public"."Event"."date", "public"."Event"."time", "public"."Event"."location", "public"."Event"."capacity", "public"."Event"."price", "public"."Event"."speakers", "public"."Event"."requirements", "public"."Event"."agenda", "public"."Event"."image", "public"."Event"."category", "public"."Event"."status", "public"."Event"."registrationsCount", "public"."Event"."actualParticipants", "public"."Event"."createdAt", "public"."Event"."updatedAt" FROM "public"."Event" WHERE 1=1 ORDER BY "public"."Event"."createdAt" ASC OFFSET $1
prisma:query SELECT "public"."Registration"."id", "public"."Registration"."eventId" FROM "public"."Registration" WHERE ("public"."Registration"."status" <> $1 AND "public"."Registration"."eventId" IN ($2,$3)) OFFSET $4
 GET /api/events 200 in 241ms
 ✓ Compiled /api/upload in 117ms
 POST /api/upload 200 in 378ms
prisma:query SELECT 1
prisma:query INSERT INTO "public"."Event" ("id","title","description","date","time","location","capacity","price","speakers","requirements","agenda","image","category","status","registrationsCount","actualParticipants","createdAt","updatedAt") VALUES ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18) RETURNING "public"."Event"."id", "public"."Event"."title", "public"."Event"."description", "public"."Event"."date", "public"."Event"."time", "public"."Event"."location", "public"."Event"."capacity", "public"."Event"."price", "public"."Event"."speakers", "public"."Event"."requirements", "public"."Event"."agenda", "public"."Event"."image", "public"."Event"."category", "public"."Event"."status", "public"."Event"."registrationsCount", "public"."Event"."actualParticipants", "public"."Event"."createdAt", "public"."Event"."updatedAt"
 POST /api/events 201 in 291ms
prisma:query SELECT "public"."Registration"."id", "public"."Registration"."eventId", "public"."Registration"."fullName", "public"."Registration"."email", "public"."Registration"."phone", "public"."Registration"."organization", "public"."Registration"."experience", "public"."Registration"."expectation", "public"."Registration"."status", "public"."Registration"."createdAt", "public"."Registration"."updatedAt" FROM "public"."Registration" WHERE 1=1 ORDER BY "public"."Registration"."createdAt" DESC OFFSET $1
 GET /api/registrations 200 in 256ms
 GET /api/events 200 in 260ms
prisma:query SELECT "public"."Event"."id", "public"."Event"."title", "public"."Event"."description", "public"."Event"."date", "public"."Event"."time", "public"."Event"."location", "public"."Event"."capacity", "public"."Event"."price", "public"."Event"."speakers", "public"."Event"."requirements", "public"."Event"."agenda", "public"."Event"."image", "public"."Event"."category", "public"."Event"."status", "public"."Event"."registrationsCount", "public"."Event"."actualParticipants", "public"."Event"."createdAt", "public"."Event"."updatedAt" FROM "public"."Event" WHERE 1=1 ORDER BY "public"."Event"."createdAt" ASC OFFSET $1
prisma:query SELECT "public"."Registration"."id", "public"."Registration"."eventId" FROM "public"."Registration" WHERE ("public"."Registration"."status" <> $1 AND "public"."Registration"."eventId" IN ($2,$3,$4)) OFFSET $5
prisma:query SELECT "public"."Event"."id", "public"."Event"."title", "public"."Event"."description", "public"."Event"."date", "public"."Event"."time", "public"."Event"."location", "public"."Event"."capacity", "public"."Event"."price", "public"."Event"."speakers", "public"."Event"."requirements", "public"."Event"."agenda", "public"."Event"."image", "public"."Event"."category", "public"."Event"."status", "public"."Event"."registrationsCount", "public"."Event"."actualParticipants", "public"."Event"."createdAt", "public"."Event"."updatedAt" FROM "public"."Event" WHERE 1=1 ORDER BY "public"."Event"."createdAt" ASC OFFSET $1
prisma:query SELECT "public"."Registration"."id", "public"."Registration"."eventId" FROM "public"."Registration" WHERE ("public"."Registration"."status" <> $1 AND "public"."Registration"."eventId" IN ($2,$3,$4)) OFFSET $5
 GET /api/events 200 in 258ms
 GET /api/registrations 200 in 259ms
prisma:query SELECT "public"."Registration"."id", "public"."Registration"."eventId", "public"."Registration"."fullName", "public"."Registration"."email", "public"."Registration"."phone", "public"."Registration"."organization", "public"."Registration"."experience", "public"."Registration"."expectation", "public"."Registration"."status", "public"."Registration"."createdAt", "public"."Registration"."updatedAt" FROM "public"."Registration" WHERE 1=1 ORDER BY "public"."Registration"."createdAt" DESC OFFSET $1
prisma:query SELECT "public"."User"."id", "public"."User"."name", "public"."User"."email", "public"."User"."phone", "public"."User"."company", "public"."User"."role", "public"."User"."status", "public"."User"."joinDate", "public"."User"."lastActive" FROM "public"."User" WHERE 1=1 ORDER BY "public"."User"."name" ASC OFFSET $1
 GET /api/users 200 in 241ms
 GET /api/users 200 in 239ms
prisma:query SELECT "public"."User"."id", "public"."User"."name", "public"."User"."email", "public"."User"."phone", "public"."User"."company", "public"."User"."role", "public"."User"."status", "public"."User"."joinDate", "public"."User"."lastActive" FROM "public"."User" WHERE 1=1 ORDER BY "public"."User"."name" ASC OFFSET $1
 ✓ Compiled /api/users/[id] in 119ms
prisma:query SELECT 1
prisma:query DELETE FROM "public"."User" WHERE ("public"."User"."id" = $1 AND 1=1) RETURNING "public"."User"."id", "public"."User"."name", "public"."User"."email", "public"."User"."phone", "public"."User"."company", "public"."User"."role", "public"."User"."status", "public"."User"."joinDate", "public"."User"."lastActive"
 DELETE /api/users/cmfxq387q0001a74n9qg0bztt 200 in 925ms
prisma:query SELECT "public"."User"."id", "public"."User"."name", "public"."User"."email", "public"."User"."phone", "public"."User"."company", "public"."User"."role", "public"."User"."status", "public"."User"."joinDate", "public"."User"."lastActive" FROM "public"."User" WHERE 1=1 ORDER BY "public"."User"."name" ASC OFFSET $1
 GET /api/users 200 in 252ms
prisma:query DELETE FROM "public"."User" WHERE ("public"."User"."id" = $1 AND 1=1) RETURNING "public"."User"."id", "public"."User"."name", "public"."User"."email", "public"."User"."phone", "public"."User"."company", "public"."User"."role", "public"."User"."status", "public"."User"."joinDate", "public"."User"."lastActive"
 DELETE /api/users/cmfxq46qi0002a74ncvou1no0 200 in 317ms
 GET /api/users 200 in 256ms
prisma:query SELECT "public"."User"."id", "public"."User"."name", "public"."User"."email", "public"."User"."phone", "public"."User"."company", "public"."User"."role", "public"."User"."status", "public"."User"."joinDate", "public"."User"."lastActive" FROM "public"."User" WHERE 1=1 ORDER BY "public"."User"."name" ASC OFFSET $1
prisma:query SELECT "public"."Contact"."id", "public"."Contact"."name", "public"."Contact"."email", "public"."Contact"."phone", "public"."Contact"."company", "public"."Contact"."role", "public"."Contact"."message", "public"."Contact"."type", "public"."Contact"."status", "public"."Contact"."priority", "public"."Contact"."notes", "public"."Contact"."createdAt", "public"."Contact"."updatedAt" FROM "public"."Contact" WHERE 1=1 ORDER BY "public"."Contact"."createdAt" DESC OFFSET $1
 GET /api/contacts 200 in 251ms
prisma:query SELECT "public"."Contact"."id", "public"."Contact"."name", "public"."Contact"."email", "public"."Contact"."phone", "public"."Contact"."company", "public"."Contact"."role", "public"."Contact"."message", "public"."Contact"."type", "public"."Contact"."status", "public"."Contact"."priority", "public"."Contact"."notes", "public"."Contact"."createdAt", "public"."Contact"."updatedAt" FROM "public"."Contact" WHERE 1=1 ORDER BY "public"."Contact"."createdAt" DESC OFFSET $1
 GET /api/contacts 200 in 280ms
prisma:query SELECT "public"."User"."id", "public"."User"."name", "public"."User"."email", "public"."User"."phone", "public"."User"."company", "public"."User"."role", "public"."User"."status", "public"."User"."joinDate", "public"."User"."lastActive" FROM "public"."User" WHERE 1=1 ORDER BY "public"."User"."name" ASC OFFSET $1
 GET /api/users 200 in 248ms
prisma:query SELECT "public"."User"."id", "public"."User"."name", "public"."User"."email", "public"."User"."phone", "public"."User"."company", "public"."User"."role", "public"."User"."status", "public"."User"."joinDate", "public"."User"."lastActive" FROM "public"."User" WHERE 1=1 ORDER BY "public"."User"."name" ASC OFFSET $1
 GET /api/users 200 in 253ms
prisma:query SELECT "public"."Registration"."id", "public"."Registration"."eventId", "public"."Registration"."fullName", "public"."Registration"."email", "public"."Registration"."phone", "public"."Registration"."organization", "public"."Registration"."experience", "public"."Registration"."expectation", "public"."Registration"."status", "public"."Registration"."createdAt", "public"."Registration"."updatedAt" FROM "public"."Registration" WHERE 1=1 ORDER BY "public"."Registration"."createdAt" DESC OFFSET $1
 GET /api/registrations 200 in 264ms
 GET /api/events 200 in 266ms
prisma:query SELECT "public"."Event"."id", "public"."Event"."title", "public"."Event"."description", "public"."Event"."date", "public"."Event"."time", "public"."Event"."location", "public"."Event"."capacity", "public"."Event"."price", "public"."Event"."speakers", "public"."Event"."requirements", "public"."Event"."agenda", "public"."Event"."image", "public"."Event"."category", "public"."Event"."status", "public"."Event"."registrationsCount", "public"."Event"."actualParticipants", "public"."Event"."createdAt", "public"."Event"."updatedAt" FROM "public"."Event" WHERE 1=1 ORDER BY "public"."Event"."createdAt" ASC OFFSET $1
prisma:query SELECT "public"."Registration"."id", "public"."Registration"."eventId" FROM "public"."Registration" WHERE ("public"."Registration"."status" <> $1 AND "public"."Registration"."eventId" IN ($2,$3,$4)) OFFSET $5
prisma:query SELECT "public"."Event"."id", "public"."Event"."title", "public"."Event"."description", "public"."Event"."date", "public"."Event"."time", "public"."Event"."location", "public"."Event"."capacity", "public"."Event"."price", "public"."Event"."speakers", "public"."Event"."requirements", "public"."Event"."agenda", "public"."Event"."image", "public"."Event"."category", "public"."Event"."status", "public"."Event"."registrationsCount", "public"."Event"."actualParticipants", "public"."Event"."createdAt", "public"."Event"."updatedAt" FROM "public"."Event" WHERE 1=1 ORDER BY "public"."Event"."createdAt" ASC OFFSET $1
prisma:query SELECT "public"."Registration"."id", "public"."Registration"."eventId" FROM "public"."Registration" WHERE ("public"."Registration"."status" <> $1 AND "public"."Registration"."eventId" IN ($2,$3,$4)) OFFSET $5
 GET /api/events 200 in 280ms
 GET /api/registrations 200 in 280ms
prisma:query SELECT "public"."Registration"."id", "public"."Registration"."eventId", "public"."Registration"."fullName", "public"."Registration"."email", "public"."Registration"."phone", "public"."Registration"."organization", "public"."Registration"."experience", "public"."Registration"."expectation", "public"."Registration"."status", "public"."Registration"."createdAt", "public"."Registration"."updatedAt" FROM "public"."Registration" WHERE 1=1 ORDER BY "public"."Registration"."createdAt" DESC OFFSET $1
prisma:query SELECT "public"."Event"."id", "public"."Event"."title", "public"."Event"."description", "public"."Event"."date", "public"."Event"."time", "public"."Event"."location", "public"."Event"."capacity", "public"."Event"."price", "public"."Event"."speakers", "public"."Event"."requirements", "public"."Event"."agenda", "public"."Event"."image", "public"."Event"."category", "public"."Event"."status", "public"."Event"."registrationsCount", "public"."Event"."actualParticipants", "public"."Event"."createdAt", "public"."Event"."updatedAt" FROM "public"."Event" WHERE 1=1 ORDER BY "public"."Event"."createdAt" ASC OFFSET $1
prisma:query SELECT "public"."Registration"."id", "public"."Registration"."eventId" FROM "public"."Registration" WHERE ("public"."Registration"."status" <> $1 AND "public"."Registration"."eventId" IN ($2,$3,$4)) OFFSET $5
 GET /api/events 200 in 263ms
prisma:query SELECT "public"."Event"."id", "public"."Event"."title", "public"."Event"."description", "public"."Event"."date", "public"."Event"."time", "public"."Event"."location", "public"."Event"."capacity", "public"."Event"."price", "public"."Event"."speakers", "public"."Event"."requirements", "public"."Event"."agenda", "public"."Event"."image", "public"."Event"."category", "public"."Event"."status", "public"."Event"."registrationsCount", "public"."Event"."actualParticipants", "public"."Event"."createdAt", "public"."Event"."updatedAt" FROM "public"."Event" WHERE 1=1 ORDER BY "public"."Event"."createdAt" ASC OFFSET $1
prisma:query SELECT "public"."Registration"."id", "public"."Registration"."eventId" FROM "public"."Registration" WHERE ("public"."Registration"."status" <> $1 AND "public"."Registration"."eventId" IN ($2,$3,$4)) OFFSET $5
 GET /api/events 200 in 253ms
prisma:query SELECT 1
prisma:query SELECT "public"."Event"."id", "public"."Event"."title", "public"."Event"."description", "public"."Event"."date", "public"."Event"."time", "public"."Event"."location", "public"."Event"."capacity", "public"."Event"."price", "public"."Event"."speakers", "public"."Event"."requirements", "public"."Event"."agenda", "public"."Event"."image", "public"."Event"."category", "public"."Event"."status", "public"."Event"."registrationsCount", "public"."Event"."actualParticipants", "public"."Event"."createdAt", "public"."Event"."updatedAt" FROM "public"."Event" WHERE ("public"."Event"."id" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query INSERT INTO "public"."Registration" ("id","eventId","fullName","email","phone","organization","experience","expectation","status","createdAt","updatedAt") VALUES ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11) RETURNING "public"."Registration"."id", "public"."Registration"."eventId", "public"."Registration"."fullName", "public"."Registration"."email", "public"."Registration"."phone", "public"."Registration"."organization", "public"."Registration"."experience", "public"."Registration"."expectation", "public"."Registration"."status", "public"."Registration"."createdAt", "public"."Registration"."updatedAt"
prisma:query SELECT COUNT(*) FROM (SELECT "public"."Registration"."id" FROM "public"."Registration" WHERE ("public"."Registration"."eventId" = $1 AND (NOT "public"."Registration"."status" = $2)) OFFSET $3) AS "sub"
prisma:query UPDATE "public"."Event" SET "registrationsCount" = $1, "updatedAt" = $2 WHERE ("public"."Event"."id" = $3 AND 1=1) RETURNING "public"."Event"."id", "public"."Event"."title", "public"."Event"."description", "public"."Event"."date", "public"."Event"."time", "public"."Event"."location", "public"."Event"."capacity", "public"."Event"."price", "public"."Event"."speakers", "public"."Event"."requirements", "public"."Event"."agenda", "public"."Event"."image", "public"."Event"."category", "public"."Event"."status", "public"."Event"."registrationsCount", "public"."Event"."actualParticipants", "public"."Event"."createdAt", "public"."Event"."updatedAt"
 POST /api/registrations 201 in 294ms
prisma:query SELECT "public"."Event"."id", "public"."Event"."title", "public"."Event"."description", "public"."Event"."date", "public"."Event"."time", "public"."Event"."location", "public"."Event"."capacity", "public"."Event"."price", "public"."Event"."speakers", "public"."Event"."requirements", "public"."Event"."agenda", "public"."Event"."image", "public"."Event"."category", "public"."Event"."status", "public"."Event"."registrationsCount", "public"."Event"."actualParticipants", "public"."Event"."createdAt", "public"."Event"."updatedAt" FROM "public"."Event" WHERE 1=1 ORDER BY "public"."Event"."createdAt" ASC OFFSET $1
prisma:query SELECT "public"."Registration"."id", "public"."Registration"."eventId" FROM "public"."Registration" WHERE ("public"."Registration"."status" <> $1 AND "public"."Registration"."eventId" IN ($2,$3,$4)) OFFSET $5
 GET /api/events 200 in 264ms
prisma:query SELECT "public"."Registration"."id", "public"."Registration"."eventId", "public"."Registration"."fullName", "public"."Registration"."email", "public"."Registration"."phone", "public"."Registration"."organization", "public"."Registration"."experience", "public"."Registration"."expectation", "public"."Registration"."status", "public"."Registration"."createdAt", "public"."Registration"."updatedAt" FROM "public"."Registration" WHERE 1=1 ORDER BY "public"."Registration"."createdAt" DESC OFFSET $1
 GET /api/registrations 200 in 265ms
 GET /api/events 200 in 265ms
prisma:query SELECT "public"."Event"."id", "public"."Event"."title", "public"."Event"."description", "public"."Event"."date", "public"."Event"."time", "public"."Event"."location", "public"."Event"."capacity", "public"."Event"."price", "public"."Event"."speakers", "public"."Event"."requirements", "public"."Event"."agenda", "public"."Event"."image", "public"."Event"."category", "public"."Event"."status", "public"."Event"."registrationsCount", "public"."Event"."actualParticipants", "public"."Event"."createdAt", "public"."Event"."updatedAt" FROM "public"."Event" WHERE 1=1 ORDER BY "public"."Event"."createdAt" ASC OFFSET $1
prisma:query SELECT "public"."Registration"."id", "public"."Registration"."eventId" FROM "public"."Registration" WHERE ("public"."Registration"."status" <> $1 AND "public"."Registration"."eventId" IN ($2,$3,$4)) OFFSET $5
prisma:query SELECT "public"."Event"."id", "public"."Event"."title", "public"."Event"."description", "public"."Event"."date", "public"."Event"."time", "public"."Event"."location", "public"."Event"."capacity", "public"."Event"."price", "public"."Event"."speakers", "public"."Event"."requirements", "public"."Event"."agenda", "public"."Event"."image", "public"."Event"."category", "public"."Event"."status", "public"."Event"."registrationsCount", "public"."Event"."actualParticipants", "public"."Event"."createdAt", "public"."Event"."updatedAt" FROM "public"."Event" WHERE 1=1 ORDER BY "public"."Event"."createdAt" ASC OFFSET $1
prisma:query SELECT "public"."Registration"."id", "public"."Registration"."eventId" FROM "public"."Registration" WHERE ("public"."Registration"."status" <> $1 AND "public"."Registration"."eventId" IN ($2,$3,$4)) OFFSET $5
 GET /api/events 200 in 277ms
 GET /api/registrations 200 in 280ms
prisma:query SELECT "public"."Registration"."id", "public"."Registration"."eventId", "public"."Registration"."fullName", "public"."Registration"."email", "public"."Registration"."phone", "public"."Registration"."organization", "public"."Registration"."experience", "public"."Registration"."expectation", "public"."Registration"."status", "public"."Registration"."createdAt", "public"."Registration"."updatedAt" FROM "public"."Registration" WHERE 1=1 ORDER BY "public"."Registration"."createdAt" DESC OFFSET $1
prisma:error Error in PostgreSQL connection: Error { kind: Closed, cause: None }
prisma:error Error in PostgreSQL connection: Error { kind: Closed, cause: None }
prisma:error Error in PostgreSQL connection: Error { kind: Closed, cause: None }
prisma:error Error in PostgreSQL connection: Error { kind: Closed, cause: None }
prisma:error Error in PostgreSQL connection: Error { kind: Closed, cause: None }
prisma:error Error in PostgreSQL connection: Error { kind: Closed, cause: None }
prisma:error Error in PostgreSQL connection: Error { kind: Closed, cause: None }
prisma:error Error in PostgreSQL connection: Error { kind: Closed, cause: None }
prisma:error Error in PostgreSQL connection: Error { kind: Closed, cause: None }
prisma:error Error in PostgreSQL connection: Error { kind: Closed, cause: None }
   Reload env: .env.local
 GET / 200 in 167ms
 GET /admin 200 in 166ms
   Reload env: .env.local
 GET / 200 in 138ms
 GET /admin 200 in 139ms
 ✓ Compiled /api/registrations/[id] in 149ms
prisma:error 
Invalid `__TURBOPACK__imported__module__$5b$project$5d2f$lib$2f$prisma$2e$ts__$5b$app$2d$route$5d$__$28$ecmascript$29$__["prisma"].registration.findUnique()` invocation in
/home/phuongnam/web/.next/server/chunks/[root-of-the-server]__c1329530._.js:186:167

  183 async function DELETE(request, { params }) {
  184     const { id } = await params;
  185     try {
→ 186         const existing = await __TURBOPACK__imported__module__$5b$project$5d2f$lib$2f$prisma$2e$ts__$5b$app$2d$route$5d$__$28$ecmascript$29$__["prisma"].registration.findUnique(
Can't reach database server at `localhost:5433`

Please make sure your database server is running at `localhost:5433`.
Error deleting registration: Error [PrismaClientKnownRequestError]: 
Invalid `__TURBOPACK__imported__module__$5b$project$5d2f$lib$2f$prisma$2e$ts__$5b$app$2d$route$5d$__$28$ecmascript$29$__["prisma"].registration.findUnique()` invocation in
/home/phuongnam/web/.next/server/chunks/[root-of-the-server]__c1329530._.js:186:167

  183 async function DELETE(request, { params }) {
  184     const { id } = await params;
  185     try {
→ 186         const existing = await __TURBOPACK__imported__module__$5b$project$5d2f$lib$2f$prisma$2e$ts__$5b$app$2d$route$5d$__$28$ecmascript$29$__["prisma"].registration.findUnique(
Can't reach database server at `localhost:5433`

Please make sure your database server is running at `localhost:5433`.
    at <unknown> (app/api/registrations/[id]/route.ts:75:48)
    at async DELETE (app/api/registrations/[id]/route.ts:75:22)
  73 |   const { id } = await params;
  74 |   try {
> 75 |     const existing = await prisma.registration.findUnique({ where: { id } });
     |                                                ^
  76 |     if (!existing) {
  77 |       return NextResponse.json(
  78 |         { success: false, error: 'Registration not found' }, {
  code: 'P1001',
  clientVersion: '5.22.0',
  meta: [Object]
}
 DELETE /api/registrations/cmfxq89ha0004a74nztyw547k 500 in 1053ms
prisma:error 
Invalid `__TURBOPACK__imported__module__$5b$project$5d2f$lib$2f$prisma$2e$ts__$5b$app$2d$route$5d$__$28$ecmascript$29$__["prisma"].contact.findMany()` invocation in
/home/phuongnam/web/.next/server/chunks/[root-of-the-server]__38d73ffd._.js:94:162

  91 ;
  92 async function GET() {
  93     try {
→ 94         const contacts = await __TURBOPACK__imported__module__$5b$project$5d2f$lib$2f$prisma$2e$ts__$5b$app$2d$route$5d$__$28$ecmascript$29$__["prisma"].contact.findMany(
Can't reach database server at `localhost:5433`

Please make sure your database server is running at `localhost:5433`.
 GET /api/contacts 500 in 265ms
prisma:error 
Invalid `__TURBOPACK__imported__module__$5b$project$5d2f$lib$2f$prisma$2e$ts__$5b$app$2d$route$5d$__$28$ecmascript$29$__["prisma"].contact.findMany()` invocation in
/home/phuongnam/web/.next/server/chunks/[root-of-the-server]__38d73ffd._.js:94:162

  91 ;
  92 async function GET() {
  93     try {
→ 94         const contacts = await __TURBOPACK__imported__module__$5b$project$5d2f$lib$2f$prisma$2e$ts__$5b$app$2d$route$5d$__$28$ecmascript$29$__["prisma"].contact.findMany(
Can't reach database server at `localhost:5433`

Please make sure your database server is running at `localhost:5433`.
 GET /api/contacts 500 in 253ms
prisma:error 
Invalid `__TURBOPACK__imported__module__$5b$project$5d2f$lib$2f$prisma$2e$ts__$5b$app$2d$route$5d$__$28$ecmascript$29$__["prisma"].event.findMany()` invocation in
/home/phuongnam/web/.next/server/chunks/[root-of-the-server]__e2e46c1a._.js:94:158

  91 ;
  92 async function GET() {
  93     try {
→ 94         const events = await __TURBOPACK__imported__module__$5b$project$5d2f$lib$2f$prisma$2e$ts__$5b$app$2d$route$5d$__$28$ecmascript$29$__["prisma"].event.findMany(
Can't reach database server at `localhost:5433`

Please make sure your database server is running at `localhost:5433`.
Error fetching events: Error [PrismaClientKnownRequestError]: 
Invalid `__TURBOPACK__imported__module__$5b$project$5d2f$lib$2f$prisma$2e$ts__$5b$app$2d$route$5d$__$28$ecmascript$29$__["prisma"].event.findMany()` invocation in
/home/phuongnam/web/.next/server/chunks/[root-of-the-server]__e2e46c1a._.js:94:158

  91 ;
  92 async function GET() {
  93     try {
→ 94         const events = await __TURBOPACK__imported__module__$5b$project$5d2f$lib$2f$prisma$2e$ts__$5b$app$2d$route$5d$__$28$ecmascript$29$__["prisma"].event.findMany(
Can't reach database server at `localhost:5433`

Please make sure your database server is running at `localhost:5433`.
    at <unknown> (app/api/events/route.ts:6:39)
    at async GET (app/api/events/route.ts:6:20)
  4 | export async function GET() {
  5 |   try {
> 6 |     const events = await prisma.event.findMany({
    |                                       ^
  7 |       include: {
  8 |         registrations: {
  9 |           where: { status: { not: 'cancelled' } }, {
  code: 'P1001',
  clientVersion: '5.22.0',
  meta: [Object]
}
 GET /api/events 500 in 347ms
prisma:error 
Invalid `__TURBOPACK__imported__module__$5b$project$5d2f$lib$2f$prisma$2e$ts__$5b$app$2d$route$5d$__$28$ecmascript$29$__["prisma"].event.findMany()` invocation in
/home/phuongnam/web/.next/server/chunks/[root-of-the-server]__e2e46c1a._.js:94:158

  91 ;
  92 async function GET() {
  93     try {
→ 94         const events = await __TURBOPACK__imported__module__$5b$project$5d2f$lib$2f$prisma$2e$ts__$5b$app$2d$route$5d$__$28$ecmascript$29$__["prisma"].event.findMany(
Can't reach database server at `localhost:5433`

Please make sure your database server is running at `localhost:5433`.
Error fetching events: Error [PrismaClientKnownRequestError]: 
Invalid `__TURBOPACK__imported__module__$5b$project$5d2f$lib$2f$prisma$2e$ts__$5b$app$2d$route$5d$__$28$ecmascript$29$__["prisma"].event.findMany()` invocation in
/home/phuongnam/web/.next/server/chunks/[root-of-the-server]__e2e46c1a._.js:94:158

  91 ;
  92 async function GET() {
  93     try {
→ 94         const events = await __TURBOPACK__imported__module__$5b$project$5d2f$lib$2f$prisma$2e$ts__$5b$app$2d$route$5d$__$28$ecmascript$29$__["prisma"].event.findMany(
Can't reach database server at `localhost:5433`

Please make sure your database server is running at `localhost:5433`.
    at <unknown> (app/api/events/route.ts:6:39)
    at async GET (app/api/events/route.ts:6:20)
  4 | export async function GET() {
  5 |   try {
> 6 |     const events = await prisma.event.findMany({
    |                                       ^
  7 |       include: {
  8 |         registrations: {
  9 |           where: { status: { not: 'cancelled' } }, {
  code: 'P1001',
  clientVersion: '5.22.0',
  meta: [Object]
}
 GET /api/events 500 in 304ms
 GET /admin 200 in 183ms
prisma:error 
Invalid `__TURBOPACK__imported__module__$5b$project$5d2f$lib$2f$prisma$2e$ts__$5b$app$2d$route$5d$__$28$ecmascript$29$__["prisma"].event.count()` invocation in
/home/phuongnam/web/.next/server/chunks/[root-of-the-server]__931563d6._.js:93:141

  90 async function GET() {
  91     try {
  92         const [totalEvents, upcomingEvents, totalRegistrations, totalNews, publishedNews, totalContacts, newContacts, totalUsers, activeUsers] = await Promise.all([
→ 93             __TURBOPACK__imported__module__$5b$project$5d2f$lib$2f$prisma$2e$ts__$5b$app$2d$route$5d$__$28$ecmascript$29$__["prisma"].event.count(
Can't reach database server at `localhost:5433`

Please make sure your database server is running at `localhost:5433`.
 GET /api/stats 500 in 347ms
prisma:error 
Invalid `__TURBOPACK__imported__module__$5b$project$5d2f$lib$2f$prisma$2e$ts__$5b$app$2d$route$5d$__$28$ecmascript$29$__["prisma"].event.count()` invocation in
/home/phuongnam/web/.next/server/chunks/[root-of-the-server]__931563d6._.js:94:141

  91 try {
  92     const [totalEvents, upcomingEvents, totalRegistrations, totalNews, publishedNews, totalContacts, newContacts, totalUsers, activeUsers] = await Promise.all([
  93         __TURBOPACK__imported__module__$5b$project$5d2f$lib$2f$prisma$2e$ts__$5b$app$2d$route$5d$__$28$ecmascript$29$__["prisma"].event.count(),
→ 94         __TURBOPACK__imported__module__$5b$project$5d2f$lib$2f$prisma$2e$ts__$5b$app$2d$route$5d$__$28$ecmascript$29$__["prisma"].event.count(
Can't reach database server at `localhost:5433`

Please make sure your database server is running at `localhost:5433`.
prisma:error 
Invalid `__TURBOPACK__imported__module__$5b$project$5d2f$lib$2f$prisma$2e$ts__$5b$app$2d$route$5d$__$28$ecmascript$29$__["prisma"].registration.count()` invocation in
/home/phuongnam/web/.next/server/chunks/[root-of-the-server]__931563d6._.js:99:148

  96         status: 'upcoming'
  97     }
  98 }),
→ 99 __TURBOPACK__imported__module__$5b$project$5d2f$lib$2f$prisma$2e$ts__$5b$app$2d$route$5d$__$28$ecmascript$29$__["prisma"].registration.count(
Can't reach database server at `localhost:5433`

Please make sure your database server is running at `localhost:5433`.
prisma:error 
Invalid `__TURBOPACK__imported__module__$5b$project$5d2f$lib$2f$prisma$2e$ts__$5b$app$2d$route$5d$__$28$ecmascript$29$__["prisma"].news.count()` invocation in
/home/phuongnam/web/.next/server/chunks/[root-of-the-server]__931563d6._.js:106:140

  103         }
  104     }
  105 }),
→ 106 __TURBOPACK__imported__module__$5b$project$5d2f$lib$2f$prisma$2e$ts__$5b$app$2d$route$5d$__$28$ecmascript$29$__["prisma"].news.count(
Can't reach database server at `localhost:5433`

Please make sure your database server is running at `localhost:5433`.
prisma:error 
Invalid `__TURBOPACK__imported__module__$5b$project$5d2f$lib$2f$prisma$2e$ts__$5b$app$2d$route$5d$__$28$ecmascript$29$__["prisma"].news.count()` invocation in
/home/phuongnam/web/.next/server/chunks/[root-of-the-server]__931563d6._.js:107:140

  104     }
  105 }),
  106 __TURBOPACK__imported__module__$5b$project$5d2f$lib$2f$prisma$2e$ts__$5b$app$2d$route$5d$__$28$ecmascript$29$__["prisma"].news.count(),
→ 107 __TURBOPACK__imported__module__$5b$project$5d2f$lib$2f$prisma$2e$ts__$5b$app$2d$route$5d$__$28$ecmascript$29$__["prisma"].news.count(
Can't reach database server at `localhost:5433`

Please make sure your database server is running at `localhost:5433`.
prisma:error 
Invalid `__TURBOPACK__imported__module__$5b$project$5d2f$lib$2f$prisma$2e$ts__$5b$app$2d$route$5d$__$28$ecmascript$29$__["prisma"].contact.count()` invocation in
/home/phuongnam/web/.next/server/chunks/[root-of-the-server]__931563d6._.js:112:143

  109         published: true
  110     }
  111 }),
→ 112 __TURBOPACK__imported__module__$5b$project$5d2f$lib$2f$prisma$2e$ts__$5b$app$2d$route$5d$__$28$ecmascript$29$__["prisma"].contact.count(
Can't reach database server at `localhost:5433`

Please make sure your database server is running at `localhost:5433`.
prisma:error 
Invalid `__TURBOPACK__imported__module__$5b$project$5d2f$lib$2f$prisma$2e$ts__$5b$app$2d$route$5d$__$28$ecmascript$29$__["prisma"].contact.count()` invocation in
/home/phuongnam/web/.next/server/chunks/[root-of-the-server]__931563d6._.js:113:143

  110     }
  111 }),
  112 __TURBOPACK__imported__module__$5b$project$5d2f$lib$2f$prisma$2e$ts__$5b$app$2d$route$5d$__$28$ecmascript$29$__["prisma"].contact.count(),
→ 113 __TURBOPACK__imported__module__$5b$project$5d2f$lib$2f$prisma$2e$ts__$5b$app$2d$route$5d$__$28$ecmascript$29$__["prisma"].contact.count(
Can't reach database server at `localhost:5433`

Please make sure your database server is running at `localhost:5433`.
prisma:error 
Invalid `__TURBOPACK__imported__module__$5b$project$5d2f$lib$2f$prisma$2e$ts__$5b$app$2d$route$5d$__$28$ecmascript$29$__["prisma"].user.count()` invocation in
/home/phuongnam/web/.next/server/chunks/[root-of-the-server]__931563d6._.js:118:140

  115         status: 'new'
  116     }
  117 }),
→ 118 __TURBOPACK__imported__module__$5b$project$5d2f$lib$2f$prisma$2e$ts__$5b$app$2d$route$5d$__$28$ecmascript$29$__["prisma"].user.count(
Can't reach database server at `localhost:5433`

Please make sure your database server is running at `localhost:5433`.
prisma:error 
Invalid `__TURBOPACK__imported__module__$5b$project$5d2f$lib$2f$prisma$2e$ts__$5b$app$2d$route$5d$__$28$ecmascript$29$__["prisma"].user.count()` invocation in
/home/phuongnam/web/.next/server/chunks/[root-of-the-server]__931563d6._.js:119:140

  116     }
  117 }),
  118 __TURBOPACK__imported__module__$5b$project$5d2f$lib$2f$prisma$2e$ts__$5b$app$2d$route$5d$__$28$ecmascript$29$__["prisma"].user.count(),
→ 119 __TURBOPACK__imported__module__$5b$project$5d2f$lib$2f$prisma$2e$ts__$5b$app$2d$route$5d$__$28$ecmascript$29$__["prisma"].user.count(
Can't reach database server at `localhost:5433`

Please make sure your database server is running at `localhost:5433`.
prisma:error 
Invalid `__TURBOPACK__imported__module__$5b$project$5d2f$lib$2f$prisma$2e$ts__$5b$app$2d$route$5d$__$28$ecmascript$29$__["prisma"].event.findMany()` invocation in
/home/phuongnam/web/.next/server/chunks/[root-of-the-server]__e2e46c1a._.js:94:158

  91 ;
  92 async function GET() {
  93     try {
→ 94         const events = await __TURBOPACK__imported__module__$5b$project$5d2f$lib$2f$prisma$2e$ts__$5b$app$2d$route$5d$__$28$ecmascript$29$__["prisma"].event.findMany(
Can't reach database server at `localhost:5433`

Please make sure your database server is running at `localhost:5433`.
Error fetching events: Error [PrismaClientKnownRequestError]: 
Invalid `__TURBOPACK__imported__module__$5b$project$5d2f$lib$2f$prisma$2e$ts__$5b$app$2d$route$5d$__$28$ecmascript$29$__["prisma"].event.findMany()` invocation in
/home/phuongnam/web/.next/server/chunks/[root-of-the-server]__e2e46c1a._.js:94:158

  91 ;
  92 async function GET() {
  93     try {
→ 94         const events = await __TURBOPACK__imported__module__$5b$project$5d2f$lib$2f$prisma$2e$ts__$5b$app$2d$route$5d$__$28$ecmascript$29$__["prisma"].event.findMany(
Can't reach database server at `localhost:5433`

Please make sure your database server is running at `localhost:5433`.
    at <unknown> (app/api/events/route.ts:6:39)
    at async GET (app/api/events/route.ts:6:20)
  4 | export async function GET() {
  5 |   try {
> 6 |     const events = await prisma.event.findMany({
    |                                       ^
  7 |       include: {
  8 |         registrations: {
  9 |           where: { status: { not: 'cancelled' } }, {
  code: 'P1001',
  clientVersion: '5.22.0',
  meta: [Object]
}
 GET /api/events 500 in 425ms
prisma:error 
Invalid `__TURBOPACK__imported__module__$5b$project$5d2f$lib$2f$prisma$2e$ts__$5b$app$2d$route$5d$__$28$ecmascript$29$__["prisma"].news.findMany()` invocation in
/home/phuongnam/web/.next/server/chunks/[root-of-the-server]__fa9661e9._.js:94:156

  91 ;
  92 async function GET() {
  93     try {
→ 94         const items = await __TURBOPACK__imported__module__$5b$project$5d2f$lib$2f$prisma$2e$ts__$5b$app$2d$route$5d$__$28$ecmascript$29$__["prisma"].news.findMany(
Can't reach database server at `localhost:5433`

Please make sure your database server is running at `localhost:5433`.
 GET /api/news 500 in 426ms
prisma:error 
Invalid `__TURBOPACK__imported__module__$5b$project$5d2f$lib$2f$prisma$2e$ts__$5b$app$2d$route$5d$__$28$ecmascript$29$__["prisma"].contact.findMany()` invocation in
/home/phuongnam/web/.next/server/chunks/[root-of-the-server]__38d73ffd._.js:94:162

  91 ;
  92 async function GET() {
  93     try {
→ 94         const contacts = await __TURBOPACK__imported__module__$5b$project$5d2f$lib$2f$prisma$2e$ts__$5b$app$2d$route$5d$__$28$ecmascript$29$__["prisma"].contact.findMany(
Can't reach database server at `localhost:5433`

Please make sure your database server is running at `localhost:5433`.
 GET /api/contacts 500 in 429ms
prisma:error 
Invalid `__TURBOPACK__imported__module__$5b$project$5d2f$lib$2f$prisma$2e$ts__$5b$app$2d$route$5d$__$28$ecmascript$29$__["prisma"].event.count()` invocation in
/home/phuongnam/web/.next/server/chunks/[root-of-the-server]__931563d6._.js:93:141

  90 async function GET() {
  91     try {
  92         const [totalEvents, upcomingEvents, totalRegistrations, totalNews, publishedNews, totalContacts, newContacts, totalUsers, activeUsers] = await Promise.all([
→ 93             __TURBOPACK__imported__module__$5b$project$5d2f$lib$2f$prisma$2e$ts__$5b$app$2d$route$5d$__$28$ecmascript$29$__["prisma"].event.count(
Can't reach database server at `localhost:5433`

Please make sure your database server is running at `localhost:5433`.
 GET /api/stats 500 in 344ms
prisma:error 
Invalid `__TURBOPACK__imported__module__$5b$project$5d2f$lib$2f$prisma$2e$ts__$5b$app$2d$route$5d$__$28$ecmascript$29$__["prisma"].event.count()` invocation in
/home/phuongnam/web/.next/server/chunks/[root-of-the-server]__931563d6._.js:94:141

  91 try {
  92     const [totalEvents, upcomingEvents, totalRegistrations, totalNews, publishedNews, totalContacts, newContacts, totalUsers, activeUsers] = await Promise.all([
  93         __TURBOPACK__imported__module__$5b$project$5d2f$lib$2f$prisma$2e$ts__$5b$app$2d$route$5d$__$28$ecmascript$29$__["prisma"].event.count(),
→ 94         __TURBOPACK__imported__module__$5b$project$5d2f$lib$2f$prisma$2e$ts__$5b$app$2d$route$5d$__$28$ecmascript$29$__["prisma"].event.count(
Can't reach database server at `localhost:5433`

Please make sure your database server is running at `localhost:5433`.
prisma:error 
Invalid `__TURBOPACK__imported__module__$5b$project$5d2f$lib$2f$prisma$2e$ts__$5b$app$2d$route$5d$__$28$ecmascript$29$__["prisma"].registration.count()` invocation in
/home/phuongnam/web/.next/server/chunks/[root-of-the-server]__931563d6._.js:99:148

  96         status: 'upcoming'
  97     }
  98 }),
→ 99 __TURBOPACK__imported__module__$5b$project$5d2f$lib$2f$prisma$2e$ts__$5b$app$2d$route$5d$__$28$ecmascript$29$__["prisma"].registration.count(
Can't reach database server at `localhost:5433`

Please make sure your database server is running at `localhost:5433`.
prisma:error 
Invalid `__TURBOPACK__imported__module__$5b$project$5d2f$lib$2f$prisma$2e$ts__$5b$app$2d$route$5d$__$28$ecmascript$29$__["prisma"].news.count()` invocation in
/home/phuongnam/web/.next/server/chunks/[root-of-the-server]__931563d6._.js:106:140

  103         }
  104     }
  105 }),
→ 106 __TURBOPACK__imported__module__$5b$project$5d2f$lib$2f$prisma$2e$ts__$5b$app$2d$route$5d$__$28$ecmascript$29$__["prisma"].news.count(
Can't reach database server at `localhost:5433`

Please make sure your database server is running at `localhost:5433`.
prisma:error 
Invalid `__TURBOPACK__imported__module__$5b$project$5d2f$lib$2f$prisma$2e$ts__$5b$app$2d$route$5d$__$28$ecmascript$29$__["prisma"].news.count()` invocation in
/home/phuongnam/web/.next/server/chunks/[root-of-the-server]__931563d6._.js:107:140

  104     }
  105 }),
  106 __TURBOPACK__imported__module__$5b$project$5d2f$lib$2f$prisma$2e$ts__$5b$app$2d$route$5d$__$28$ecmascript$29$__["prisma"].news.count(),
→ 107 __TURBOPACK__imported__module__$5b$project$5d2f$lib$2f$prisma$2e$ts__$5b$app$2d$route$5d$__$28$ecmascript$29$__["prisma"].news.count(
Can't reach database server at `localhost:5433`

Please make sure your database server is running at `localhost:5433`.
prisma:error 
Invalid `__TURBOPACK__imported__module__$5b$project$5d2f$lib$2f$prisma$2e$ts__$5b$app$2d$route$5d$__$28$ecmascript$29$__["prisma"].contact.count()` invocation in
/home/phuongnam/web/.next/server/chunks/[root-of-the-server]__931563d6._.js:112:143

  109         published: true
  110     }
  111 }),
→ 112 __TURBOPACK__imported__module__$5b$project$5d2f$lib$2f$prisma$2e$ts__$5b$app$2d$route$5d$__$28$ecmascript$29$__["prisma"].contact.count(
Can't reach database server at `localhost:5433`

Please make sure your database server is running at `localhost:5433`.
prisma:error 
Invalid `__TURBOPACK__imported__module__$5b$project$5d2f$lib$2f$prisma$2e$ts__$5b$app$2d$route$5d$__$28$ecmascript$29$__["prisma"].contact.count()` invocation in
/home/phuongnam/web/.next/server/chunks/[root-of-the-server]__931563d6._.js:113:143

  110     }
  111 }),
  112 __TURBOPACK__imported__module__$5b$project$5d2f$lib$2f$prisma$2e$ts__$5b$app$2d$route$5d$__$28$ecmascript$29$__["prisma"].contact.count(),
→ 113 __TURBOPACK__imported__module__$5b$project$5d2f$lib$2f$prisma$2e$ts__$5b$app$2d$route$5d$__$28$ecmascript$29$__["prisma"].contact.count(
Can't reach database server at `localhost:5433`

Please make sure your database server is running at `localhost:5433`.
prisma:error 
Invalid `__TURBOPACK__imported__module__$5b$project$5d2f$lib$2f$prisma$2e$ts__$5b$app$2d$route$5d$__$28$ecmascript$29$__["prisma"].user.count()` invocation in
/home/phuongnam/web/.next/server/chunks/[root-of-the-server]__931563d6._.js:118:140

  115         status: 'new'
  116     }
  117 }),
→ 118 __TURBOPACK__imported__module__$5b$project$5d2f$lib$2f$prisma$2e$ts__$5b$app$2d$route$5d$__$28$ecmascript$29$__["prisma"].user.count(
Can't reach database server at `localhost:5433`

Please make sure your database server is running at `localhost:5433`.
prisma:error 
Invalid `__TURBOPACK__imported__module__$5b$project$5d2f$lib$2f$prisma$2e$ts__$5b$app$2d$route$5d$__$28$ecmascript$29$__["prisma"].user.count()` invocation in
/home/phuongnam/web/.next/server/chunks/[root-of-the-server]__931563d6._.js:119:140

  116     }
  117 }),
  118 __TURBOPACK__imported__module__$5b$project$5d2f$lib$2f$prisma$2e$ts__$5b$app$2d$route$5d$__$28$ecmascript$29$__["prisma"].user.count(),
→ 119 __TURBOPACK__imported__module__$5b$project$5d2f$lib$2f$prisma$2e$ts__$5b$app$2d$route$5d$__$28$ecmascript$29$__["prisma"].user.count(
Can't reach database server at `localhost:5433`

Please make sure your database server is running at `localhost:5433`.
prisma:error 
Invalid `__TURBOPACK__imported__module__$5b$project$5d2f$lib$2f$prisma$2e$ts__$5b$app$2d$route$5d$__$28$ecmascript$29$__["prisma"].event.findMany()` invocation in
/home/phuongnam/web/.next/server/chunks/[root-of-the-server]__e2e46c1a._.js:94:158

  91 ;
  92 async function GET() {
  93     try {
→ 94         const events = await __TURBOPACK__imported__module__$5b$project$5d2f$lib$2f$prisma$2e$ts__$5b$app$2d$route$5d$__$28$ecmascript$29$__["prisma"].event.findMany(
Can't reach database server at `localhost:5433`

Please make sure your database server is running at `localhost:5433`.
Error fetching events: Error [PrismaClientKnownRequestError]: 
Invalid `__TURBOPACK__imported__module__$5b$project$5d2f$lib$2f$prisma$2e$ts__$5b$app$2d$route$5d$__$28$ecmascript$29$__["prisma"].event.findMany()` invocation in
/home/phuongnam/web/.next/server/chunks/[root-of-the-server]__e2e46c1a._.js:94:158

  91 ;
  92 async function GET() {
  93     try {
→ 94         const events = await __TURBOPACK__imported__module__$5b$project$5d2f$lib$2f$prisma$2e$ts__$5b$app$2d$route$5d$__$28$ecmascript$29$__["prisma"].event.findMany(
Can't reach database server at `localhost:5433`

Please make sure your database server is running at `localhost:5433`.
    at <unknown> (app/api/events/route.ts:6:39)
    at async GET (app/api/events/route.ts:6:20)
  4 | export async function GET() {
  5 |   try {
> 6 |     const events = await prisma.event.findMany({
    |                                       ^
  7 |       include: {
  8 |         registrations: {
  9 |           where: { status: { not: 'cancelled' } }, {
  code: 'P1001',
  clientVersion: '5.22.0',
  meta: [Object]
}
 GET /api/events 500 in 404ms
prisma:error 
Invalid `__TURBOPACK__imported__module__$5b$project$5d2f$lib$2f$prisma$2e$ts__$5b$app$2d$route$5d$__$28$ecmascript$29$__["prisma"].news.findMany()` invocation in
/home/phuongnam/web/.next/server/chunks/[root-of-the-server]__fa9661e9._.js:94:156

  91 ;
  92 async function GET() {
  93     try {
→ 94         const items = await __TURBOPACK__imported__module__$5b$project$5d2f$lib$2f$prisma$2e$ts__$5b$app$2d$route$5d$__$28$ecmascript$29$__["prisma"].news.findMany(
Can't reach database server at `localhost:5433`

Please make sure your database server is running at `localhost:5433`.
 GET /api/news 500 in 408ms
prisma:error 
Invalid `__TURBOPACK__imported__module__$5b$project$5d2f$lib$2f$prisma$2e$ts__$5b$app$2d$route$5d$__$28$ecmascript$29$__["prisma"].contact.findMany()` invocation in
/home/phuongnam/web/.next/server/chunks/[root-of-the-server]__38d73ffd._.js:94:162

  91 ;
  92 async function GET() {
  93     try {
→ 94         const contacts = await __TURBOPACK__imported__module__$5b$project$5d2f$lib$2f$prisma$2e$ts__$5b$app$2d$route$5d$__$28$ecmascript$29$__["prisma"].contact.findMany(
Can't reach database server at `localhost:5433`

Please make sure your database server is running at `localhost:5433`.
 GET /api/contacts 500 in 411ms
 GET /favicon.ico?favicon.0b3bf435.ico 200 in 350ms
prisma:error 
Invalid `__TURBOPACK__imported__module__$5b$project$5d2f$lib$2f$prisma$2e$ts__$5b$app$2d$route$5d$__$28$ecmascript$29$__["prisma"].event.findMany()` invocation in
/home/phuongnam/web/.next/server/chunks/[root-of-the-server]__e2e46c1a._.js:94:158

  91 ;
  92 async function GET() {
  93     try {
→ 94         const events = await __TURBOPACK__imported__module__$5b$project$5d2f$lib$2f$prisma$2e$ts__$5b$app$2d$route$5d$__$28$ecmascript$29$__["prisma"].event.findMany(
Can't reach database server at `localhost:5433`

Please make sure your database server is running at `localhost:5433`.
Error fetching events: Error [PrismaClientKnownRequestError]: 
Invalid `__TURBOPACK__imported__module__$5b$project$5d2f$lib$2f$prisma$2e$ts__$5b$app$2d$route$5d$__$28$ecmascript$29$__["prisma"].event.findMany()` invocation in
/home/phuongnam/web/.next/server/chunks/[root-of-the-server]__e2e46c1a._.js:94:158

  91 ;
  92 async function GET() {
  93     try {
→ 94         const events = await __TURBOPACK__imported__module__$5b$project$5d2f$lib$2f$prisma$2e$ts__$5b$app$2d$route$5d$__$28$ecmascript$29$__["prisma"].event.findMany(
Can't reach database server at `localhost:5433`

Please make sure your database server is running at `localhost:5433`.
    at <unknown> (app/api/events/route.ts:6:39)
    at async GET (app/api/events/route.ts:6:20)
  4 | export async function GET() {
  5 |   try {
> 6 |     const events = await prisma.event.findMany({
    |                                       ^
  7 |       include: {
  8 |         registrations: {
  9 |           where: { status: { not: 'cancelled' } }, {
  code: 'P1001',
  clientVersion: '5.22.0',
  meta: [Object]
}
 GET /api/events 500 in 325ms
prisma:error 
Invalid `__TURBOPACK__imported__module__$5b$project$5d2f$lib$2f$prisma$2e$ts__$5b$app$2d$route$5d$__$28$ecmascript$29$__["prisma"].event.findMany()` invocation in
/home/phuongnam/web/.next/server/chunks/[root-of-the-server]__e2e46c1a._.js:94:158

  91 ;
  92 async function GET() {
  93     try {
→ 94         const events = await __TURBOPACK__imported__module__$5b$project$5d2f$lib$2f$prisma$2e$ts__$5b$app$2d$route$5d$__$28$ecmascript$29$__["prisma"].event.findMany(
Can't reach database server at `localhost:5433`

Please make sure your database server is running at `localhost:5433`.
Error fetching events: Error [PrismaClientKnownRequestError]: 
Invalid `__TURBOPACK__imported__module__$5b$project$5d2f$lib$2f$prisma$2e$ts__$5b$app$2d$route$5d$__$28$ecmascript$29$__["prisma"].event.findMany()` invocation in
/home/phuongnam/web/.next/server/chunks/[root-of-the-server]__e2e46c1a._.js:94:158

  91 ;
  92 async function GET() {
  93     try {
→ 94         const events = await __TURBOPACK__imported__module__$5b$project$5d2f$lib$2f$prisma$2e$ts__$5b$app$2d$route$5d$__$28$ecmascript$29$__["prisma"].event.findMany(
Can't reach database server at `localhost:5433`

Please make sure your database server is running at `localhost:5433`.
    at <unknown> (app/api/events/route.ts:6:39)
    at async GET (app/api/events/route.ts:6:20)
  4 | export async function GET() {
  5 |   try {
> 6 |     const events = await prisma.event.findMany({
    |                                       ^
  7 |       include: {
  8 |         registrations: {
  9 |           where: { status: { not: 'cancelled' } }, {
  code: 'P1001',
  clientVersion: '5.22.0',
  meta: [Object]
}
 GET /api/events 500 in 307ms
prisma:error 
Invalid `__TURBOPACK__imported__module__$5b$project$5d2f$lib$2f$prisma$2e$ts__$5b$app$2d$route$5d$__$28$ecmascript$29$__["prisma"].event.findMany()` invocation in
/home/phuongnam/web/.next/server/chunks/[root-of-the-server]__e2e46c1a._.js:94:158

  91 ;
  92 async function GET() {
  93     try {
→ 94         const events = await __TURBOPACK__imported__module__$5b$project$5d2f$lib$2f$prisma$2e$ts__$5b$app$2d$route$5d$__$28$ecmascript$29$__["prisma"].event.findMany(
Can't reach database server at `localhost:5433`

Please make sure your database server is running at `localhost:5433`.
Error fetching events: Error [PrismaClientKnownRequestError]: 
Invalid `__TURBOPACK__imported__module__$5b$project$5d2f$lib$2f$prisma$2e$ts__$5b$app$2d$route$5d$__$28$ecmascript$29$__["prisma"].event.findMany()` invocation in
/home/phuongnam/web/.next/server/chunks/[root-of-the-server]__e2e46c1a._.js:94:158

  91 ;
  92 async function GET() {
  93     try {
→ 94         const events = await __TURBOPACK__imported__module__$5b$project$5d2f$lib$2f$prisma$2e$ts__$5b$app$2d$route$5d$__$28$ecmascript$29$__["prisma"].event.findMany(
Can't reach database server at `localhost:5433`

Please make sure your database server is running at `localhost:5433`.
    at <unknown> (app/api/events/route.ts:6:39)
    at async GET (app/api/events/route.ts:6:20)
  4 | export async function GET() {
  5 |   try {
> 6 |     const events = await prisma.event.findMany({
    |                                       ^
  7 |       include: {
  8 |         registrations: {
  9 |           where: { status: { not: 'cancelled' } }, {
  code: 'P1001',
  clientVersion: '5.22.0',
  meta: [Object]
}
 GET /api/events 500 in 371ms
prisma:error 
Invalid `__TURBOPACK__imported__module__$5b$project$5d2f$lib$2f$prisma$2e$ts__$5b$app$2d$route$5d$__$28$ecmascript$29$__["prisma"].registration.findMany()` invocation in
/home/phuongnam/web/.next/server/chunks/[root-of-the-server]__aa09fb8c._.js:94:172

  91 ;
  92 async function GET() {
  93     try {
→ 94         const registrations = await __TURBOPACK__imported__module__$5b$project$5d2f$lib$2f$prisma$2e$ts__$5b$app$2d$route$5d$__$28$ecmascript$29$__["prisma"].registration.findMany(
Can't reach database server at `localhost:5433`

Please make sure your database server is running at `localhost:5433`.
Error fetching registrations: Error [PrismaClientKnownRequestError]: 
Invalid `__TURBOPACK__imported__module__$5b$project$5d2f$lib$2f$prisma$2e$ts__$5b$app$2d$route$5d$__$28$ecmascript$29$__["prisma"].registration.findMany()` invocation in
/home/phuongnam/web/.next/server/chunks/[root-of-the-server]__aa09fb8c._.js:94:172

  91 ;
  92 async function GET() {
  93     try {
→ 94         const registrations = await __TURBOPACK__imported__module__$5b$project$5d2f$lib$2f$prisma$2e$ts__$5b$app$2d$route$5d$__$28$ecmascript$29$__["prisma"].registration.findMany(
Can't reach database server at `localhost:5433`

Please make sure your database server is running at `localhost:5433`.
    at <unknown> (app/api/registrations/route.ts:6:53)
    at async GET (app/api/registrations/route.ts:6:27)
  4 | export async function GET() {
  5 |   try {
> 6 |     const registrations = await prisma.registration.findMany({ orderBy: { createdAt: 'desc' } });
    |                                                     ^
  7 |     return NextResponse.json({ success: true, data: registrations });
  8 |   } catch (error) {
  9 |     console.error('Error fetching registrations:', error); {
  code: 'P1001',
  clientVersion: '5.22.0',
  meta: [Object]
}
 GET /api/registrations 500 in 448ms
prisma:error 
Invalid `__TURBOPACK__imported__module__$5b$project$5d2f$lib$2f$prisma$2e$ts__$5b$app$2d$route$5d$__$28$ecmascript$29$__["prisma"].event.findMany()` invocation in
/home/phuongnam/web/.next/server/chunks/[root-of-the-server]__e2e46c1a._.js:94:158

  91 ;
  92 async function GET() {
  93     try {
→ 94         const events = await __TURBOPACK__imported__module__$5b$project$5d2f$lib$2f$prisma$2e$ts__$5b$app$2d$route$5d$__$28$ecmascript$29$__["prisma"].event.findMany(
Can't reach database server at `localhost:5433`

Please make sure your database server is running at `localhost:5433`.
Error fetching events: Error [PrismaClientKnownRequestError]: 
Invalid `__TURBOPACK__imported__module__$5b$project$5d2f$lib$2f$prisma$2e$ts__$5b$app$2d$route$5d$__$28$ecmascript$29$__["prisma"].event.findMany()` invocation in
/home/phuongnam/web/.next/server/chunks/[root-of-the-server]__e2e46c1a._.js:94:158

  91 ;
  92 async function GET() {
  93     try {
→ 94         const events = await __TURBOPACK__imported__module__$5b$project$5d2f$lib$2f$prisma$2e$ts__$5b$app$2d$route$5d$__$28$ecmascript$29$__["prisma"].event.findMany(
Can't reach database server at `localhost:5433`

Please make sure your database server is running at `localhost:5433`.
    at <unknown> (app/api/events/route.ts:6:39)
    at async GET (app/api/events/route.ts:6:20)
  4 | export async function GET() {
  5 |   try {
> 6 |     const events = await prisma.event.findMany({
    |                                       ^
  7 |       include: {
  8 |         registrations: {
  9 |           where: { status: { not: 'cancelled' } }, {
  code: 'P1001',
  clientVersion: '5.22.0',
  meta: [Object]
}
 GET /api/events 500 in 358ms
prisma:error 
Invalid `__TURBOPACK__imported__module__$5b$project$5d2f$lib$2f$prisma$2e$ts__$5b$app$2d$route$5d$__$28$ecmascript$29$__["prisma"].registration.findMany()` invocation in
/home/phuongnam/web/.next/server/chunks/[root-of-the-server]__aa09fb8c._.js:94:172

  91 ;
  92 async function GET() {
  93     try {
→ 94         const registrations = await __TURBOPACK__imported__module__$5b$project$5d2f$lib$2f$prisma$2e$ts__$5b$app$2d$route$5d$__$28$ecmascript$29$__["prisma"].registration.findMany(
Can't reach database server at `localhost:5433`

Please make sure your database server is running at `localhost:5433`.
Error fetching registrations: Error [PrismaClientKnownRequestError]: 
Invalid `__TURBOPACK__imported__module__$5b$project$5d2f$lib$2f$prisma$2e$ts__$5b$app$2d$route$5d$__$28$ecmascript$29$__["prisma"].registration.findMany()` invocation in
/home/phuongnam/web/.next/server/chunks/[root-of-the-server]__aa09fb8c._.js:94:172

  91 ;
  92 async function GET() {
  93     try {
→ 94         const registrations = await __TURBOPACK__imported__module__$5b$project$5d2f$lib$2f$prisma$2e$ts__$5b$app$2d$route$5d$__$28$ecmascript$29$__["prisma"].registration.findMany(
Can't reach database server at `localhost:5433`

Please make sure your database server is running at `localhost:5433`.
    at <unknown> (app/api/registrations/route.ts:6:53)
    at async GET (app/api/registrations/route.ts:6:27)
  4 | export async function GET() {
  5 |   try {
> 6 |     const registrations = await prisma.registration.findMany({ orderBy: { createdAt: 'desc' } });
    |                                                     ^
  7 |     return NextResponse.json({ success: true, data: registrations });
  8 |   } catch (error) {
  9 |     console.error('Error fetching registrations:', error); {
  code: 'P1001',
  clientVersion: '5.22.0',
  meta: [Object]
}
 GET /api/registrations 500 in 464ms
prisma:error 
Invalid `__TURBOPACK__imported__module__$5b$project$5d2f$lib$2f$prisma$2e$ts__$5b$app$2d$route$5d$__$28$ecmascript$29$__["prisma"].contact.findMany()` invocation in
/home/phuongnam/web/.next/server/chunks/[root-of-the-server]__38d73ffd._.js:94:162

  91 ;
  92 async function GET() {
  93     try {
→ 94         const contacts = await __TURBOPACK__imported__module__$5b$project$5d2f$lib$2f$prisma$2e$ts__$5b$app$2d$route$5d$__$28$ecmascript$29$__["prisma"].contact.findMany(
Can't reach database server at `localhost:5433`

Please make sure your database server is running at `localhost:5433`.
 GET /api/contacts 500 in 436ms
prisma:error 
Invalid `__TURBOPACK__imported__module__$5b$project$5d2f$lib$2f$prisma$2e$ts__$5b$app$2d$route$5d$__$28$ecmascript$29$__["prisma"].contact.findMany()` invocation in
/home/phuongnam/web/.next/server/chunks/[root-of-the-server]__38d73ffd._.js:94:162

  91 ;
  92 async function GET() {
  93     try {
→ 94         const contacts = await __TURBOPACK__imported__module__$5b$project$5d2f$lib$2f$prisma$2e$ts__$5b$app$2d$route$5d$__$28$ecmascript$29$__["prisma"].contact.findMany(
Can't reach database server at `localhost:5433`

Please make sure your database server is running at `localhost:5433`.
 GET /api/contacts 500 in 310ms
prisma:error 
Invalid `__TURBOPACK__imported__module__$5b$project$5d2f$lib$2f$prisma$2e$ts__$5b$app$2d$route$5d$__$28$ecmascript$29$__["prisma"].user.findMany()` invocation in
/home/phuongnam/web/.next/server/chunks/[root-of-the-server]__91c982f1._.js:94:156

  91 ;
  92 async function GET() {
  93     try {
→ 94         const users = await __TURBOPACK__imported__module__$5b$project$5d2f$lib$2f$prisma$2e$ts__$5b$app$2d$route$5d$__$28$ecmascript$29$__["prisma"].user.findMany(
Can't reach database server at `localhost:5433`

Please make sure your database server is running at `localhost:5433`.
 GET /api/users 500 in 318ms
prisma:error 
Invalid `__TURBOPACK__imported__module__$5b$project$5d2f$lib$2f$prisma$2e$ts__$5b$app$2d$route$5d$__$28$ecmascript$29$__["prisma"].user.findMany()` invocation in
/home/phuongnam/web/.next/server/chunks/[root-of-the-server]__91c982f1._.js:94:156

  91 ;
  92 async function GET() {
  93     try {
→ 94         const users = await __TURBOPACK__imported__module__$5b$project$5d2f$lib$2f$prisma$2e$ts__$5b$app$2d$route$5d$__$28$ecmascript$29$__["prisma"].user.findMany(
Can't reach database server at `localhost:5433`

Please make sure your database server is running at `localhost:5433`.
 GET /api/users 500 in 315ms
 GET / 200 in 97ms
prisma:error 
Invalid `__TURBOPACK__imported__module__$5b$project$5d2f$lib$2f$prisma$2e$ts__$5b$app$2d$route$5d$__$28$ecmascript$29$__["prisma"].event.findMany()` invocation in
/home/phuongnam/web/.next/server/chunks/[root-of-the-server]__e2e46c1a._.js:94:158

  91 ;
  92 async function GET() {
  93     try {
→ 94         const events = await __TURBOPACK__imported__module__$5b$project$5d2f$lib$2f$prisma$2e$ts__$5b$app$2d$route$5d$__$28$ecmascript$29$__["prisma"].event.findMany(
Can't reach database server at `localhost:5433`

Please make sure your database server is running at `localhost:5433`.
Error fetching events: Error [PrismaClientKnownRequestError]: 
Invalid `__TURBOPACK__imported__module__$5b$project$5d2f$lib$2f$prisma$2e$ts__$5b$app$2d$route$5d$__$28$ecmascript$29$__["prisma"].event.findMany()` invocation in
/home/phuongnam/web/.next/server/chunks/[root-of-the-server]__e2e46c1a._.js:94:158

  91 ;
  92 async function GET() {
  93     try {
→ 94         const events = await __TURBOPACK__imported__module__$5b$project$5d2f$lib$2f$prisma$2e$ts__$5b$app$2d$route$5d$__$28$ecmascript$29$__["prisma"].event.findMany(
Can't reach database server at `localhost:5433`

Please make sure your database server is running at `localhost:5433`.
    at <unknown> (app/api/events/route.ts:6:39)
    at async GET (app/api/events/route.ts:6:20)
  4 | export async function GET() {
  5 |   try {
> 6 |     const events = await prisma.event.findMany({
    |                                       ^
  7 |       include: {
  8 |         registrations: {
  9 |           where: { status: { not: 'cancelled' } }, {
  code: 'P1001',
  clientVersion: '5.22.0',
  meta: [Object]
}
 GET /api/events 500 in 366ms
prisma:error 
Invalid `__TURBOPACK__imported__module__$5b$project$5d2f$lib$2f$prisma$2e$ts__$5b$app$2d$route$5d$__$28$ecmascript$29$__["prisma"].registration.findMany()` invocation in
/home/phuongnam/web/.next/server/chunks/[root-of-the-server]__aa09fb8c._.js:94:172

  91 ;
  92 async function GET() {
  93     try {
→ 94         const registrations = await __TURBOPACK__imported__module__$5b$project$5d2f$lib$2f$prisma$2e$ts__$5b$app$2d$route$5d$__$28$ecmascript$29$__["prisma"].registration.findMany(
Can't reach database server at `localhost:5433`

Please make sure your database server is running at `localhost:5433`.
Error fetching registrations: Error [PrismaClientKnownRequestError]: 
Invalid `__TURBOPACK__imported__module__$5b$project$5d2f$lib$2f$prisma$2e$ts__$5b$app$2d$route$5d$__$28$ecmascript$29$__["prisma"].registration.findMany()` invocation in
/home/phuongnam/web/.next/server/chunks/[root-of-the-server]__aa09fb8c._.js:94:172

  91 ;
  92 async function GET() {
  93     try {
→ 94         const registrations = await __TURBOPACK__imported__module__$5b$project$5d2f$lib$2f$prisma$2e$ts__$5b$app$2d$route$5d$__$28$ecmascript$29$__["prisma"].registration.findMany(
Can't reach database server at `localhost:5433`

Please make sure your database server is running at `localhost:5433`.
    at <unknown> (app/api/registrations/route.ts:6:53)
    at async GET (app/api/registrations/route.ts:6:27)
  4 | export async function GET() {
  5 |   try {
> 6 |     const registrations = await prisma.registration.findMany({ orderBy: { createdAt: 'desc' } });
    |                                                     ^
  7 |     return NextResponse.json({ success: true, data: registrations });
  8 |   } catch (error) {
  9 |     console.error('Error fetching registrations:', error); {
  code: 'P1001',
  clientVersion: '5.22.0',
  meta: [Object]
}
 GET /api/registrations 500 in 432ms
prisma:error 
Invalid `__TURBOPACK__imported__module__$5b$project$5d2f$lib$2f$prisma$2e$ts__$5b$app$2d$route$5d$__$28$ecmascript$29$__["prisma"].news.findMany()` invocation in
/home/phuongnam/web/.next/server/chunks/[root-of-the-server]__fa9661e9._.js:94:156

  91 ;
  92 async function GET() {
  93     try {
→ 94         const items = await __TURBOPACK__imported__module__$5b$project$5d2f$lib$2f$prisma$2e$ts__$5b$app$2d$route$5d$__$28$ecmascript$29$__["prisma"].news.findMany(
Can't reach database server at `localhost:5433`

Please make sure your database server is running at `localhost:5433`.
 GET /api/news 500 in 433ms
prisma:error 
Invalid `__TURBOPACK__imported__module__$5b$project$5d2f$lib$2f$prisma$2e$ts__$5b$app$2d$route$5d$__$28$ecmascript$29$__["prisma"].contact.findMany()` invocation in
/home/phuongnam/web/.next/server/chunks/[root-of-the-server]__38d73ffd._.js:94:162

  91 ;
  92 async function GET() {
  93     try {
→ 94         const contacts = await __TURBOPACK__imported__module__$5b$project$5d2f$lib$2f$prisma$2e$ts__$5b$app$2d$route$5d$__$28$ecmascript$29$__["prisma"].contact.findMany(
Can't reach database server at `localhost:5433`

Please make sure your database server is running at `localhost:5433`.
 GET /api/contacts 500 in 437ms
 GET /favicon.ico?favicon.0b3bf435.ico 200 in 302ms
prisma:error 
Invalid `__TURBOPACK__imported__module__$5b$project$5d2f$lib$2f$prisma$2e$ts__$5b$app$2d$route$5d$__$28$ecmascript$29$__["prisma"].user.findUnique()` invocation in
/home/phuongnam/web/.next/server/chunks/[root-of-the-server]__91c982f1._.js:116:159

  113 try {
  114     const body = await request.json();
  115     // Upsert by unique email: if exists, return existing; else create minimal record
→ 116     const existing = await __TURBOPACK__imported__module__$5b$project$5d2f$lib$2f$prisma$2e$ts__$5b$app$2d$route$5d$__$28$ecmascript$29$__["prisma"].user.findUnique(
Can't reach database server at `localhost:5433`

Please make sure your database server is running at `localhost:5433`.
 POST /api/users 500 in 258ms
prisma:error 
Invalid `__TURBOPACK__imported__module__$5b$project$5d2f$lib$2f$prisma$2e$ts__$5b$app$2d$route$5d$__$28$ecmascript$29$__["prisma"].contact.findMany()` invocation in
/home/phuongnam/web/.next/server/chunks/[root-of-the-server]__38d73ffd._.js:94:162

  91 ;
  92 async function GET() {
  93     try {
→ 94         const contacts = await __TURBOPACK__imported__module__$5b$project$5d2f$lib$2f$prisma$2e$ts__$5b$app$2d$route$5d$__$28$ecmascript$29$__["prisma"].contact.findMany(
Can't reach database server at `localhost:5433`

Please make sure your database server is running at `localhost:5433`.
 GET /api/contacts 500 in 249ms
prisma:error 
Invalid `__TURBOPACK__imported__module__$5b$project$5d2f$lib$2f$prisma$2e$ts__$5b$app$2d$route$5d$__$28$ecmascript$29$__["prisma"].contact.findMany()` invocation in
/home/phuongnam/web/.next/server/chunks/[root-of-the-server]__38d73ffd._.js:94:162

  91 ;
  92 async function GET() {
  93     try {
→ 94         const contacts = await __TURBOPACK__imported__module__$5b$project$5d2f$lib$2f$prisma$2e$ts__$5b$app$2d$route$5d$__$28$ecmascript$29$__["prisma"].contact.findMany(
Can't reach database server at `localhost:5433`

Please make sure your database server is running at `localhost:5433`.
 GET /api/contacts 500 in 241ms
prisma:error 
Invalid `__TURBOPACK__imported__module__$5b$project$5d2f$lib$2f$prisma$2e$ts__$5b$app$2d$route$5d$__$28$ecmascript$29$__["prisma"].user.findMany()` invocation in
/home/phuongnam/web/.next/server/chunks/[root-of-the-server]__91c982f1._.js:94:156

  91 ;
  92 async function GET() {
  93     try {
→ 94         const users = await __TURBOPACK__imported__module__$5b$project$5d2f$lib$2f$prisma$2e$ts__$5b$app$2d$route$5d$__$28$ecmascript$29$__["prisma"].user.findMany(
Can't reach database server at `localhost:5433`

Please make sure your database server is running at `localhost:5433`.
 GET /api/users 500 in 239ms
prisma:error 
Invalid `__TURBOPACK__imported__module__$5b$project$5d2f$lib$2f$prisma$2e$ts__$5b$app$2d$route$5d$__$28$ecmascript$29$__["prisma"].user.findMany()` invocation in
/home/phuongnam/web/.next/server/chunks/[root-of-the-server]__91c982f1._.js:94:156

  91 ;
  92 async function GET() {
  93     try {
→ 94         const users = await __TURBOPACK__imported__module__$5b$project$5d2f$lib$2f$prisma$2e$ts__$5b$app$2d$route$5d$__$28$ecmascript$29$__["prisma"].user.findMany(
Can't reach database server at `localhost:5433`

Please make sure your database server is running at `localhost:5433`.
 GET /api/users 500 in 244ms
 GET /admin 200 in 119ms
prisma:error 
Invalid `__TURBOPACK__imported__module__$5b$project$5d2f$lib$2f$prisma$2e$ts__$5b$app$2d$route$5d$__$28$ecmascript$29$__["prisma"].event.count()` invocation in
/home/phuongnam/web/.next/server/chunks/[root-of-the-server]__931563d6._.js:93:141

  90 async function GET() {
  91     try {
  92         const [totalEvents, upcomingEvents, totalRegistrations, totalNews, publishedNews, totalContacts, newContacts, totalUsers, activeUsers] = await Promise.all([
→ 93             __TURBOPACK__imported__module__$5b$project$5d2f$lib$2f$prisma$2e$ts__$5b$app$2d$route$5d$__$28$ecmascript$29$__["prisma"].event.count(
Can't reach database server at `localhost:5433`

Please make sure your database server is running at `localhost:5433`.
 GET /api/stats 500 in 357ms
prisma:error 
Invalid `__TURBOPACK__imported__module__$5b$project$5d2f$lib$2f$prisma$2e$ts__$5b$app$2d$route$5d$__$28$ecmascript$29$__["prisma"].event.count()` invocation in
/home/phuongnam/web/.next/server/chunks/[root-of-the-server]__931563d6._.js:94:141

  91 try {
  92     const [totalEvents, upcomingEvents, totalRegistrations, totalNews, publishedNews, totalContacts, newContacts, totalUsers, activeUsers] = await Promise.all([
  93         __TURBOPACK__imported__module__$5b$project$5d2f$lib$2f$prisma$2e$ts__$5b$app$2d$route$5d$__$28$ecmascript$29$__["prisma"].event.count(),
→ 94         __TURBOPACK__imported__module__$5b$project$5d2f$lib$2f$prisma$2e$ts__$5b$app$2d$route$5d$__$28$ecmascript$29$__["prisma"].event.count(
Can't reach database server at `localhost:5433`

Please make sure your database server is running at `localhost:5433`.
prisma:error 
Invalid `__TURBOPACK__imported__module__$5b$project$5d2f$lib$2f$prisma$2e$ts__$5b$app$2d$route$5d$__$28$ecmascript$29$__["prisma"].registration.count()` invocation in
/home/phuongnam/web/.next/server/chunks/[root-of-the-server]__931563d6._.js:99:148

  96         status: 'upcoming'
  97     }
  98 }),
→ 99 __TURBOPACK__imported__module__$5b$project$5d2f$lib$2f$prisma$2e$ts__$5b$app$2d$route$5d$__$28$ecmascript$29$__["prisma"].registration.count(
Can't reach database server at `localhost:5433`

Please make sure your database server is running at `localhost:5433`.
prisma:error 
Invalid `__TURBOPACK__imported__module__$5b$project$5d2f$lib$2f$prisma$2e$ts__$5b$app$2d$route$5d$__$28$ecmascript$29$__["prisma"].news.count()` invocation in
/home/phuongnam/web/.next/server/chunks/[root-of-the-server]__931563d6._.js:106:140

  103         }
  104     }
  105 }),
→ 106 __TURBOPACK__imported__module__$5b$project$5d2f$lib$2f$prisma$2e$ts__$5b$app$2d$route$5d$__$28$ecmascript$29$__["prisma"].news.count(
Can't reach database server at `localhost:5433`

Please make sure your database server is running at `localhost:5433`.
prisma:error 
Invalid `__TURBOPACK__imported__module__$5b$project$5d2f$lib$2f$prisma$2e$ts__$5b$app$2d$route$5d$__$28$ecmascript$29$__["prisma"].news.count()` invocation in
/home/phuongnam/web/.next/server/chunks/[root-of-the-server]__931563d6._.js:107:140

  104     }
  105 }),
  106 __TURBOPACK__imported__module__$5b$project$5d2f$lib$2f$prisma$2e$ts__$5b$app$2d$route$5d$__$28$ecmascript$29$__["prisma"].news.count(),
→ 107 __TURBOPACK__imported__module__$5b$project$5d2f$lib$2f$prisma$2e$ts__$5b$app$2d$route$5d$__$28$ecmascript$29$__["prisma"].news.count(
Can't reach database server at `localhost:5433`

Please make sure your database server is running at `localhost:5433`.
prisma:error 
Invalid `__TURBOPACK__imported__module__$5b$project$5d2f$lib$2f$prisma$2e$ts__$5b$app$2d$route$5d$__$28$ecmascript$29$__["prisma"].contact.count()` invocation in
/home/phuongnam/web/.next/server/chunks/[root-of-the-server]__931563d6._.js:112:143

  109         published: true
  110     }
  111 }),
→ 112 __TURBOPACK__imported__module__$5b$project$5d2f$lib$2f$prisma$2e$ts__$5b$app$2d$route$5d$__$28$ecmascript$29$__["prisma"].contact.count(
Can't reach database server at `localhost:5433`

Please make sure your database server is running at `localhost:5433`.
prisma:error 
Invalid `__TURBOPACK__imported__module__$5b$project$5d2f$lib$2f$prisma$2e$ts__$5b$app$2d$route$5d$__$28$ecmascript$29$__["prisma"].contact.count()` invocation in
/home/phuongnam/web/.next/server/chunks/[root-of-the-server]__931563d6._.js:113:143

  110     }
  111 }),
  112 __TURBOPACK__imported__module__$5b$project$5d2f$lib$2f$prisma$2e$ts__$5b$app$2d$route$5d$__$28$ecmascript$29$__["prisma"].contact.count(),
→ 113 __TURBOPACK__imported__module__$5b$project$5d2f$lib$2f$prisma$2e$ts__$5b$app$2d$route$5d$__$28$ecmascript$29$__["prisma"].contact.count(
Can't reach database server at `localhost:5433`

Please make sure your database server is running at `localhost:5433`.
prisma:error 
Invalid `__TURBOPACK__imported__module__$5b$project$5d2f$lib$2f$prisma$2e$ts__$5b$app$2d$route$5d$__$28$ecmascript$29$__["prisma"].user.count()` invocation in
/home/phuongnam/web/.next/server/chunks/[root-of-the-server]__931563d6._.js:118:140

  115         status: 'new'
  116     }
  117 }),
→ 118 __TURBOPACK__imported__module__$5b$project$5d2f$lib$2f$prisma$2e$ts__$5b$app$2d$route$5d$__$28$ecmascript$29$__["prisma"].user.count(
Can't reach database server at `localhost:5433`

Please make sure your database server is running at `localhost:5433`.
prisma:error 
Invalid `__TURBOPACK__imported__module__$5b$project$5d2f$lib$2f$prisma$2e$ts__$5b$app$2d$route$5d$__$28$ecmascript$29$__["prisma"].user.count()` invocation in
/home/phuongnam/web/.next/server/chunks/[root-of-the-server]__931563d6._.js:119:140

  116     }
  117 }),
  118 __TURBOPACK__imported__module__$5b$project$5d2f$lib$2f$prisma$2e$ts__$5b$app$2d$route$5d$__$28$ecmascript$29$__["prisma"].user.count(),
→ 119 __TURBOPACK__imported__module__$5b$project$5d2f$lib$2f$prisma$2e$ts__$5b$app$2d$route$5d$__$28$ecmascript$29$__["prisma"].user.count(
Can't reach database server at `localhost:5433`

Please make sure your database server is running at `localhost:5433`.
prisma:error 
Invalid `__TURBOPACK__imported__module__$5b$project$5d2f$lib$2f$prisma$2e$ts__$5b$app$2d$route$5d$__$28$ecmascript$29$__["prisma"].event.findMany()` invocation in
/home/phuongnam/web/.next/server/chunks/[root-of-the-server]__e2e46c1a._.js:94:158

  91 ;
  92 async function GET() {
  93     try {
→ 94         const events = await __TURBOPACK__imported__module__$5b$project$5d2f$lib$2f$prisma$2e$ts__$5b$app$2d$route$5d$__$28$ecmascript$29$__["prisma"].event.findMany(
Can't reach database server at `localhost:5433`

Please make sure your database server is running at `localhost:5433`.
Error fetching events: Error [PrismaClientKnownRequestError]: 
Invalid `__TURBOPACK__imported__module__$5b$project$5d2f$lib$2f$prisma$2e$ts__$5b$app$2d$route$5d$__$28$ecmascript$29$__["prisma"].event.findMany()` invocation in
/home/phuongnam/web/.next/server/chunks/[root-of-the-server]__e2e46c1a._.js:94:158

  91 ;
  92 async function GET() {
  93     try {
→ 94         const events = await __TURBOPACK__imported__module__$5b$project$5d2f$lib$2f$prisma$2e$ts__$5b$app$2d$route$5d$__$28$ecmascript$29$__["prisma"].event.findMany(
Can't reach database server at `localhost:5433`

Please make sure your database server is running at `localhost:5433`.
    at <unknown> (app/api/events/route.ts:6:39)
    at async GET (app/api/events/route.ts:6:20)
  4 | export async function GET() {
  5 |   try {
> 6 |     const events = await prisma.event.findMany({
    |                                       ^
  7 |       include: {
  8 |         registrations: {
  9 |           where: { status: { not: 'cancelled' } }, {
  code: 'P1001',
  clientVersion: '5.22.0',
  meta: [Object]
}
 GET /api/events 500 in 450ms
prisma:error 
Invalid `__TURBOPACK__imported__module__$5b$project$5d2f$lib$2f$prisma$2e$ts__$5b$app$2d$route$5d$__$28$ecmascript$29$__["prisma"].news.findMany()` invocation in
/home/phuongnam/web/.next/server/chunks/[root-of-the-server]__fa9661e9._.js:94:156

  91 ;
  92 async function GET() {
  93     try {
→ 94         const items = await __TURBOPACK__imported__module__$5b$project$5d2f$lib$2f$prisma$2e$ts__$5b$app$2d$route$5d$__$28$ecmascript$29$__["prisma"].news.findMany(
Can't reach database server at `localhost:5433`

Please make sure your database server is running at `localhost:5433`.
 GET /api/news 500 in 454ms
prisma:error 
Invalid `__TURBOPACK__imported__module__$5b$project$5d2f$lib$2f$prisma$2e$ts__$5b$app$2d$route$5d$__$28$ecmascript$29$__["prisma"].contact.findMany()` invocation in
/home/phuongnam/web/.next/server/chunks/[root-of-the-server]__38d73ffd._.js:94:162

  91 ;
  92 async function GET() {
  93     try {
→ 94         const contacts = await __TURBOPACK__imported__module__$5b$project$5d2f$lib$2f$prisma$2e$ts__$5b$app$2d$route$5d$__$28$ecmascript$29$__["prisma"].contact.findMany(
Can't reach database server at `localhost:5433`

Please make sure your database server is running at `localhost:5433`.
 GET /api/contacts 500 in 457ms
 GET /favicon.ico?favicon.0b3bf435.ico 200 in 394ms
prisma:error 
Invalid `__TURBOPACK__imported__module__$5b$project$5d2f$lib$2f$prisma$2e$ts__$5b$app$2d$route$5d$__$28$ecmascript$29$__["prisma"].event.count()` invocation in
/home/phuongnam/web/.next/server/chunks/[root-of-the-server]__931563d6._.js:93:141

  90 async function GET() {
  91     try {
  92         const [totalEvents, upcomingEvents, totalRegistrations, totalNews, publishedNews, totalContacts, newContacts, totalUsers, activeUsers] = await Promise.all([
→ 93             __TURBOPACK__imported__module__$5b$project$5d2f$lib$2f$prisma$2e$ts__$5b$app$2d$route$5d$__$28$ecmascript$29$__["prisma"].event.count(
Can't reach database server at `localhost:5433`

Please make sure your database server is running at `localhost:5433`.
 GET /api/stats 500 in 285ms
prisma:error 
Invalid `__TURBOPACK__imported__module__$5b$project$5d2f$lib$2f$prisma$2e$ts__$5b$app$2d$route$5d$__$28$ecmascript$29$__["prisma"].event.count()` invocation in
/home/phuongnam/web/.next/server/chunks/[root-of-the-server]__931563d6._.js:94:141

  91 try {
  92     const [totalEvents, upcomingEvents, totalRegistrations, totalNews, publishedNews, totalContacts, newContacts, totalUsers, activeUsers] = await Promise.all([
  93         __TURBOPACK__imported__module__$5b$project$5d2f$lib$2f$prisma$2e$ts__$5b$app$2d$route$5d$__$28$ecmascript$29$__["prisma"].event.count(),
→ 94         __TURBOPACK__imported__module__$5b$project$5d2f$lib$2f$prisma$2e$ts__$5b$app$2d$route$5d$__$28$ecmascript$29$__["prisma"].event.count(
Can't reach database server at `localhost:5433`

Please make sure your database server is running at `localhost:5433`.
prisma:error 
Invalid `__TURBOPACK__imported__module__$5b$project$5d2f$lib$2f$prisma$2e$ts__$5b$app$2d$route$5d$__$28$ecmascript$29$__["prisma"].registration.count()` invocation in
/home/phuongnam/web/.next/server/chunks/[root-of-the-server]__931563d6._.js:99:148

  96         status: 'upcoming'
  97     }
  98 }),
→ 99 __TURBOPACK__imported__module__$5b$project$5d2f$lib$2f$prisma$2e$ts__$5b$app$2d$route$5d$__$28$ecmascript$29$__["prisma"].registration.count(
Can't reach database server at `localhost:5433`

Please make sure your database server is running at `localhost:5433`.
prisma:error 
Invalid `__TURBOPACK__imported__module__$5b$project$5d2f$lib$2f$prisma$2e$ts__$5b$app$2d$route$5d$__$28$ecmascript$29$__["prisma"].news.count()` invocation in
/home/phuongnam/web/.next/server/chunks/[root-of-the-server]__931563d6._.js:106:140

  103         }
  104     }
  105 }),
→ 106 __TURBOPACK__imported__module__$5b$project$5d2f$lib$2f$prisma$2e$ts__$5b$app$2d$route$5d$__$28$ecmascript$29$__["prisma"].news.count(
Can't reach database server at `localhost:5433`

Please make sure your database server is running at `localhost:5433`.
prisma:error 
Invalid `__TURBOPACK__imported__module__$5b$project$5d2f$lib$2f$prisma$2e$ts__$5b$app$2d$route$5d$__$28$ecmascript$29$__["prisma"].news.count()` invocation in
/home/phuongnam/web/.next/server/chunks/[root-of-the-server]__931563d6._.js:107:140

  104     }
  105 }),
  106 __TURBOPACK__imported__module__$5b$project$5d2f$lib$2f$prisma$2e$ts__$5b$app$2d$route$5d$__$28$ecmascript$29$__["prisma"].news.count(),
→ 107 __TURBOPACK__imported__module__$5b$project$5d2f$lib$2f$prisma$2e$ts__$5b$app$2d$route$5d$__$28$ecmascript$29$__["prisma"].news.count(
Can't reach database server at `localhost:5433`

Please make sure your database server is running at `localhost:5433`.
prisma:error 
Invalid `__TURBOPACK__imported__module__$5b$project$5d2f$lib$2f$prisma$2e$ts__$5b$app$2d$route$5d$__$28$ecmascript$29$__["prisma"].contact.count()` invocation in
/home/phuongnam/web/.next/server/chunks/[root-of-the-server]__931563d6._.js:112:143

  109         published: true
  110     }
  111 }),
→ 112 __TURBOPACK__imported__module__$5b$project$5d2f$lib$2f$prisma$2e$ts__$5b$app$2d$route$5d$__$28$ecmascript$29$__["prisma"].contact.count(
Can't reach database server at `localhost:5433`

Please make sure your database server is running at `localhost:5433`.
prisma:error 
Invalid `__TURBOPACK__imported__module__$5b$project$5d2f$lib$2f$prisma$2e$ts__$5b$app$2d$route$5d$__$28$ecmascript$29$__["prisma"].contact.count()` invocation in
/home/phuongnam/web/.next/server/chunks/[root-of-the-server]__931563d6._.js:113:143

  110     }
  111 }),
  112 __TURBOPACK__imported__module__$5b$project$5d2f$lib$2f$prisma$2e$ts__$5b$app$2d$route$5d$__$28$ecmascript$29$__["prisma"].contact.count(),
→ 113 __TURBOPACK__imported__module__$5b$project$5d2f$lib$2f$prisma$2e$ts__$5b$app$2d$route$5d$__$28$ecmascript$29$__["prisma"].contact.count(
Can't reach database server at `localhost:5433`

Please make sure your database server is running at `localhost:5433`.
prisma:error 
Invalid `__TURBOPACK__imported__module__$5b$project$5d2f$lib$2f$prisma$2e$ts__$5b$app$2d$route$5d$__$28$ecmascript$29$__["prisma"].user.count()` invocation in
/home/phuongnam/web/.next/server/chunks/[root-of-the-server]__931563d6._.js:118:140

  115         status: 'new'
  116     }
  117 }),
→ 118 __TURBOPACK__imported__module__$5b$project$5d2f$lib$2f$prisma$2e$ts__$5b$app$2d$route$5d$__$28$ecmascript$29$__["prisma"].user.count(
Can't reach database server at `localhost:5433`

Please make sure your database server is running at `localhost:5433`.
prisma:error 
Invalid `__TURBOPACK__imported__module__$5b$project$5d2f$lib$2f$prisma$2e$ts__$5b$app$2d$route$5d$__$28$ecmascript$29$__["prisma"].user.count()` invocation in
/home/phuongnam/web/.next/server/chunks/[root-of-the-server]__931563d6._.js:119:140

  116     }
  117 }),
  118 __TURBOPACK__imported__module__$5b$project$5d2f$lib$2f$prisma$2e$ts__$5b$app$2d$route$5d$__$28$ecmascript$29$__["prisma"].user.count(),
→ 119 __TURBOPACK__imported__module__$5b$project$5d2f$lib$2f$prisma$2e$ts__$5b$app$2d$route$5d$__$28$ecmascript$29$__["prisma"].user.count(
Can't reach database server at `localhost:5433`

Please make sure your database server is running at `localhost:5433`.
prisma:error 
Invalid `__TURBOPACK__imported__module__$5b$project$5d2f$lib$2f$prisma$2e$ts__$5b$app$2d$route$5d$__$28$ecmascript$29$__["prisma"].event.findMany()` invocation in
/home/phuongnam/web/.next/server/chunks/[root-of-the-server]__e2e46c1a._.js:94:158

  91 ;
  92 async function GET() {
  93     try {
→ 94         const events = await __TURBOPACK__imported__module__$5b$project$5d2f$lib$2f$prisma$2e$ts__$5b$app$2d$route$5d$__$28$ecmascript$29$__["prisma"].event.findMany(
Can't reach database server at `localhost:5433`

Please make sure your database server is running at `localhost:5433`.
Error fetching events: Error [PrismaClientKnownRequestError]: 
Invalid `__TURBOPACK__imported__module__$5b$project$5d2f$lib$2f$prisma$2e$ts__$5b$app$2d$route$5d$__$28$ecmascript$29$__["prisma"].event.findMany()` invocation in
/home/phuongnam/web/.next/server/chunks/[root-of-the-server]__e2e46c1a._.js:94:158

  91 ;
  92 async function GET() {
  93     try {
→ 94         const events = await __TURBOPACK__imported__module__$5b$project$5d2f$lib$2f$prisma$2e$ts__$5b$app$2d$route$5d$__$28$ecmascript$29$__["prisma"].event.findMany(
Can't reach database server at `localhost:5433`

Please make sure your database server is running at `localhost:5433`.
    at <unknown> (app/api/events/route.ts:6:39)
    at async GET (app/api/events/route.ts:6:20)
  4 | export async function GET() {
  5 |   try {
> 6 |     const events = await prisma.event.findMany({
    |                                       ^
  7 |       include: {
  8 |         registrations: {
  9 |           where: { status: { not: 'cancelled' } }, {
  code: 'P1001',
  clientVersion: '5.22.0',
  meta: [Object]
}
 GET /api/events 500 in 354ms
prisma:error 
Invalid `__TURBOPACK__imported__module__$5b$project$5d2f$lib$2f$prisma$2e$ts__$5b$app$2d$route$5d$__$28$ecmascript$29$__["prisma"].news.findMany()` invocation in
/home/phuongnam/web/.next/server/chunks/[root-of-the-server]__fa9661e9._.js:94:156

  91 ;
  92 async function GET() {
  93     try {
→ 94         const items = await __TURBOPACK__imported__module__$5b$project$5d2f$lib$2f$prisma$2e$ts__$5b$app$2d$route$5d$__$28$ecmascript$29$__["prisma"].news.findMany(
Can't reach database server at `localhost:5433`

Please make sure your database server is running at `localhost:5433`.
 GET /api/news 500 in 356ms
prisma:error 
Invalid `__TURBOPACK__imported__module__$5b$project$5d2f$lib$2f$prisma$2e$ts__$5b$app$2d$route$5d$__$28$ecmascript$29$__["prisma"].contact.findMany()` invocation in
/home/phuongnam/web/.next/server/chunks/[root-of-the-server]__38d73ffd._.js:94:162

  91 ;
  92 async function GET() {
  93     try {
→ 94         const contacts = await __TURBOPACK__imported__module__$5b$project$5d2f$lib$2f$prisma$2e$ts__$5b$app$2d$route$5d$__$28$ecmascript$29$__["prisma"].contact.findMany(
Can't reach database server at `localhost:5433`

Please make sure your database server is running at `localhost:5433`.
 GET /api/contacts 500 in 362ms
prisma:error 
Invalid `__TURBOPACK__imported__module__$5b$project$5d2f$lib$2f$prisma$2e$ts__$5b$app$2d$route$5d$__$28$ecmascript$29$__["prisma"].user.findMany()` invocation in
/home/phuongnam/web/.next/server/chunks/[root-of-the-server]__91c982f1._.js:94:156

  91 ;
  92 async function GET() {
  93     try {
→ 94         const users = await __TURBOPACK__imported__module__$5b$project$5d2f$lib$2f$prisma$2e$ts__$5b$app$2d$route$5d$__$28$ecmascript$29$__["prisma"].user.findMany(
Can't reach database server at `localhost:5433`

Please make sure your database server is running at `localhost:5433`.
 GET /api/users 500 in 254ms
prisma:error 
Invalid `__TURBOPACK__imported__module__$5b$project$5d2f$lib$2f$prisma$2e$ts__$5b$app$2d$route$5d$__$28$ecmascript$29$__["prisma"].user.findMany()` invocation in
/home/phuongnam/web/.next/server/chunks/[root-of-the-server]__91c982f1._.js:94:156

  91 ;
  92 async function GET() {
  93     try {
→ 94         const users = await __TURBOPACK__imported__module__$5b$project$5d2f$lib$2f$prisma$2e$ts__$5b$app$2d$route$5d$__$28$ecmascript$29$__["prisma"].user.findMany(
Can't reach database server at `localhost:5433`

Please make sure your database server is running at `localhost:5433`.
 GET /api/users 500 in 247ms
prisma:error 
Invalid `__TURBOPACK__imported__module__$5b$project$5d2f$lib$2f$prisma$2e$ts__$5b$app$2d$route$5d$__$28$ecmascript$29$__["prisma"].registration.findMany()` invocation in
/home/phuongnam/web/.next/server/chunks/[root-of-the-server]__aa09fb8c._.js:94:172

  91 ;
  92 async function GET() {
  93     try {
→ 94         const registrations = await __TURBOPACK__imported__module__$5b$project$5d2f$lib$2f$prisma$2e$ts__$5b$app$2d$route$5d$__$28$ecmascript$29$__["prisma"].registration.findMany(
Can't reach database server at `localhost:5433`

Please make sure your database server is running at `localhost:5433`.
Error fetching registrations: Error [PrismaClientKnownRequestError]: 
Invalid `__TURBOPACK__imported__module__$5b$project$5d2f$lib$2f$prisma$2e$ts__$5b$app$2d$route$5d$__$28$ecmascript$29$__["prisma"].registration.findMany()` invocation in
/home/phuongnam/web/.next/server/chunks/[root-of-the-server]__aa09fb8c._.js:94:172

  91 ;
  92 async function GET() {
  93     try {
→ 94         const registrations = await __TURBOPACK__imported__module__$5b$project$5d2f$lib$2f$prisma$2e$ts__$5b$app$2d$route$5d$__$28$ecmascript$29$__["prisma"].registration.findMany(
Can't reach database server at `localhost:5433`

Please make sure your database server is running at `localhost:5433`.
    at <unknown> (app/api/registrations/route.ts:6:53)
    at async GET (app/api/registrations/route.ts:6:27)
  4 | export async function GET() {
  5 |   try {
> 6 |     const registrations = await prisma.registration.findMany({ orderBy: { createdAt: 'desc' } });
    |                                                     ^
  7 |     return NextResponse.json({ success: true, data: registrations });
  8 |   } catch (error) {
  9 |     console.error('Error fetching registrations:', error); {
  code: 'P1001',
  clientVersion: '5.22.0',
  meta: [Object]
}
 GET /api/registrations 500 in 323ms
prisma:error 
Invalid `__TURBOPACK__imported__module__$5b$project$5d2f$lib$2f$prisma$2e$ts__$5b$app$2d$route$5d$__$28$ecmascript$29$__["prisma"].event.findMany()` invocation in
/home/phuongnam/web/.next/server/chunks/[root-of-the-server]__e2e46c1a._.js:94:158

  91 ;
  92 async function GET() {
  93     try {
→ 94         const events = await __TURBOPACK__imported__module__$5b$project$5d2f$lib$2f$prisma$2e$ts__$5b$app$2d$route$5d$__$28$ecmascript$29$__["prisma"].event.findMany(
Can't reach database server at `localhost:5433`

Please make sure your database server is running at `localhost:5433`.
Error fetching events: Error [PrismaClientKnownRequestError]: 
Invalid `__TURBOPACK__imported__module__$5b$project$5d2f$lib$2f$prisma$2e$ts__$5b$app$2d$route$5d$__$28$ecmascript$29$__["prisma"].event.findMany()` invocation in
/home/phuongnam/web/.next/server/chunks/[root-of-the-server]__e2e46c1a._.js:94:158

  91 ;
  92 async function GET() {
  93     try {
→ 94         const events = await __TURBOPACK__imported__module__$5b$project$5d2f$lib$2f$prisma$2e$ts__$5b$app$2d$route$5d$__$28$ecmascript$29$__["prisma"].event.findMany(
Can't reach database server at `localhost:5433`

Please make sure your database server is running at `localhost:5433`.
    at <unknown> (app/api/events/route.ts:6:39)
    at async GET (app/api/events/route.ts:6:20)
  4 | export async function GET() {
  5 |   try {
> 6 |     const events = await prisma.event.findMany({
    |                                       ^
  7 |       include: {
  8 |         registrations: {
  9 |           where: { status: { not: 'cancelled' } }, {
  code: 'P1001',
  clientVersion: '5.22.0',
  meta: [Object]
}
 GET /api/events 500 in 384ms
prisma:error 
Invalid `__TURBOPACK__imported__module__$5b$project$5d2f$lib$2f$prisma$2e$ts__$5b$app$2d$route$5d$__$28$ecmascript$29$__["prisma"].registration.findMany()` invocation in
/home/phuongnam/web/.next/server/chunks/[root-of-the-server]__aa09fb8c._.js:94:172

  91 ;
  92 async function GET() {
  93     try {
→ 94         const registrations = await __TURBOPACK__imported__module__$5b$project$5d2f$lib$2f$prisma$2e$ts__$5b$app$2d$route$5d$__$28$ecmascript$29$__["prisma"].registration.findMany(
Can't reach database server at `localhost:5433`

Please make sure your database server is running at `localhost:5433`.
Error fetching registrations: Error [PrismaClientKnownRequestError]: 
Invalid `__TURBOPACK__imported__module__$5b$project$5d2f$lib$2f$prisma$2e$ts__$5b$app$2d$route$5d$__$28$ecmascript$29$__["prisma"].registration.findMany()` invocation in
/home/phuongnam/web/.next/server/chunks/[root-of-the-server]__aa09fb8c._.js:94:172

  91 ;
  92 async function GET() {
  93     try {
→ 94         const registrations = await __TURBOPACK__imported__module__$5b$project$5d2f$lib$2f$prisma$2e$ts__$5b$app$2d$route$5d$__$28$ecmascript$29$__["prisma"].registration.findMany(
Can't reach database server at `localhost:5433`

Please make sure your database server is running at `localhost:5433`.
    at <unknown> (app/api/registrations/route.ts:6:53)
    at async GET (app/api/registrations/route.ts:6:27)
  4 | export async function GET() {
  5 |   try {
> 6 |     const registrations = await prisma.registration.findMany({ orderBy: { createdAt: 'desc' } });
    |                                                     ^
  7 |     return NextResponse.json({ success: true, data: registrations });
  8 |   } catch (error) {
  9 |     console.error('Error fetching registrations:', error); {
  code: 'P1001',
  clientVersion: '5.22.0',
  meta: [Object]
}
 GET /api/registrations 500 in 315ms
prisma:error 
Invalid `__TURBOPACK__imported__module__$5b$project$5d2f$lib$2f$prisma$2e$ts__$5b$app$2d$route$5d$__$28$ecmascript$29$__["prisma"].event.findMany()` invocation in
/home/phuongnam/web/.next/server/chunks/[root-of-the-server]__e2e46c1a._.js:94:158

  91 ;
  92 async function GET() {
  93     try {
→ 94         const events = await __TURBOPACK__imported__module__$5b$project$5d2f$lib$2f$prisma$2e$ts__$5b$app$2d$route$5d$__$28$ecmascript$29$__["prisma"].event.findMany(
Can't reach database server at `localhost:5433`

Please make sure your database server is running at `localhost:5433`.
Error fetching events: Error [PrismaClientKnownRequestError]: 
Invalid `__TURBOPACK__imported__module__$5b$project$5d2f$lib$2f$prisma$2e$ts__$5b$app$2d$route$5d$__$28$ecmascript$29$__["prisma"].event.findMany()` invocation in
/home/phuongnam/web/.next/server/chunks/[root-of-the-server]__e2e46c1a._.js:94:158

  91 ;
  92 async function GET() {
  93     try {
→ 94         const events = await __TURBOPACK__imported__module__$5b$project$5d2f$lib$2f$prisma$2e$ts__$5b$app$2d$route$5d$__$28$ecmascript$29$__["prisma"].event.findMany(
Can't reach database server at `localhost:5433`

Please make sure your database server is running at `localhost:5433`.
    at <unknown> (app/api/events/route.ts:6:39)
    at async GET (app/api/events/route.ts:6:20)
  4 | export async function GET() {
  5 |   try {
> 6 |     const events = await prisma.event.findMany({
    |                                       ^
  7 |       include: {
  8 |         registrations: {
  9 |           where: { status: { not: 'cancelled' } }, {
  code: 'P1001',
  clientVersion: '5.22.0',
  meta: [Object]
}
 GET /api/events 500 in 384ms
prisma:error 
Invalid `__TURBOPACK__imported__module__$5b$project$5d2f$lib$2f$prisma$2e$ts__$5b$app$2d$route$5d$__$28$ecmascript$29$__["prisma"].event.findMany()` invocation in
/home/phuongnam/web/.next/server/chunks/[root-of-the-server]__e2e46c1a._.js:94:158

  91 ;
  92 async function GET() {
  93     try {
→ 94         const events = await __TURBOPACK__imported__module__$5b$project$5d2f$lib$2f$prisma$2e$ts__$5b$app$2d$route$5d$__$28$ecmascript$29$__["prisma"].event.findMany(
Can't reach database server at `localhost:5433`

Please make sure your database server is running at `localhost:5433`.
Error fetching events: Error [PrismaClientKnownRequestError]: 
Invalid `__TURBOPACK__imported__module__$5b$project$5d2f$lib$2f$prisma$2e$ts__$5b$app$2d$route$5d$__$28$ecmascript$29$__["prisma"].event.findMany()` invocation in
/home/phuongnam/web/.next/server/chunks/[root-of-the-server]__e2e46c1a._.js:94:158

  91 ;
  92 async function GET() {
  93     try {
→ 94         const events = await __TURBOPACK__imported__module__$5b$project$5d2f$lib$2f$prisma$2e$ts__$5b$app$2d$route$5d$__$28$ecmascript$29$__["prisma"].event.findMany(
Can't reach database server at `localhost:5433`

Please make sure your database server is running at `localhost:5433`.
    at <unknown> (app/api/events/route.ts:6:39)
    at async GET (app/api/events/route.ts:6:20)
  4 | export async function GET() {
  5 |   try {
> 6 |     const events = await prisma.event.findMany({
    |                                       ^
  7 |       include: {
  8 |         registrations: {
  9 |           where: { status: { not: 'cancelled' } }, {
  code: 'P1001',
  clientVersion: '5.22.0',
  meta: [Object]
}
 GET /api/events 500 in 339ms
prisma:error 
Invalid `__TURBOPACK__imported__module__$5b$project$5d2f$lib$2f$prisma$2e$ts__$5b$app$2d$route$5d$__$28$ecmascript$29$__["prisma"].event.findMany()` invocation in
/home/phuongnam/web/.next/server/chunks/[root-of-the-server]__e2e46c1a._.js:94:158

  91 ;
  92 async function GET() {
  93     try {
→ 94         const events = await __TURBOPACK__imported__module__$5b$project$5d2f$lib$2f$prisma$2e$ts__$5b$app$2d$route$5d$__$28$ecmascript$29$__["prisma"].event.findMany(
Can't reach database server at `localhost:5433`

Please make sure your database server is running at `localhost:5433`.
Error fetching events: Error [PrismaClientKnownRequestError]: 
Invalid `__TURBOPACK__imported__module__$5b$project$5d2f$lib$2f$prisma$2e$ts__$5b$app$2d$route$5d$__$28$ecmascript$29$__["prisma"].event.findMany()` invocation in
/home/phuongnam/web/.next/server/chunks/[root-of-the-server]__e2e46c1a._.js:94:158

  91 ;
  92 async function GET() {
  93     try {
→ 94         const events = await __TURBOPACK__imported__module__$5b$project$5d2f$lib$2f$prisma$2e$ts__$5b$app$2d$route$5d$__$28$ecmascript$29$__["prisma"].event.findMany(
Can't reach database server at `localhost:5433`

Please make sure your database server is running at `localhost:5433`.
    at <unknown> (app/api/events/route.ts:6:39)
    at async GET (app/api/events/route.ts:6:20)
  4 | export async function GET() {
  5 |   try {
> 6 |     const events = await prisma.event.findMany({
    |                                       ^
  7 |       include: {
  8 |         registrations: {
  9 |           where: { status: { not: 'cancelled' } }, {
  code: 'P1001',
  clientVersion: '5.22.0',
  meta: [Object]
}
 GET /api/events 500 in 286ms
 POST /api/upload 200 in 303ms
prisma:error 
Invalid `__TURBOPACK__imported__module__$5b$project$5d2f$lib$2f$prisma$2e$ts__$5b$app$2d$route$5d$__$28$ecmascript$29$__["prisma"].event.create()` invocation in
/home/phuongnam/web/.next/server/chunks/[root-of-the-server]__e2e46c1a._.js:154:159

  151 const actualParticipantsVal = body.actualParticipants !== undefined && Number.isFinite(Number(body.actualParticipants)) ? Number(body.actualParticipants) : null;
  152 // Sanitize arrays
  153 const speakersVal = Array.isArray(body.speakers) ? body.speakers.map((s)=>String(s)).filter((s)=>s.trim().length > 0) : typeof body.speakers === 'string' ? String(body.speakers).split(',').map((s)=>s.trim()).filter((s)=>s.length > 0) : [];
→ 154 const created = await __TURBOPACK__imported__module__$5b$project$5d2f$lib$2f$prisma$2e$ts__$5b$app$2d$route$5d$__$28$ecmascript$29$__["prisma"].event.create(
Can't reach database server at `localhost:5433`

Please make sure your database server is running at `localhost:5433`.
Error creating event: Error [PrismaClientKnownRequestError]: 
Invalid `__TURBOPACK__imported__module__$5b$project$5d2f$lib$2f$prisma$2e$ts__$5b$app$2d$route$5d$__$28$ecmascript$29$__["prisma"].event.create()` invocation in
/home/phuongnam/web/.next/server/chunks/[root-of-the-server]__e2e46c1a._.js:154:159

  151 const actualParticipantsVal = body.actualParticipants !== undefined && Number.isFinite(Number(body.actualParticipants)) ? Number(body.actualParticipants) : null;
  152 // Sanitize arrays
  153 const speakersVal = Array.isArray(body.speakers) ? body.speakers.map((s)=>String(s)).filter((s)=>s.trim().length > 0) : typeof body.speakers === 'string' ? String(body.speakers).split(',').map((s)=>s.trim()).filter((s)=>s.length > 0) : [];
→ 154 const created = await __TURBOPACK__imported__module__$5b$project$5d2f$lib$2f$prisma$2e$ts__$5b$app$2d$route$5d$__$28$ecmascript$29$__["prisma"].event.create(
Can't reach database server at `localhost:5433`

Please make sure your database server is running at `localhost:5433`.
    at <unknown> (app/api/events/route.ts:65:40)
    at async POST (app/api/events/route.ts:65:21)
  63 |         : [];
  64 |
> 65 |     const created = await prisma.event.create({
     |                                        ^
  66 |       data: {
  67 |         // If no id provided, use a timestamp string to remain compatible with legacy numeric parsing
  68 |         id: String(body.id || Date.now().toString()), {
  code: 'P1001',
  clientVersion: '5.22.0',
  meta: [Object]
}
 POST /api/events 500 in 339ms
