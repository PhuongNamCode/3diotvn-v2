#!/bin/bash

# 3DIoT Comprehensive Test Script
# Test to√†n di·ªán c√°c ch·ª©c nƒÉng ch√≠nh

BASE_URL="http://localhost:3000"
EMAIL="chinhphucvatly@gmail.com"
YOUTUBE_VIDEO="https://www.youtube.com/watch?v=LpUWKnEguB0&t"

echo "üöÄ 3DIoT Comprehensive Test"
echo "==========================="

# Ki·ªÉm tra server
echo "üîç Checking server..."
if ! curl -s -f "$BASE_URL" > /dev/null; then
    echo "‚ùå Server not running. Start with: ./start.sh"
    exit 1
fi
echo "‚úÖ Server is running!"

echo ""
echo "üìã Choose test:"
echo "1. Events only (4 events: future, past, paid, free)"
echo "2. Courses only (2 courses: YouTube type, online link type)"
echo "3. Contact + News (support contact + news testing)"
echo ""

read -p "Choose (1-3): " choice

case $choice in
    1)
        echo "üìÖ Testing Events Only..."
        echo "Creating 4 different events..."
        
        # 1. Event t∆∞∆°ng lai - mi·ªÖn ph√≠
        echo "üÜì Creating future free event..."
        FUTURE_FREE=$(curl -s -X POST "$BASE_URL/api/events" \
          -H "Content-Type: application/json" \
          -d '{
            "title": "Workshop 3D IoT T∆∞∆°ng Lai - Mi·ªÖn Ph√≠",
            "description": "S·ª± ki·ªán workshop v·ªÅ 3D IoT s·∫Ω di·ªÖn ra trong t∆∞∆°ng lai, ho√†n to√†n mi·ªÖn ph√≠",
            "date": "2026-03-15T18:00:00.000Z",
            "time": "18:00",
            "location": "Online - Zoom Meeting",
            "capacity": 100,
            "price": 0,
            "category": "workshop",
            "status": "active"
          }')
        
        FUTURE_FREE_ID=$(echo $FUTURE_FREE | jq -r '.data.id' 2>/dev/null || echo "failed")
        echo "‚úÖ Future free event: $FUTURE_FREE_ID"
        
        # 2. Event t∆∞∆°ng lai - c√≥ ph√≠
        echo "üí∞ Creating future paid event..."
        FUTURE_PAID=$(curl -s -X POST "$BASE_URL/api/events" \
          -H "Content-Type: application/json" \
          -d '{
            "title": "Kh√≥a h·ªçc 3D IoT Premium - C√≥ Ph√≠",
            "description": "Kh√≥a h·ªçc 3D IoT cao c·∫•p v·ªõi ch·ª©ng ch·ªâ, c√≥ ph√≠ tham gia",
            "date": "2026-04-20T09:00:00.000Z",
            "time": "09:00",
            "location": "Trung t√¢m H·ªôi ngh·ªã TP.HCM",
            "capacity": 50,
            "price": 500000,
            "category": "training",
            "status": "active"
          }')
        
        FUTURE_PAID_ID=$(echo $FUTURE_PAID | jq -r '.data.id' 2>/dev/null || echo "failed")
        echo "‚úÖ Future paid event: $FUTURE_PAID_ID"
        
        # 3. Event qu√° kh·ª© - mi·ªÖn ph√≠
        echo "üìÖ Creating past free event..."
        PAST_FREE=$(curl -s -X POST "$BASE_URL/api/events" \
          -H "Content-Type: application/json" \
          -d '{
            "title": "H·ªôi th·∫£o 3D IoT Qu√° Kh·ª© - Mi·ªÖn Ph√≠",
            "description": "H·ªôi th·∫£o 3D IoT ƒë√£ di·ªÖn ra trong qu√° kh·ª©, ho√†n to√†n mi·ªÖn ph√≠",
            "date": "2024-12-15T14:00:00.000Z",
            "time": "14:00",
            "location": "Online - Microsoft Teams",
            "capacity": 200,
            "price": 0,
            "category": "seminar",
            "status": "completed"
          }')
        
        PAST_FREE_ID=$(echo $PAST_FREE | jq -r '.data.id' 2>/dev/null || echo "failed")
        echo "‚úÖ Past free event: $PAST_FREE_ID"
        
        # 4. Event qu√° kh·ª© - c√≥ ph√≠
        echo "üí∏ Creating past paid event..."
        PAST_PAID=$(curl -s -X POST "$BASE_URL/api/events" \
          -H "Content-Type: application/json" \
          -d '{
            "title": "Kh√≥a ƒë√†o t·∫°o 3D IoT Qu√° Kh·ª© - C√≥ Ph√≠",
            "description": "Kh√≥a ƒë√†o t·∫°o 3D IoT ƒë√£ ho√†n th√†nh, c√≥ ph√≠ tham gia",
            "date": "2024-11-10T10:00:00.000Z",
            "time": "10:00",
            "location": "Vi·ªán C√¥ng ngh·ªá TP.HCM",
            "capacity": 30,
            "price": 750000,
            "category": "training",
            "status": "completed"
          }')
        
        PAST_PAID_ID=$(echo $PAST_PAID | jq -r '.data.id' 2>/dev/null || echo "failed")
        echo "‚úÖ Past paid event: $PAST_PAID_ID"
        
        # ƒêƒÉng k√Ω cho event t∆∞∆°ng lai mi·ªÖn ph√≠
        if [ "$FUTURE_FREE_ID" != "failed" ] && [ "$FUTURE_FREE_ID" != "null" ]; then
            echo "üé´ Registering for future free event..."
            REG_RESPONSE=$(curl -s -X POST "$BASE_URL/api/registrations" \
              -H "Content-Type: application/json" \
              -d "{
                \"eventId\": \"$FUTURE_FREE_ID\",
                \"email\": \"$EMAIL\",
                \"name\": \"Nguy·ªÖn VƒÉn Test\",
                \"phone\": \"0123456789\",
                \"company\": \"C√¥ng ty Test\",
                \"position\": \"Developer\",
                \"experience\": \"2 nƒÉm\",
                \"expectations\": \"H·ªçc h·ªèi v·ªÅ 3D IoT\"
              }")
            
            REG_ID=$(echo $REG_RESPONSE | jq -r '.data.id' 2>/dev/null || echo "failed")
            echo "‚úÖ Registration created: $REG_ID"
        fi
        ;;

    2)
        echo "üìö Testing Courses Only..."
        echo "Creating 2 different courses..."
        
        # 1. Course v·ªõi YouTube video
        echo "üé• Creating YouTube video course..."
        YOUTUBE_COURSE=$(curl -s -X POST "$BASE_URL/api/courses" \
          -H "Content-Type: application/json" \
          -d "{
            \"title\": \"Kh√≥a h·ªçc 3D IoT v·ªõi YouTube Video\",
            \"description\": \"Kh√≥a h·ªçc s·ª≠ d·ª•ng video YouTube ƒë·ªÉ h·ªçc 3D IoT\",
            \"instructorName\": \"Gi·∫£ng vi√™n YouTube\",
            \"durationMinutes\": 180,
            \"lessonsCount\": 5,
            \"level\": \"beginner\",
            \"price\": 0,
            \"status\": \"published\",
            \"curriculum\": [
              {
                \"title\": \"B√†i 1: Gi·ªõi thi·ªáu 3D IoT\",
                \"description\": \"T√¨m hi·ªÉu c∆° b·∫£n v·ªÅ 3D IoT\",
                \"duration\": 45,
                \"type\": \"video\",
                \"youtubeId\": \"LpUWKnEguB0\",
                \"youtubeUrl\": \"$YOUTUBE_VIDEO\"
              },
              {
                \"title\": \"B√†i 2: Th·ª±c h√†nh c∆° b·∫£n\",
                \"description\": \"Th·ª±c h√†nh c√°c k·ªπ nƒÉng c∆° b·∫£n\",
                \"duration\": 40,
                \"type\": \"video\",
                \"youtubeId\": \"LpUWKnEguB0\",
                \"youtubeUrl\": \"$YOUTUBE_VIDEO\"
              },
              {
                \"title\": \"B√†i 3: ·ª®ng d·ª•ng th·ª±c t·∫ø\",
                \"description\": \"√Åp d·ª•ng v√†o c√°c d·ª± √°n th·ª±c t·∫ø\",
                \"duration\": 50,
                \"type\": \"video\",
                \"youtubeId\": \"LpUWKnEguB0\",
                \"youtubeUrl\": \"$YOUTUBE_VIDEO\"
              }
            ]
          }")
        
        YOUTUBE_COURSE_ID=$(echo $YOUTUBE_COURSE | jq -r '.data.id' 2>/dev/null || echo "failed")
        echo "‚úÖ YouTube course: $YOUTUBE_COURSE_ID"
        
        # 2. Course v·ªõi online link
        echo "üîó Creating online link course..."
        ONLINE_COURSE=$(curl -s -X POST "$BASE_URL/api/courses" \
          -H "Content-Type: application/json" \
          -d "{
            \"title\": \"Kh√≥a h·ªçc 3D IoT Online Link\",
            \"description\": \"Kh√≥a h·ªçc s·ª≠ d·ª•ng online link ƒë·ªÉ h·ªçc 3D IoT\",
            \"instructorName\": \"Gi·∫£ng vi√™n Online\",
            \"durationMinutes\": 240,
            \"lessonsCount\": 6,
            \"level\": \"intermediate\",
            \"price\": 300000,
            \"status\": \"published\",
            \"curriculum\": [
              {
                \"title\": \"B√†i 1: T·ªïng quan Online Learning\",
                \"description\": \"Gi·ªõi thi·ªáu v·ªÅ h·ªçc t·∫≠p online\",
                \"duration\": 60,
                \"type\": \"link\",
                \"onlineLink\": \"$YOUTUBE_VIDEO\"
              },
              {
                \"title\": \"B√†i 2: K·ªπ thu·∫≠t n√¢ng cao\",
                \"description\": \"H·ªçc c√°c k·ªπ thu·∫≠t n√¢ng cao\",
                \"duration\": 50,
                \"type\": \"link\",
                \"onlineLink\": \"$YOUTUBE_VIDEO\"
              },
              {
                \"title\": \"B√†i 3: D·ª± √°n cu·ªëi kh√≥a\",
                \"description\": \"Th·ª±c hi·ªán d·ª± √°n cu·ªëi kh√≥a\",
                \"duration\": 90,
                \"type\": \"link\",
                \"onlineLink\": \"$YOUTUBE_VIDEO\"
              }
            ]
          }")
        
        ONLINE_COURSE_ID=$(echo $ONLINE_COURSE | jq -r '.data.id' 2>/dev/null || echo "failed")
        echo "‚úÖ Online link course: $ONLINE_COURSE_ID"
        
        # ƒêƒÉng k√Ω cho course YouTube (mi·ªÖn ph√≠)
        if [ "$YOUTUBE_COURSE_ID" != "failed" ] && [ "$YOUTUBE_COURSE_ID" != "null" ]; then
            echo "üìñ Enrolling in YouTube course..."
            ENROLL_RESPONSE=$(curl -s -X POST "$BASE_URL/api/course-enrollments" \
              -H "Content-Type: application/json" \
              -d "{
                \"courseId\": \"$YOUTUBE_COURSE_ID\",
                \"email\": \"$EMAIL\",
                \"name\": \"Nguy·ªÖn VƒÉn Test\",
                \"phone\": \"0123456789\"
              }")
            
            ENROLL_ID=$(echo $ENROLL_RESPONSE | jq -r '.data.id' 2>/dev/null || echo "failed")
            echo "‚úÖ YouTube course enrollment: $ENROLL_ID"
        fi
        
        # ƒêƒÉng k√Ω cho course online link (c√≥ ph√≠ - s·∫Ω pending)
        if [ "$ONLINE_COURSE_ID" != "failed" ] && [ "$ONLINE_COURSE_ID" != "null" ]; then
            echo "üìñ Enrolling in online link course (will be pending)..."
            ENROLL_RESPONSE=$(curl -s -X POST "$BASE_URL/api/course-enrollments" \
              -H "Content-Type: application/json" \
              -d "{
                \"courseId\": \"$ONLINE_COURSE_ID\",
                \"email\": \"$EMAIL\",
                \"name\": \"Nguy·ªÖn VƒÉn Test\",
                \"phone\": \"0123456789\"
              }")
            
            ENROLL_ID=$(echo $ENROLL_RESPONSE | jq -r '.data.id' 2>/dev/null || echo "failed")
            echo "‚úÖ Online course enrollment (pending): $ENROLL_ID"
        fi
        ;;

    3)
        echo "üìû Testing Contact + News..."
        
        # Test li√™n h·ªá h·ªó tr·ª£
        echo "üìß Testing contact support..."
        CONTACT_RESPONSE=$(curl -s -X POST "$BASE_URL/api/contacts" \
          -H "Content-Type: application/json" \
          -d "{
            \"name\": \"Nguy·ªÖn VƒÉn Test\",
            \"email\": \"$EMAIL\",
            \"phone\": \"0123456789\",
            \"message\": \"ƒê√¢y l√† tin nh·∫Øn test t·ª´ script curl ƒë·ªÉ ki·ªÉm tra ch·ª©c nƒÉng li√™n h·ªá h·ªó tr·ª£ c·ªßa h·ªá th·ªëng 3DIoT\",
            \"type\": \"support\"
          }")
        
        CONTACT_ID=$(echo $CONTACT_RESPONSE | jq -r '.data.id' 2>/dev/null || echo "failed")
        echo "‚úÖ Contact support: $CONTACT_ID"
        echo "Contact response: $CONTACT_RESPONSE"
        
        # Test t·∫°o tin t·ª©c
        echo "üì∞ Testing news creation..."
        NEWS_RESPONSE=$(curl -s -X POST "$BASE_URL/api/news" \
          -H "Content-Type: application/json" \
          -d '{
            "title": "Tin t·ª©c test t·ª´ script curl",
            "content": "ƒê√¢y l√† n·ªôi dung tin t·ª©c test ƒë∆∞·ª£c t·∫°o t·ª´ script curl ƒë·ªÉ ki·ªÉm tra ch·ª©c nƒÉng tin t·ª©c c·ªßa h·ªá th·ªëng 3DIoT",
            "author": "Script Test",
            "category": "technology",
            "status": "published",
            "featured": false,
            "tags": ["test", "3diot", "curl", "automation"]
          }')
        
        NEWS_ID=$(echo $NEWS_RESPONSE | jq -r '.data.id' 2>/dev/null || echo "failed")
        echo "‚úÖ News created: $NEWS_ID"
        echo "News response: $NEWS_RESPONSE"
        
        # Test newsletter subscription
        echo "üì¨ Testing newsletter subscription..."
        NEWSLETTER_RESPONSE=$(curl -s -X POST "$BASE_URL/api/newsletter" \
          -H "Content-Type: application/json" \
          -d "{
            \"email\": \"$EMAIL\",
            \"name\": \"Nguy·ªÖn VƒÉn Test\"
          }")
        
        NEWSLETTER_ID=$(echo $NEWSLETTER_RESPONSE | jq -r '.data.id' 2>/dev/null || echo "failed")
        echo "‚úÖ Newsletter subscription: $NEWSLETTER_ID"
        echo "Newsletter response: $NEWSLETTER_RESPONSE"
        
        # Test l·∫•y danh s√°ch tin t·ª©c
        echo "üìã Testing news list..."
        NEWS_LIST=$(curl -s -X GET "$BASE_URL/api/news")
        echo "News list: $NEWS_LIST"
        ;;

    *)
        echo "‚ùå Invalid choice"
        exit 1
        ;;
esac

echo ""
echo "üéâ Test completed!"
echo "üåê Check your app at: http://localhost:3000"
echo "üì± My Events: http://localhost:3000/my-events"
echo "üë®‚Äçüíº Admin: http://localhost:3000/admin"
