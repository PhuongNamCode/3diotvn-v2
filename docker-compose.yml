# 3DIoT Project - Single Docker Compose File
# Usage: docker compose up -d

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: 3diot-db
    restart: unless-stopped
    environment:
      POSTGRES_DB: web
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: 3diot2025secure
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: 3diot-redis
    restart: unless-stopped
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Next.js Application
  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: 3diot-app
    restart: unless-stopped
    environment:
      NODE_ENV: production
      DATABASE_URL: postgresql://postgres:3diot2025secure@postgres:5432/web?schema=public
      REDIS_URL: redis://redis:6379
      # Add other env vars from your .env file
      NEXT_PUBLIC_GOOGLE_CLIENT_ID: ${NEXT_PUBLIC_GOOGLE_CLIENT_ID}
      PERPLEXITY_API_KEY: ${PERPLEXITY_API_KEY}
      PERPLEXITY_MODEL: ${PERPLEXITY_MODEL}
      SMTP_HOST: ${SMTP_HOST}
      SMTP_USERNAME: ${SMTP_USERNAME}
      SMTP_PASSWORD: ${SMTP_PASSWORD}
      SMTP_PORT: ${SMTP_PORT}
      SMTP_SECURE: ${SMTP_SECURE}
      ADMIN_RESET_CODE: ${ADMIN_RESET_CODE}
      ENABLE_RATE_LIMITING: ${ENABLE_RATE_LIMITING}
    ports:
      - "3000:3000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/api/stats || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 20s

volumes:
  postgres_data:
  redis_data:

networks:
  default:
    name: 3diot-network
