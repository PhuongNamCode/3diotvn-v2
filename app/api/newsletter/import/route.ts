import { NextRequest, NextResponse } from 'next/server';
import { prisma } from '@/lib/prisma';

// Dynamic import for XLSX
let XLSX: any;

export async function POST(request: NextRequest) {
  try {
    console.log('üì§ Import API called');
    const formData = await request.formData();
    const file = formData.get('file') as File;

    console.log('üìÅ File received:', file ? file.name : 'No file');

    if (!file) {
      console.log('‚ùå No file provided');
      return NextResponse.json({ 
        success: false, 
        error: 'Kh√¥ng t√¨m th·∫•y file' 
      }, { status: 400 });
    }

    // Validate file type
    const allowedTypes = [
      'application/vnd.ms-excel',
      'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',
      'text/csv'
    ];

    if (!allowedTypes.includes(file.type)) {
      return NextResponse.json({ 
        success: false, 
        error: 'ƒê·ªãnh d·∫°ng file kh√¥ng ƒë∆∞·ª£c h·ªó tr·ª£. Vui l√≤ng ch·ªçn file Excel (.xlsx, .xls) ho·∫∑c CSV' 
      }, { status: 400 });
    }

    // Validate file size (max 5MB)
    const maxSize = 5 * 1024 * 1024; // 5MB
    if (file.size > maxSize) {
      return NextResponse.json({ 
        success: false, 
        error: 'File qu√° l·ªõn. Vui l√≤ng ch·ªçn file nh·ªè h∆°n 5MB' 
      }, { status: 400 });
    }

    // Dynamic import XLSX
    if (!XLSX) {
      XLSX = await import('xlsx');
    }

    // Read file content
    console.log('üìñ Reading file content...');
    const buffer = await file.arrayBuffer();
    let workbook: any;

    try {
      console.log('üìä Parsing file with XLSX...');
      workbook = XLSX.read(buffer, { type: 'buffer' });
      console.log('‚úÖ File parsed successfully');
    } catch (error) {
      console.error('‚ùå Error parsing file:', error);
      return NextResponse.json({ 
        success: false, 
        error: 'Kh√¥ng th·ªÉ ƒë·ªçc file. Vui l√≤ng ki·ªÉm tra ƒë·ªãnh d·∫°ng file' 
      }, { status: 400 });
    }

    // Get first sheet
    const sheetName = workbook.SheetNames[0];
    const worksheet = workbook.Sheets[sheetName];
    
    // Convert to JSON
    const data = XLSX.utils.sheet_to_json(worksheet, { header: 1 });
    
    if (data.length === 0) {
      return NextResponse.json({ 
        success: false, 
        error: 'File tr·ªëng ho·∫∑c kh√¥ng c√≥ d·ªØ li·ªáu' 
      }, { status: 400 });
    }

    // Extract emails from first column
    const emails: string[] = [];
    const errors: string[] = [];
    
    for (let i = 0; i < data.length; i++) {
      const row = data[i] as any[];
      if (row && row.length > 0) {
        const email = row[0]?.toString().trim();
        
        if (email) {
          // Basic email validation
          const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
          if (emailRegex.test(email)) {
            emails.push(email.toLowerCase());
          } else {
            errors.push(`D√≤ng ${i + 1}: Email kh√¥ng h·ª£p l·ªá - "${email}"`);
          }
        }
      }
    }

    if (emails.length === 0) {
      return NextResponse.json({ 
        success: false, 
        error: 'Kh√¥ng t√¨m th·∫•y email h·ª£p l·ªá n√†o trong file' 
      }, { status: 400 });
    }

    // Remove duplicates
    const uniqueEmails = [...new Set(emails)];

    // Check existing emails
    const existingEmails = await prisma.newsletterSubscription.findMany({
      where: {
        email: {
          in: uniqueEmails
        }
      },
      select: {
        email: true
      }
    });

    const existingEmailSet = new Set(existingEmails.map(e => e.email));
    const newEmails = uniqueEmails.filter(email => !existingEmailSet.has(email));
    const duplicateEmails = uniqueEmails.filter(email => existingEmailSet.has(email));

    // Insert new emails
    let insertedCount = 0;
    if (newEmails.length > 0) {
      const insertData = newEmails.map(email => ({
        email,
        status: 'active',
        source: 'excel_import'
      }));

      await prisma.newsletterSubscription.createMany({
        data: insertData,
        skipDuplicates: true
      });
      
      insertedCount = newEmails.length;
    }

    // Prepare response
    const result = {
      totalRows: data.length,
      validEmails: emails.length,
      uniqueEmails: uniqueEmails.length,
      newEmails: newEmails.length,
      duplicateEmails: duplicateEmails.length,
      insertedCount,
      errors: errors.slice(0, 10), // Limit errors to first 10
      duplicateEmailList: duplicateEmails.slice(0, 10) // Limit to first 10
    };

    return NextResponse.json({
      success: true,
      message: `Import th√†nh c√¥ng! ƒê√£ th√™m ${insertedCount} email m·ªõi`,
      data: result
    });

  } catch (error) {
    console.error('‚ùå Error importing Excel file:', error);
    return NextResponse.json({ 
      success: false, 
      error: 'C√≥ l·ªói x·∫£y ra khi x·ª≠ l√Ω file' 
    }, { status: 500 });
  }
}

// GET endpoint ƒë·ªÉ l·∫•y th·ªëng k√™ import
export async function GET(request: NextRequest) {
  try {
    const url = new URL(request.url);
    const page = parseInt(url.searchParams.get('page') || '1');
    const limit = parseInt(url.searchParams.get('limit') || '10');

    // Get newsletter subscriptions imported from Excel
    const imports = await prisma.newsletterSubscription.findMany({
      where: {
        source: 'excel_import'
      },
      orderBy: { createdAt: 'desc' },
      skip: (page - 1) * limit,
      take: limit
    });

    const total = await prisma.newsletterSubscription.count({
      where: {
        source: 'excel_import'
      }
    });

    return NextResponse.json({
      success: true,
      data: imports,
      pagination: {
        page,
        limit,
        total,
        pages: Math.ceil(total / limit)
      }
    });
  } catch (error) {
    console.error('‚ùå Error fetching import data:', error);
    return NextResponse.json({ 
      success: false, 
      error: 'Failed to fetch import data' 
    }, { status: 500 });
  }
}
